File "vc-based.pv", line 249, characters 24-28:
Warning: identifier scope rebound.
File "vc-based.pv", line 249, characters 41-45:
Warning: identifier solid rebound.
File "vc-based.pv", line 328, characters 10-11:
Warning: identifier u' rebound.
Linear part:
exp(g(x),y) = exp(g(y),x)
Completing equations...
Completed equations:
exp(g(x),y) = exp(g(y),x)
Convergent part: No equation.
Process 0 (that is, the initial process):
{1}new i: bitstring;
{2}new u: bitstring;
{3}new p: bitstring;
{4}out(c, i);
{5}out(c, u);
{6}out(c, p);
{7}new ski: SecretKey;
{8}new sku: SecretKey;
{9}new skp: SecretKey;
{10}out(c, pk(ski));
{11}out(c, pk(sku));
{12}out(c, pk(skp));
{13}new password: bitstring;
(
    {14}!
    {15}let c_1: channel = c in
    {16}let i_1: bitstring = i in
    {17}let ski_1: SecretKey = ski in
    {18}let pki: PublicKey = pk(ski) in
    {19}let u_1: bitstring = u in
    {20}let pku: PublicKey = pk(sku) in
    {21}let password_1: bitstring = password in
    {22}in(c_1, e: bitstring);
    {23}if (e = u_1) then
    (
        {24}let talksOnlyToHonest: bool = true in
        {25}in(c_1, m_1: bitstring);
        {26}let (tag1': bitstring,bitgx: bitstring) = m_1 in
        {27}if (tag1 = tag1') then
        {28}let gx: G = unbitG(bitgx) in
        {29}new y: exponent;
        {30}let gy: G = g(y) in
        {31}let k_IU: SymmetricKey = GtoSymK(exp(gx,y)) in
        {32}let m_2: bitstring = (bitG(gy),enc((tag2,sign((gy,gx),ski_1)),k_IU)) in
        {33}out(c_1, m_2);
        {34}in(c_1, m_3: bitstring);
        {35}let (tag3': bitstring,signature: bitstring) = dec(m_3,k_IU) in
        {36}if (tag3 = tag3') then
        {37}if ((gx,gy) = check(signature,pku)) then
        {38}in(c_1, m_4: bitstring);
        {39}let (tag4': bitstring,u': bitstring,attr': bitstring,password': bitstring) = dec(m_4,k_IU) in
        {40}if (tag4 = tag4') then
        {41}if (u_1 = u') then
        {42}if (attr' = attr) then
        {43}if (password' = password_1) then
        {44}let claims: bitstring = (u_1,i_1,attr) in
        {45}let VC: bitstring = (claims,sign(claims,ski_1)) in
        {46}let m_5: bitstring = enc((tag5,sign((VC,u_1),ski_1)),k_IU) in
        {47}event issuerSendsLastMessageToUser(m_1,m_2,m_3,m_4,m_5);
        {48}out(c_1, m_5);
        {49}if talksOnlyToHonest then
        {50}out(c_1, check_reach_issuer);
        {51}event issuerCompletesProtocol(m_1,m_2,m_3,m_4);
        {52}out(chSymK(k_IU), symmetric_key_IU)
    )
    else
        {53}in(c_1, pke: PublicKey);
        {54}in(c_1, wrong_pw: bitstring);
        {55}let talksOnlyToHonest_1: bool = false in
        {56}in(c_1, m: bitstring);
        {57}let (tag1'_1: bitstring,bitgx_1: bitstring) = m in
        {58}if (tag1 = tag1'_1) then
        {59}let gx_1: G = unbitG(bitgx_1) in
        {60}new y_1: exponent;
        {61}let gy_1: G = g(y_1) in
        {62}let k_IU_1: SymmetricKey = GtoSymK(exp(gx_1,y_1)) in
        {63}let m_6: bitstring = (bitG(gy_1),enc((tag2,sign((gy_1,gx_1),ski_1)),k_IU_1)) in
        {64}out(c_1, m_6);
        {65}in(c_1, m_7: bitstring);
        {66}let (tag3'_1: bitstring,signature_1: bitstring) = dec(m_7,k_IU_1) in
        {67}if (tag3 = tag3'_1) then
        {68}if ((gx_1,gy_1) = check(signature_1,pke)) then
        {69}in(c_1, m_8: bitstring);
        {70}let (tag4'_1: bitstring,u'_1: bitstring,attr'_1: bitstring,password'_1: bitstring) = dec(m_8,k_IU_1) in
        {71}if (tag4 = tag4'_1) then
        {72}if (e = u'_1) then
        {73}if (attr'_1 = attr) then
        {74}if (password'_1 = wrong_pw) then
        {75}let claims_1: bitstring = (e,i_1,attr) in
        {76}let VC_1: bitstring = (claims_1,sign(claims_1,ski_1)) in
        {77}let m_9: bitstring = enc((tag5,sign((VC_1,e),ski_1)),k_IU_1) in
        {78}event issuerSendsLastMessageToUser(m,m_6,m_7,m_8,m_9);
        {79}out(c_1, m_9);
        {80}if talksOnlyToHonest_1 then
        {81}out(c_1, check_reach_issuer);
        {82}event issuerCompletesProtocol(m,m_6,m_7,m_8);
        {83}out(chSymK(k_IU_1), symmetric_key_IU)
) | (
    {84}!
    {85}let c_2: channel = c in
    {86}let u_2: bitstring = u in
    {87}let sku_1: SecretKey = sku in
    {88}let pku_1: PublicKey = pk(sku) in
    {89}let i_2: bitstring = i in
    {90}let pki_1: PublicKey = pk(ski) in
    {91}let p_1: bitstring = p in
    {92}let pkp: PublicKey = pk(skp) in
    {93}let password_2: bitstring = password in
    {94}in(c_2, e_1: bitstring);
    {95}if (e_1 = i_2) then
    (
        {96}let talksOnlyToHonest_2: bool = true in
        {97}new x: exponent;
        {98}let gx_2: G = g(x) in
        {99}let m_10: bitstring = (tag1,bitG(gx_2)) in
        {100}out(c_2, m_10);
        {101}in(c_2, m_11: bitstring);
        {102}let (bitgy: bitstring,encryption: bitstring) = m_11 in
        {103}let gy_2: G = unbitG(bitgy) in
        {104}let k_IU_2: SymmetricKey = GtoSymK(exp(gy_2,x)) in
        {105}let (tag2': bitstring,signature_2: bitstring) = dec(encryption,k_IU_2) in
        {106}if (tag2 = tag2') then
        {107}if ((gy_2,gx_2) = check(signature_2,pki_1)) then
        {108}let m_12: bitstring = enc((tag3,sign((gx_2,gy_2),sku_1)),k_IU_2) in
        {109}out(c_2, m_12);
        {110}let m_13: bitstring = enc((tag4,u_2,attr,password_2),k_IU_2) in
        {111}event userSendsLastMessageToIssuer(m_10,m_11,m_12,m_13);
        {112}out(c_2, m_13);
        {113}in(c_2, m_14: bitstring);
        {114}let (tag5': bitstring,signed_VC: bitstring) = dec(m_14,k_IU_2) in
        {115}if (tag5 = tag5') then
        {116}let (VC_2: bitstring,u'_2: bitstring) = check(signed_VC,pki_1) in
        {117}let (claims_2: bitstring,signed_claims: bitstring) = VC_2 in
        {118}let (u'_3: bitstring,i': bitstring,attr'_2: bitstring) = check(signed_claims,pki_1) in
        {119}if (u_2 = u'_3) then
        {120}if (i_2 = i') then
        {121}if (attr = attr'_2) then
        {122}let N: bitstring = (VC_2,scope,solid) in
        {123}let PT: bitstring = sign(N,sku_1) in
        (
            {124}!
            {125}in(c_2, e_2: bitstring);
            {126}if (e_2 = p_1) then
            (
                {127}let talksOnlyToHonest_3: bool = true in
                {128}new x_1: exponent;
                {129}let gx_3: G = g(x_1) in
                {130}let m_15: bitstring = (tag6,bitG(gx_3)) in
                {131}out(c_2, m_15);
                {132}in(c_2, m_16: bitstring);
                {133}let (bitgy_1: bitstring,encryption_1: bitstring) = m_16 in
                {134}let gy_3: G = unbitG(bitgy_1) in
                {135}let k_UP: SymmetricKey = GtoSymK(exp(gy_3,x_1)) in
                {136}let (tag7': bitstring,signature_3: bitstring) = dec(encryption_1,k_UP) in
                {137}if (tag7 = tag7') then
                {138}if ((gy_3,gx_3) = check(signature_3,pkp)) then
                {139}let m_17: bitstring = enc((tag8,sign((gx_3,gy_3),sku_1)),k_UP) in
                {140}out(c_2, m_17);
                {141}let m_18: bitstring = enc((tag9,uri),k_UP) in
                {142}out(c_2, m_18);
                {143}in(c_2, m_19: bitstring);
                {144}let (tag10': bitstring,rule': bitstring,nc: bitstring) = dec(m_19,k_UP) in
                {145}if (tag10 = tag10') then
                {146}let N_1: bitstring = check(PT,pku_1) in
                {147}let (VC_3: bitstring,scope_1: bitstring,solid_1: bitstring) = N_1 in
                {148}let (claims_3: bitstring,signed_claims_1: bitstring) = VC_3 in
                {149}let (u'_4: bitstring,i'_1: bitstring,attr'_3: bitstring) = check(signed_claims_1,pki_1) in
                {150}let (u'': bitstring,i'': bitstring,attr'': bitstring) = rule' in
                {151}if (u'_4 = u'') then
                {152}if (i'_1 = i'') then
                {153}if (attr'_3 = attr'') then
                {154}let m_20: bitstring = enc((tag11,PT,nc),k_UP) in
                {155}event userSendsLastMessageToPod(m_15,m_16,m_17,m_18,m_19,m_20);
                {156}out(c_2, m_20);
                {157}in(c_2, m_21: bitstring);
                {158}let (tag12': bitstring,signed_accesstoken: bitstring) = dec(m_21,k_UP) in
                {159}if (tag12 = tag12') then
                {160}let accesstoken: bitstring = check(signed_accesstoken,pkp) in
                {161}if talksOnlyToHonest_3 then
                {162}out(c_2, check_reach_user_to_pod);
                {163}event userCompletesProtocolFull(m_10,m_11,m_12,m_13,m_14,m_15,m_16,m_17,m_18,m_19,m_20,m_21);
                {164}out(chSymK(k_UP), symmetric_key_UP)
            )
            else
                {165}in(c_2, pke_1: PublicKey);
                {166}let talksOnlyToHonest_4: bool = false in
                {167}new x_2: exponent;
                {168}let gx_4: G = g(x_2) in
                {169}let m_22: bitstring = (tag6,bitG(gx_4)) in
                {170}out(c_2, m_22);
                {171}in(c_2, m_23: bitstring);
                {172}let (bitgy_2: bitstring,encryption_2: bitstring) = m_23 in
                {173}let gy_4: G = unbitG(bitgy_2) in
                {174}let k_UP_1: SymmetricKey = GtoSymK(exp(gy_4,x_2)) in
                {175}let (tag7'_1: bitstring,signature_4: bitstring) = dec(encryption_2,k_UP_1) in
                {176}if (tag7 = tag7'_1) then
                {177}if ((gy_4,gx_4) = check(signature_4,pke_1)) then
                {178}let m_24: bitstring = enc((tag8,sign((gx_4,gy_4),sku_1)),k_UP_1) in
                {179}out(c_2, m_24);
                {180}let m_25: bitstring = enc((tag9,uri),k_UP_1) in
                {181}out(c_2, m_25);
                {182}in(c_2, m_26: bitstring);
                {183}let (tag10'_1: bitstring,rule'_1: bitstring,nc_1: bitstring) = dec(m_26,k_UP_1) in
                {184}if (tag10 = tag10'_1) then
                {185}let N_2: bitstring = check(PT,pku_1) in
                {186}let (VC_4: bitstring,scope_2: bitstring,solid_2: bitstring) = N_2 in
                {187}let (claims_4: bitstring,signed_claims_2: bitstring) = VC_4 in
                {188}let (u'_5: bitstring,i'_2: bitstring,attr'_4: bitstring) = check(signed_claims_2,pki_1) in
                {189}let (u''_1: bitstring,i''_1: bitstring,attr''_1: bitstring) = rule'_1 in
                {190}if (u'_5 = u''_1) then
                {191}if (i'_2 = i''_1) then
                {192}if (attr'_4 = attr''_1) then
                {193}let m_27: bitstring = enc((tag11,PT,nc_1),k_UP_1) in
                {194}event userSendsLastMessageToPod(m_22,m_23,m_24,m_25,m_26,m_27);
                {195}out(c_2, m_27);
                {196}in(c_2, m_28: bitstring);
                {197}let (tag12'_1: bitstring,signed_accesstoken_1: bitstring) = dec(m_28,k_UP_1) in
                {198}if (tag12 = tag12'_1) then
                {199}let accesstoken_1: bitstring = check(signed_accesstoken_1,pke_1) in
                {200}if talksOnlyToHonest_4 then
                {201}out(c_2, check_reach_user_to_pod);
                {202}event userCompletesProtocolFull(m_10,m_11,m_12,m_13,m_14,m_22,m_23,m_24,m_25,m_26,m_27,m_28);
                {203}out(chSymK(k_UP_1), symmetric_key_UP)
        ) | (
            {204}if talksOnlyToHonest_2 then
            {205}out(c_2, check_reach_user);
            {206}event userCompletesProtocol(m_10,m_11,m_12,m_13,m_14);
            {207}out(chSymK(k_IU_2), symmetric_key_IU)
        )
    )
    else
        {208}in(c_2, pke_2: PublicKey);
        {209}in(c_2, wrong_pw_1: bitstring);
        {210}let talksOnlyToHonest_5: bool = false in
        {211}new x_3: exponent;
        {212}let gx_5: G = g(x_3) in
        {213}let m_29: bitstring = (tag1,bitG(gx_5)) in
        {214}out(c_2, m_29);
        {215}in(c_2, m_30: bitstring);
        {216}let (bitgy_3: bitstring,encryption_3: bitstring) = m_30 in
        {217}let gy_5: G = unbitG(bitgy_3) in
        {218}let k_IU_3: SymmetricKey = GtoSymK(exp(gy_5,x_3)) in
        {219}let (tag2'_1: bitstring,signature_5: bitstring) = dec(encryption_3,k_IU_3) in
        {220}if (tag2 = tag2'_1) then
        {221}if ((gy_5,gx_5) = check(signature_5,pke_2)) then
        {222}let m_31: bitstring = enc((tag3,sign((gx_5,gy_5),sku_1)),k_IU_3) in
        {223}out(c_2, m_31);
        {224}let m_32: bitstring = enc((tag4,u_2,attr,wrong_pw_1),k_IU_3) in
        {225}event userSendsLastMessageToIssuer(m_29,m_30,m_31,m_32);
        {226}out(c_2, m_32);
        {227}in(c_2, m_33: bitstring);
        {228}let (tag5'_1: bitstring,signed_VC_1: bitstring) = dec(m_33,k_IU_3) in
        {229}if (tag5 = tag5'_1) then
        {230}let (VC_5: bitstring,u'_6: bitstring) = check(signed_VC_1,pke_2) in
        {231}let (claims_5: bitstring,signed_claims_3: bitstring) = VC_5 in
        {232}let (u'_7: bitstring,i'_3: bitstring,attr'_5: bitstring) = check(signed_claims_3,pke_2) in
        {233}if (u_2 = u'_7) then
        {234}if (e_1 = i'_3) then
        {235}if (attr = attr'_5) then
        {236}let N_3: bitstring = (VC_5,scope,solid) in
        {237}let PT_1: bitstring = sign(N_3,sku_1) in
        (
            {238}!
            {239}in(c_2, e_3: bitstring);
            {240}if (e_3 = p_1) then
            (
                {241}let talksOnlyToHonest_6: bool = true in
                {242}new x_4: exponent;
                {243}let gx_6: G = g(x_4) in
                {244}let m_34: bitstring = (tag6,bitG(gx_6)) in
                {245}out(c_2, m_34);
                {246}in(c_2, m_35: bitstring);
                {247}let (bitgy_4: bitstring,encryption_4: bitstring) = m_35 in
                {248}let gy_6: G = unbitG(bitgy_4) in
                {249}let k_UP_2: SymmetricKey = GtoSymK(exp(gy_6,x_4)) in
                {250}let (tag7'_2: bitstring,signature_6: bitstring) = dec(encryption_4,k_UP_2) in
                {251}if (tag7 = tag7'_2) then
                {252}if ((gy_6,gx_6) = check(signature_6,pkp)) then
                {253}let m_36: bitstring = enc((tag8,sign((gx_6,gy_6),sku_1)),k_UP_2) in
                {254}out(c_2, m_36);
                {255}let m_37: bitstring = enc((tag9,uri),k_UP_2) in
                {256}out(c_2, m_37);
                {257}in(c_2, m_38: bitstring);
                {258}let (tag10'_2: bitstring,rule'_2: bitstring,nc_2: bitstring) = dec(m_38,k_UP_2) in
                {259}if (tag10 = tag10'_2) then
                {260}let N_4: bitstring = check(PT_1,pku_1) in
                {261}let (VC_6: bitstring,scope_3: bitstring,solid_3: bitstring) = N_4 in
                {262}let (claims_6: bitstring,signed_claims_4: bitstring) = VC_6 in
                {263}let (u'_8: bitstring,i'_4: bitstring,attr'_6: bitstring) = check(signed_claims_4,pke_2) in
                {264}let (u''_2: bitstring,i''_2: bitstring,attr''_2: bitstring) = rule'_2 in
                {265}if (u'_8 = u''_2) then
                {266}if (i'_4 = i''_2) then
                {267}if (attr'_6 = attr''_2) then
                {268}let m_39: bitstring = enc((tag11,PT_1,nc_2),k_UP_2) in
                {269}event userSendsLastMessageToPod(m_34,m_35,m_36,m_37,m_38,m_39);
                {270}out(c_2, m_39);
                {271}in(c_2, m_40: bitstring);
                {272}let (tag12'_2: bitstring,signed_accesstoken_2: bitstring) = dec(m_40,k_UP_2) in
                {273}if (tag12 = tag12'_2) then
                {274}let accesstoken_2: bitstring = check(signed_accesstoken_2,pkp) in
                {275}if talksOnlyToHonest_6 then
                {276}out(c_2, check_reach_user_to_pod);
                {277}event userCompletesProtocolFull(m_29,m_30,m_31,m_32,m_33,m_34,m_35,m_36,m_37,m_38,m_39,m_40);
                {278}out(chSymK(k_UP_2), symmetric_key_UP)
            )
            else
                {279}in(c_2, pke_3: PublicKey);
                {280}let talksOnlyToHonest_7: bool = false in
                {281}new x_5: exponent;
                {282}let gx_7: G = g(x_5) in
                {283}let m_41: bitstring = (tag6,bitG(gx_7)) in
                {284}out(c_2, m_41);
                {285}in(c_2, m_42: bitstring);
                {286}let (bitgy_5: bitstring,encryption_5: bitstring) = m_42 in
                {287}let gy_7: G = unbitG(bitgy_5) in
                {288}let k_UP_3: SymmetricKey = GtoSymK(exp(gy_7,x_5)) in
                {289}let (tag7'_3: bitstring,signature_7: bitstring) = dec(encryption_5,k_UP_3) in
                {290}if (tag7 = tag7'_3) then
                {291}if ((gy_7,gx_7) = check(signature_7,pke_3)) then
                {292}let m_43: bitstring = enc((tag8,sign((gx_7,gy_7),sku_1)),k_UP_3) in
                {293}out(c_2, m_43);
                {294}let m_44: bitstring = enc((tag9,uri),k_UP_3) in
                {295}out(c_2, m_44);
                {296}in(c_2, m_45: bitstring);
                {297}let (tag10'_3: bitstring,rule'_3: bitstring,nc_3: bitstring) = dec(m_45,k_UP_3) in
                {298}if (tag10 = tag10'_3) then
                {299}let N_5: bitstring = check(PT_1,pku_1) in
                {300}let (VC_7: bitstring,scope_4: bitstring,solid_4: bitstring) = N_5 in
                {301}let (claims_7: bitstring,signed_claims_5: bitstring) = VC_7 in
                {302}let (u'_9: bitstring,i'_5: bitstring,attr'_7: bitstring) = check(signed_claims_5,pke_2) in
                {303}let (u''_3: bitstring,i''_3: bitstring,attr''_3: bitstring) = rule'_3 in
                {304}if (u'_9 = u''_3) then
                {305}if (i'_5 = i''_3) then
                {306}if (attr'_7 = attr''_3) then
                {307}let m_46: bitstring = enc((tag11,PT_1,nc_3),k_UP_3) in
                {308}event userSendsLastMessageToPod(m_41,m_42,m_43,m_44,m_45,m_46);
                {309}out(c_2, m_46);
                {310}in(c_2, m_47: bitstring);
                {311}let (tag12'_3: bitstring,signed_accesstoken_3: bitstring) = dec(m_47,k_UP_3) in
                {312}if (tag12 = tag12'_3) then
                {313}let accesstoken_3: bitstring = check(signed_accesstoken_3,pke_3) in
                {314}if talksOnlyToHonest_7 then
                {315}out(c_2, check_reach_user_to_pod);
                {316}event userCompletesProtocolFull(m_29,m_30,m_31,m_32,m_33,m_41,m_42,m_43,m_44,m_45,m_46,m_47);
                {317}out(chSymK(k_UP_3), symmetric_key_UP)
        ) | (
            {318}if talksOnlyToHonest_5 then
            {319}out(c_2, check_reach_user);
            {320}event userCompletesProtocol(m_29,m_30,m_31,m_32,m_33);
            {321}out(chSymK(k_IU_3), symmetric_key_IU)
        )
) | (
    {322}!
    {323}let c_3: channel = c in
    {324}let p_2: bitstring = p in
    {325}let skp_1: SecretKey = skp in
    {326}let u_3: bitstring = u in
    {327}let pku_2: PublicKey = pk(sku) in
    {328}let i_3: bitstring = i in
    {329}let pki_2: PublicKey = pk(ski) in
    {330}in(c_3, e_4: bitstring);
    {331}if (e_4 = u_3) then
    (
        {332}let talksOnlyToHonest_8: bool = true in
        {333}in(c_3, m_48: bitstring);
        {334}let (tag6': bitstring,bitgx_2: bitstring) = m_48 in
        {335}if (tag6 = tag6') then
        {336}let gx_8: G = unbitG(bitgx_2) in
        {337}new y_2: exponent;
        {338}let gy_8: G = g(y_2) in
        {339}let k_UP_4: SymmetricKey = GtoSymK(exp(gx_8,y_2)) in
        {340}let m_49: bitstring = (bitG(gy_8),enc((tag7,sign((gy_8,gx_8),skp_1)),k_UP_4)) in
        {341}out(c_3, m_49);
        {342}in(c_3, m_50: bitstring);
        {343}let (tag8': bitstring,signature_8: bitstring) = dec(m_50,k_UP_4) in
        {344}if (tag8 = tag8') then
        {345}if ((gx_8,gy_8) = check(signature_8,pku_2)) then
        {346}in(c_3, m_51: bitstring);
        {347}let (tag9': bitstring,uri': bitstring) = dec(m_51,k_UP_4) in
        {348}if (tag9 = tag9') then
        {349}if (uri' = uri) then
        {350}new nc_4: bitstring;
        {351}let rule: bitstring = (u_3,i_3,attr) in
        {352}let m_52: bitstring = enc((tag10,rule,nc_4),k_UP_4) in
        {353}out(c_3, m_52);
        {354}in(c_3, m_53: bitstring);
        {355}let (tag11': bitstring,PT_2: bitstring,nc': bitstring) = dec(m_53,k_UP_4) in
        {356}if (tag11 = tag11') then
        {357}if (nc_4 = nc') then
        {358}let (VC_8: bitstring,scope': bitstring,solid': bitstring) = check(PT_2,pku_2) in
        {359}let (claims_8: bitstring,signed_claims_6: bitstring) = VC_8 in
        {360}let (u'_10: bitstring,i'_6: bitstring,attr'_8: bitstring) = check(signed_claims_6,pki_2) in
        {361}if (i_3 = i'_6) then
        {362}if (u_3 = u'_10) then
        {363}if (scope = scope') then
        {364}if (solid = solid') then
        {365}if (attr = attr'_8) then
        {366}new accesstoken_4: bitstring;
        {367}let m_54: bitstring = enc((tag12,sign(accesstoken_4,skp_1)),k_UP_4) in
        {368}event podSendsLastMessageToUser(m_48,m_49,m_50,m_51,m_52,m_53,m_54);
        {369}out(c_3, m_54);
        {370}if talksOnlyToHonest_8 then
        {371}out(c_3, check_reach_pod);
        {372}event podCompletesProtocol(m_48,m_49,m_50,m_51,m_52,m_53);
        {373}out(chSymK(k_UP_4), symmetric_key_UP)
    )
    else
        {374}in(c_3, pke_4: PublicKey);
        {375}let talksOnlyToHonest_9: bool = false in
        {376}in(c_3, m_55: bitstring);
        {377}let (tag6'_1: bitstring,bitgx_3: bitstring) = m_55 in
        {378}if (tag6 = tag6'_1) then
        {379}let gx_9: G = unbitG(bitgx_3) in
        {380}new y_3: exponent;
        {381}let gy_9: G = g(y_3) in
        {382}let k_UP_5: SymmetricKey = GtoSymK(exp(gx_9,y_3)) in
        {383}let m_56: bitstring = (bitG(gy_9),enc((tag7,sign((gy_9,gx_9),skp_1)),k_UP_5)) in
        {384}out(c_3, m_56);
        {385}in(c_3, m_57: bitstring);
        {386}let (tag8'_1: bitstring,signature_9: bitstring) = dec(m_57,k_UP_5) in
        {387}if (tag8 = tag8'_1) then
        {388}if ((gx_9,gy_9) = check(signature_9,pke_4)) then
        {389}in(c_3, m_58: bitstring);
        {390}let (tag9'_1: bitstring,uri'_1: bitstring) = dec(m_58,k_UP_5) in
        {391}if (tag9 = tag9'_1) then
        {392}if (uri'_1 = uri) then
        {393}new nc_5: bitstring;
        {394}let rule_1: bitstring = (e_4,i_3,attr) in
        {395}let m_59: bitstring = enc((tag10,rule_1,nc_5),k_UP_5) in
        {396}out(c_3, m_59);
        {397}in(c_3, m_60: bitstring);
        {398}let (tag11'_1: bitstring,PT_3: bitstring,nc'_1: bitstring) = dec(m_60,k_UP_5) in
        {399}if (tag11 = tag11'_1) then
        {400}if (nc_5 = nc'_1) then
        {401}let (VC_9: bitstring,scope'_1: bitstring,solid'_1: bitstring) = check(PT_3,pke_4) in
        {402}let (claims_9: bitstring,signed_claims_7: bitstring) = VC_9 in
        {403}let (u'_11: bitstring,i'_7: bitstring,attr'_9: bitstring) = check(signed_claims_7,pki_2) in
        {404}if (i_3 = i'_7) then
        {405}if (e_4 = u'_11) then
        {406}if (scope = scope'_1) then
        {407}if (solid = solid'_1) then
        {408}if (attr = attr'_9) then
        {409}new accesstoken_5: bitstring;
        {410}let m_61: bitstring = enc((tag12,sign(accesstoken_5,skp_1)),k_UP_5) in
        {411}event podSendsLastMessageToUser(m_55,m_56,m_57,m_58,m_59,m_60,m_61);
        {412}out(c_3, m_61);
        {413}if talksOnlyToHonest_9 then
        {414}out(c_3, check_reach_pod);
        {415}event podCompletesProtocol(m_55,m_56,m_57,m_58,m_59,m_60);
        {416}out(chSymK(k_UP_5), symmetric_key_UP)
)

--  Process 1 (that is, process 0, with let moved downwards):
{1}new i: bitstring;
{2}new u: bitstring;
{3}new p: bitstring;
{4}out(c, i);
{5}out(c, u);
{6}out(c, p);
{7}new ski: SecretKey;
{8}new sku: SecretKey;
{9}new skp: SecretKey;
{10}out(c, pk(ski));
{11}out(c, pk(sku));
{12}out(c, pk(skp));
{13}new password: bitstring;
(
    {14}!
    {15}let c_1: channel = c in
    {22}in(c_1, e: bitstring);
    {19}let u_1: bitstring = u in
    {17}let ski_1: SecretKey = ski in
    {16}let i_1: bitstring = i in
    {23}if (e = u_1) then
    (
        {25}in(c_1, m_1: bitstring);
        {26}let (tag1': bitstring,bitgx: bitstring) = m_1 in
        {27}if (tag1 = tag1') then
        {28}let gx: G = unbitG(bitgx) in
        {29}new y: exponent;
        {31}let k_IU: SymmetricKey = GtoSymK(exp(gx,y)) in
        {30}let gy: G = g(y) in
        {32}let m_2: bitstring = (bitG(gy),enc((tag2,sign((gy,gx),ski_1)),k_IU)) in
        {33}out(c_1, m_2);
        {34}in(c_1, m_3: bitstring);
        {35}let (tag3': bitstring,signature: bitstring) = dec(m_3,k_IU) in
        {36}if (tag3 = tag3') then
        {20}let pku: PublicKey = pk(sku) in
        {37}if ((gx,gy) = check(signature,pku)) then
        {38}in(c_1, m_4: bitstring);
        {39}let (tag4': bitstring,u': bitstring,attr': bitstring,password': bitstring) = dec(m_4,k_IU) in
        {40}if (tag4 = tag4') then
        {41}if (u_1 = u') then
        {42}if (attr' = attr) then
        {21}let password_1: bitstring = password in
        {43}if (password' = password_1) then
        {44}let claims: bitstring = (u_1,i_1,attr) in
        {45}let VC: bitstring = (claims,sign(claims,ski_1)) in
        {46}let m_5: bitstring = enc((tag5,sign((VC,u_1),ski_1)),k_IU) in
        {47}event issuerSendsLastMessageToUser(m_1,m_2,m_3,m_4,m_5);
        {48}out(c_1, m_5);
        {24}let talksOnlyToHonest: bool = true in
        {49}if talksOnlyToHonest then
        {50}out(c_1, check_reach_issuer);
        {51}event issuerCompletesProtocol(m_1,m_2,m_3,m_4);
        {52}out(chSymK(k_IU), symmetric_key_IU)
    )
    else
        {53}in(c_1, pke: PublicKey);
        {54}in(c_1, wrong_pw: bitstring);
        {56}in(c_1, m: bitstring);
        {57}let (tag1'_1: bitstring,bitgx_1: bitstring) = m in
        {58}if (tag1 = tag1'_1) then
        {59}let gx_1: G = unbitG(bitgx_1) in
        {60}new y_1: exponent;
        {62}let k_IU_1: SymmetricKey = GtoSymK(exp(gx_1,y_1)) in
        {61}let gy_1: G = g(y_1) in
        {63}let m_6: bitstring = (bitG(gy_1),enc((tag2,sign((gy_1,gx_1),ski_1)),k_IU_1)) in
        {64}out(c_1, m_6);
        {65}in(c_1, m_7: bitstring);
        {66}let (tag3'_1: bitstring,signature_1: bitstring) = dec(m_7,k_IU_1) in
        {67}if (tag3 = tag3'_1) then
        {68}if ((gx_1,gy_1) = check(signature_1,pke)) then
        {69}in(c_1, m_8: bitstring);
        {70}let (tag4'_1: bitstring,u'_1: bitstring,attr'_1: bitstring,password'_1: bitstring) = dec(m_8,k_IU_1) in
        {71}if (tag4 = tag4'_1) then
        {72}if (e = u'_1) then
        {73}if (attr'_1 = attr) then
        {74}if (password'_1 = wrong_pw) then
        {75}let claims_1: bitstring = (e,i_1,attr) in
        {76}let VC_1: bitstring = (claims_1,sign(claims_1,ski_1)) in
        {77}let m_9: bitstring = enc((tag5,sign((VC_1,e),ski_1)),k_IU_1) in
        {78}event issuerSendsLastMessageToUser(m,m_6,m_7,m_8,m_9);
        {79}out(c_1, m_9);
        {55}let talksOnlyToHonest_1: bool = false in
        {80}if talksOnlyToHonest_1 then
        {81}out(c_1, check_reach_issuer);
        {82}event issuerCompletesProtocol(m,m_6,m_7,m_8);
        {83}out(chSymK(k_IU_1), symmetric_key_IU)
) | (
    {84}!
    {85}let c_2: channel = c in
    {94}in(c_2, e_1: bitstring);
    {92}let pkp: PublicKey = pk(skp) in
    {91}let p_1: bitstring = p in
    {89}let i_2: bitstring = i in
    {88}let pku_1: PublicKey = pk(sku) in
    {87}let sku_1: SecretKey = sku in
    {86}let u_2: bitstring = u in
    {95}if (e_1 = i_2) then
    (
        {97}new x: exponent;
        {98}let gx_2: G = g(x) in
        {99}let m_10: bitstring = (tag1,bitG(gx_2)) in
        {100}out(c_2, m_10);
        {101}in(c_2, m_11: bitstring);
        {102}let (bitgy: bitstring,encryption: bitstring) = m_11 in
        {103}let gy_2: G = unbitG(bitgy) in
        {104}let k_IU_2: SymmetricKey = GtoSymK(exp(gy_2,x)) in
        {105}let (tag2': bitstring,signature_2: bitstring) = dec(encryption,k_IU_2) in
        {106}if (tag2 = tag2') then
        {90}let pki_1: PublicKey = pk(ski) in
        {107}if ((gy_2,gx_2) = check(signature_2,pki_1)) then
        {108}let m_12: bitstring = enc((tag3,sign((gx_2,gy_2),sku_1)),k_IU_2) in
        {109}out(c_2, m_12);
        {93}let password_2: bitstring = password in
        {110}let m_13: bitstring = enc((tag4,u_2,attr,password_2),k_IU_2) in
        {111}event userSendsLastMessageToIssuer(m_10,m_11,m_12,m_13);
        {112}out(c_2, m_13);
        {113}in(c_2, m_14: bitstring);
        {114}let (tag5': bitstring,signed_VC: bitstring) = dec(m_14,k_IU_2) in
        {115}if (tag5 = tag5') then
        {116}let (VC_2: bitstring,u'_2: bitstring) = check(signed_VC,pki_1) in
        {117}let (claims_2: bitstring,signed_claims: bitstring) = VC_2 in
        {118}let (u'_3: bitstring,i': bitstring,attr'_2: bitstring) = check(signed_claims,pki_1) in
        {119}if (u_2 = u'_3) then
        {120}if (i_2 = i') then
        {121}if (attr = attr'_2) then
        (
            {124}!
            {125}in(c_2, e_2: bitstring);
            {122}let N: bitstring = (VC_2,scope,solid) in
            {123}let PT: bitstring = sign(N,sku_1) in
            {126}if (e_2 = p_1) then
            (
                {128}new x_1: exponent;
                {129}let gx_3: G = g(x_1) in
                {130}let m_15: bitstring = (tag6,bitG(gx_3)) in
                {131}out(c_2, m_15);
                {132}in(c_2, m_16: bitstring);
                {133}let (bitgy_1: bitstring,encryption_1: bitstring) = m_16 in
                {134}let gy_3: G = unbitG(bitgy_1) in
                {135}let k_UP: SymmetricKey = GtoSymK(exp(gy_3,x_1)) in
                {136}let (tag7': bitstring,signature_3: bitstring) = dec(encryption_1,k_UP) in
                {137}if (tag7 = tag7') then
                {138}if ((gy_3,gx_3) = check(signature_3,pkp)) then
                {139}let m_17: bitstring = enc((tag8,sign((gx_3,gy_3),sku_1)),k_UP) in
                {140}out(c_2, m_17);
                {141}let m_18: bitstring = enc((tag9,uri),k_UP) in
                {142}out(c_2, m_18);
                {143}in(c_2, m_19: bitstring);
                {144}let (tag10': bitstring,rule': bitstring,nc: bitstring) = dec(m_19,k_UP) in
                {145}if (tag10 = tag10') then
                {146}let N_1: bitstring = check(PT,pku_1) in
                {147}let (VC_3: bitstring,scope_1: bitstring,solid_1: bitstring) = N_1 in
                {148}let (claims_3: bitstring,signed_claims_1: bitstring) = VC_3 in
                {149}let (u'_4: bitstring,i'_1: bitstring,attr'_3: bitstring) = check(signed_claims_1,pki_1) in
                {150}let (u'': bitstring,i'': bitstring,attr'': bitstring) = rule' in
                {151}if (u'_4 = u'') then
                {152}if (i'_1 = i'') then
                {153}if (attr'_3 = attr'') then
                {154}let m_20: bitstring = enc((tag11,PT,nc),k_UP) in
                {155}event userSendsLastMessageToPod(m_15,m_16,m_17,m_18,m_19,m_20);
                {156}out(c_2, m_20);
                {157}in(c_2, m_21: bitstring);
                {158}let (tag12': bitstring,signed_accesstoken: bitstring) = dec(m_21,k_UP) in
                {159}if (tag12 = tag12') then
                {160}let accesstoken: bitstring = check(signed_accesstoken,pkp) in
                {127}let talksOnlyToHonest_3: bool = true in
                {161}if talksOnlyToHonest_3 then
                {162}out(c_2, check_reach_user_to_pod);
                {163}event userCompletesProtocolFull(m_10,m_11,m_12,m_13,m_14,m_15,m_16,m_17,m_18,m_19,m_20,m_21);
                {164}out(chSymK(k_UP), symmetric_key_UP)
            )
            else
                {165}in(c_2, pke_1: PublicKey);
                {167}new x_2: exponent;
                {168}let gx_4: G = g(x_2) in
                {169}let m_22: bitstring = (tag6,bitG(gx_4)) in
                {170}out(c_2, m_22);
                {171}in(c_2, m_23: bitstring);
                {172}let (bitgy_2: bitstring,encryption_2: bitstring) = m_23 in
                {173}let gy_4: G = unbitG(bitgy_2) in
                {174}let k_UP_1: SymmetricKey = GtoSymK(exp(gy_4,x_2)) in
                {175}let (tag7'_1: bitstring,signature_4: bitstring) = dec(encryption_2,k_UP_1) in
                {176}if (tag7 = tag7'_1) then
                {177}if ((gy_4,gx_4) = check(signature_4,pke_1)) then
                {178}let m_24: bitstring = enc((tag8,sign((gx_4,gy_4),sku_1)),k_UP_1) in
                {179}out(c_2, m_24);
                {180}let m_25: bitstring = enc((tag9,uri),k_UP_1) in
                {181}out(c_2, m_25);
                {182}in(c_2, m_26: bitstring);
                {183}let (tag10'_1: bitstring,rule'_1: bitstring,nc_1: bitstring) = dec(m_26,k_UP_1) in
                {184}if (tag10 = tag10'_1) then
                {185}let N_2: bitstring = check(PT,pku_1) in
                {186}let (VC_4: bitstring,scope_2: bitstring,solid_2: bitstring) = N_2 in
                {187}let (claims_4: bitstring,signed_claims_2: bitstring) = VC_4 in
                {188}let (u'_5: bitstring,i'_2: bitstring,attr'_4: bitstring) = check(signed_claims_2,pki_1) in
                {189}let (u''_1: bitstring,i''_1: bitstring,attr''_1: bitstring) = rule'_1 in
                {190}if (u'_5 = u''_1) then
                {191}if (i'_2 = i''_1) then
                {192}if (attr'_4 = attr''_1) then
                {193}let m_27: bitstring = enc((tag11,PT,nc_1),k_UP_1) in
                {194}event userSendsLastMessageToPod(m_22,m_23,m_24,m_25,m_26,m_27);
                {195}out(c_2, m_27);
                {196}in(c_2, m_28: bitstring);
                {197}let (tag12'_1: bitstring,signed_accesstoken_1: bitstring) = dec(m_28,k_UP_1) in
                {198}if (tag12 = tag12'_1) then
                {199}let accesstoken_1: bitstring = check(signed_accesstoken_1,pke_1) in
                {166}let talksOnlyToHonest_4: bool = false in
                {200}if talksOnlyToHonest_4 then
                {201}out(c_2, check_reach_user_to_pod);
                {202}event userCompletesProtocolFull(m_10,m_11,m_12,m_13,m_14,m_22,m_23,m_24,m_25,m_26,m_27,m_28);
                {203}out(chSymK(k_UP_1), symmetric_key_UP)
        ) | (
            {96}let talksOnlyToHonest_2: bool = true in
            {204}if talksOnlyToHonest_2 then
            {205}out(c_2, check_reach_user);
            {206}event userCompletesProtocol(m_10,m_11,m_12,m_13,m_14);
            {207}out(chSymK(k_IU_2), symmetric_key_IU)
        )
    )
    else
        {208}in(c_2, pke_2: PublicKey);
        {209}in(c_2, wrong_pw_1: bitstring);
        {211}new x_3: exponent;
        {212}let gx_5: G = g(x_3) in
        {213}let m_29: bitstring = (tag1,bitG(gx_5)) in
        {214}out(c_2, m_29);
        {215}in(c_2, m_30: bitstring);
        {216}let (bitgy_3: bitstring,encryption_3: bitstring) = m_30 in
        {217}let gy_5: G = unbitG(bitgy_3) in
        {218}let k_IU_3: SymmetricKey = GtoSymK(exp(gy_5,x_3)) in
        {219}let (tag2'_1: bitstring,signature_5: bitstring) = dec(encryption_3,k_IU_3) in
        {220}if (tag2 = tag2'_1) then
        {221}if ((gy_5,gx_5) = check(signature_5,pke_2)) then
        {222}let m_31: bitstring = enc((tag3,sign((gx_5,gy_5),sku_1)),k_IU_3) in
        {223}out(c_2, m_31);
        {224}let m_32: bitstring = enc((tag4,u_2,attr,wrong_pw_1),k_IU_3) in
        {225}event userSendsLastMessageToIssuer(m_29,m_30,m_31,m_32);
        {226}out(c_2, m_32);
        {227}in(c_2, m_33: bitstring);
        {228}let (tag5'_1: bitstring,signed_VC_1: bitstring) = dec(m_33,k_IU_3) in
        {229}if (tag5 = tag5'_1) then
        {230}let (VC_5: bitstring,u'_6: bitstring) = check(signed_VC_1,pke_2) in
        {231}let (claims_5: bitstring,signed_claims_3: bitstring) = VC_5 in
        {232}let (u'_7: bitstring,i'_3: bitstring,attr'_5: bitstring) = check(signed_claims_3,pke_2) in
        {233}if (u_2 = u'_7) then
        {234}if (e_1 = i'_3) then
        {235}if (attr = attr'_5) then
        (
            {238}!
            {239}in(c_2, e_3: bitstring);
            {236}let N_3: bitstring = (VC_5,scope,solid) in
            {237}let PT_1: bitstring = sign(N_3,sku_1) in
            {240}if (e_3 = p_1) then
            (
                {242}new x_4: exponent;
                {243}let gx_6: G = g(x_4) in
                {244}let m_34: bitstring = (tag6,bitG(gx_6)) in
                {245}out(c_2, m_34);
                {246}in(c_2, m_35: bitstring);
                {247}let (bitgy_4: bitstring,encryption_4: bitstring) = m_35 in
                {248}let gy_6: G = unbitG(bitgy_4) in
                {249}let k_UP_2: SymmetricKey = GtoSymK(exp(gy_6,x_4)) in
                {250}let (tag7'_2: bitstring,signature_6: bitstring) = dec(encryption_4,k_UP_2) in
                {251}if (tag7 = tag7'_2) then
                {252}if ((gy_6,gx_6) = check(signature_6,pkp)) then
                {253}let m_36: bitstring = enc((tag8,sign((gx_6,gy_6),sku_1)),k_UP_2) in
                {254}out(c_2, m_36);
                {255}let m_37: bitstring = enc((tag9,uri),k_UP_2) in
                {256}out(c_2, m_37);
                {257}in(c_2, m_38: bitstring);
                {258}let (tag10'_2: bitstring,rule'_2: bitstring,nc_2: bitstring) = dec(m_38,k_UP_2) in
                {259}if (tag10 = tag10'_2) then
                {260}let N_4: bitstring = check(PT_1,pku_1) in
                {261}let (VC_6: bitstring,scope_3: bitstring,solid_3: bitstring) = N_4 in
                {262}let (claims_6: bitstring,signed_claims_4: bitstring) = VC_6 in
                {263}let (u'_8: bitstring,i'_4: bitstring,attr'_6: bitstring) = check(signed_claims_4,pke_2) in
                {264}let (u''_2: bitstring,i''_2: bitstring,attr''_2: bitstring) = rule'_2 in
                {265}if (u'_8 = u''_2) then
                {266}if (i'_4 = i''_2) then
                {267}if (attr'_6 = attr''_2) then
                {268}let m_39: bitstring = enc((tag11,PT_1,nc_2),k_UP_2) in
                {269}event userSendsLastMessageToPod(m_34,m_35,m_36,m_37,m_38,m_39);
                {270}out(c_2, m_39);
                {271}in(c_2, m_40: bitstring);
                {272}let (tag12'_2: bitstring,signed_accesstoken_2: bitstring) = dec(m_40,k_UP_2) in
                {273}if (tag12 = tag12'_2) then
                {274}let accesstoken_2: bitstring = check(signed_accesstoken_2,pkp) in
                {241}let talksOnlyToHonest_6: bool = true in
                {275}if talksOnlyToHonest_6 then
                {276}out(c_2, check_reach_user_to_pod);
                {277}event userCompletesProtocolFull(m_29,m_30,m_31,m_32,m_33,m_34,m_35,m_36,m_37,m_38,m_39,m_40);
                {278}out(chSymK(k_UP_2), symmetric_key_UP)
            )
            else
                {279}in(c_2, pke_3: PublicKey);
                {281}new x_5: exponent;
                {282}let gx_7: G = g(x_5) in
                {283}let m_41: bitstring = (tag6,bitG(gx_7)) in
                {284}out(c_2, m_41);
                {285}in(c_2, m_42: bitstring);
                {286}let (bitgy_5: bitstring,encryption_5: bitstring) = m_42 in
                {287}let gy_7: G = unbitG(bitgy_5) in
                {288}let k_UP_3: SymmetricKey = GtoSymK(exp(gy_7,x_5)) in
                {289}let (tag7'_3: bitstring,signature_7: bitstring) = dec(encryption_5,k_UP_3) in
                {290}if (tag7 = tag7'_3) then
                {291}if ((gy_7,gx_7) = check(signature_7,pke_3)) then
                {292}let m_43: bitstring = enc((tag8,sign((gx_7,gy_7),sku_1)),k_UP_3) in
                {293}out(c_2, m_43);
                {294}let m_44: bitstring = enc((tag9,uri),k_UP_3) in
                {295}out(c_2, m_44);
                {296}in(c_2, m_45: bitstring);
                {297}let (tag10'_3: bitstring,rule'_3: bitstring,nc_3: bitstring) = dec(m_45,k_UP_3) in
                {298}if (tag10 = tag10'_3) then
                {299}let N_5: bitstring = check(PT_1,pku_1) in
                {300}let (VC_7: bitstring,scope_4: bitstring,solid_4: bitstring) = N_5 in
                {301}let (claims_7: bitstring,signed_claims_5: bitstring) = VC_7 in
                {302}let (u'_9: bitstring,i'_5: bitstring,attr'_7: bitstring) = check(signed_claims_5,pke_2) in
                {303}let (u''_3: bitstring,i''_3: bitstring,attr''_3: bitstring) = rule'_3 in
                {304}if (u'_9 = u''_3) then
                {305}if (i'_5 = i''_3) then
                {306}if (attr'_7 = attr''_3) then
                {307}let m_46: bitstring = enc((tag11,PT_1,nc_3),k_UP_3) in
                {308}event userSendsLastMessageToPod(m_41,m_42,m_43,m_44,m_45,m_46);
                {309}out(c_2, m_46);
                {310}in(c_2, m_47: bitstring);
                {311}let (tag12'_3: bitstring,signed_accesstoken_3: bitstring) = dec(m_47,k_UP_3) in
                {312}if (tag12 = tag12'_3) then
                {313}let accesstoken_3: bitstring = check(signed_accesstoken_3,pke_3) in
                {280}let talksOnlyToHonest_7: bool = false in
                {314}if talksOnlyToHonest_7 then
                {315}out(c_2, check_reach_user_to_pod);
                {316}event userCompletesProtocolFull(m_29,m_30,m_31,m_32,m_33,m_41,m_42,m_43,m_44,m_45,m_46,m_47);
                {317}out(chSymK(k_UP_3), symmetric_key_UP)
        ) | (
            {210}let talksOnlyToHonest_5: bool = false in
            {318}if talksOnlyToHonest_5 then
            {319}out(c_2, check_reach_user);
            {320}event userCompletesProtocol(m_29,m_30,m_31,m_32,m_33);
            {321}out(chSymK(k_IU_3), symmetric_key_IU)
        )
) | (
    {322}!
    {323}let c_3: channel = c in
    {330}in(c_3, e_4: bitstring);
    {329}let pki_2: PublicKey = pk(ski) in
    {328}let i_3: bitstring = i in
    {326}let u_3: bitstring = u in
    {325}let skp_1: SecretKey = skp in
    {331}if (e_4 = u_3) then
    (
        {333}in(c_3, m_48: bitstring);
        {334}let (tag6': bitstring,bitgx_2: bitstring) = m_48 in
        {335}if (tag6 = tag6') then
        {336}let gx_8: G = unbitG(bitgx_2) in
        {337}new y_2: exponent;
        {339}let k_UP_4: SymmetricKey = GtoSymK(exp(gx_8,y_2)) in
        {338}let gy_8: G = g(y_2) in
        {340}let m_49: bitstring = (bitG(gy_8),enc((tag7,sign((gy_8,gx_8),skp_1)),k_UP_4)) in
        {341}out(c_3, m_49);
        {342}in(c_3, m_50: bitstring);
        {343}let (tag8': bitstring,signature_8: bitstring) = dec(m_50,k_UP_4) in
        {344}if (tag8 = tag8') then
        {327}let pku_2: PublicKey = pk(sku) in
        {345}if ((gx_8,gy_8) = check(signature_8,pku_2)) then
        {346}in(c_3, m_51: bitstring);
        {347}let (tag9': bitstring,uri': bitstring) = dec(m_51,k_UP_4) in
        {348}if (tag9 = tag9') then
        {349}if (uri' = uri) then
        {350}new nc_4: bitstring;
        {351}let rule: bitstring = (u_3,i_3,attr) in
        {352}let m_52: bitstring = enc((tag10,rule,nc_4),k_UP_4) in
        {353}out(c_3, m_52);
        {354}in(c_3, m_53: bitstring);
        {355}let (tag11': bitstring,PT_2: bitstring,nc': bitstring) = dec(m_53,k_UP_4) in
        {356}if (tag11 = tag11') then
        {357}if (nc_4 = nc') then
        {358}let (VC_8: bitstring,scope': bitstring,solid': bitstring) = check(PT_2,pku_2) in
        {359}let (claims_8: bitstring,signed_claims_6: bitstring) = VC_8 in
        {360}let (u'_10: bitstring,i'_6: bitstring,attr'_8: bitstring) = check(signed_claims_6,pki_2) in
        {361}if (i_3 = i'_6) then
        {362}if (u_3 = u'_10) then
        {363}if (scope = scope') then
        {364}if (solid = solid') then
        {365}if (attr = attr'_8) then
        {366}new accesstoken_4: bitstring;
        {367}let m_54: bitstring = enc((tag12,sign(accesstoken_4,skp_1)),k_UP_4) in
        {368}event podSendsLastMessageToUser(m_48,m_49,m_50,m_51,m_52,m_53,m_54);
        {369}out(c_3, m_54);
        {332}let talksOnlyToHonest_8: bool = true in
        {370}if talksOnlyToHonest_8 then
        {371}out(c_3, check_reach_pod);
        {372}event podCompletesProtocol(m_48,m_49,m_50,m_51,m_52,m_53);
        {373}out(chSymK(k_UP_4), symmetric_key_UP)
    )
    else
        {374}in(c_3, pke_4: PublicKey);
        {376}in(c_3, m_55: bitstring);
        {377}let (tag6'_1: bitstring,bitgx_3: bitstring) = m_55 in
        {378}if (tag6 = tag6'_1) then
        {379}let gx_9: G = unbitG(bitgx_3) in
        {380}new y_3: exponent;
        {382}let k_UP_5: SymmetricKey = GtoSymK(exp(gx_9,y_3)) in
        {381}let gy_9: G = g(y_3) in
        {383}let m_56: bitstring = (bitG(gy_9),enc((tag7,sign((gy_9,gx_9),skp_1)),k_UP_5)) in
        {384}out(c_3, m_56);
        {385}in(c_3, m_57: bitstring);
        {386}let (tag8'_1: bitstring,signature_9: bitstring) = dec(m_57,k_UP_5) in
        {387}if (tag8 = tag8'_1) then
        {388}if ((gx_9,gy_9) = check(signature_9,pke_4)) then
        {389}in(c_3, m_58: bitstring);
        {390}let (tag9'_1: bitstring,uri'_1: bitstring) = dec(m_58,k_UP_5) in
        {391}if (tag9 = tag9'_1) then
        {392}if (uri'_1 = uri) then
        {393}new nc_5: bitstring;
        {394}let rule_1: bitstring = (e_4,i_3,attr) in
        {395}let m_59: bitstring = enc((tag10,rule_1,nc_5),k_UP_5) in
        {396}out(c_3, m_59);
        {397}in(c_3, m_60: bitstring);
        {398}let (tag11'_1: bitstring,PT_3: bitstring,nc'_1: bitstring) = dec(m_60,k_UP_5) in
        {399}if (tag11 = tag11'_1) then
        {400}if (nc_5 = nc'_1) then
        {401}let (VC_9: bitstring,scope'_1: bitstring,solid'_1: bitstring) = check(PT_3,pke_4) in
        {402}let (claims_9: bitstring,signed_claims_7: bitstring) = VC_9 in
        {403}let (u'_11: bitstring,i'_7: bitstring,attr'_9: bitstring) = check(signed_claims_7,pki_2) in
        {404}if (i_3 = i'_7) then
        {405}if (e_4 = u'_11) then
        {406}if (scope = scope'_1) then
        {407}if (solid = solid'_1) then
        {408}if (attr = attr'_9) then
        {409}new accesstoken_5: bitstring;
        {410}let m_61: bitstring = enc((tag12,sign(accesstoken_5,skp_1)),k_UP_5) in
        {411}event podSendsLastMessageToUser(m_55,m_56,m_57,m_58,m_59,m_60,m_61);
        {412}out(c_3, m_61);
        {375}let talksOnlyToHonest_9: bool = false in
        {413}if talksOnlyToHonest_9 then
        {414}out(c_3, check_reach_pod);
        {415}event podCompletesProtocol(m_55,m_56,m_57,m_58,m_59,m_60);
        {416}out(chSymK(k_UP_5), symmetric_key_UP)
)

-- Query not attacker(check_reach_issuer[]) in process 1.
Translating the process into Horn clauses...
select attacker(bitG(gx_10))/-5000
Completing...
Termination warning: attacker(bitG(elem)) -> attacker(elem)
Selecting 0
200 rules inserted. Base: 191 rules (57 with conclusion selected). Queue: 174 rules.
400 rules inserted. Base: 353 rules (75 with conclusion selected). Queue: 233 rules.
600 rules inserted. Base: 526 rules (91 with conclusion selected). Queue: 278 rules.
800 rules inserted. Base: 714 rules (97 with conclusion selected). Queue: 452 rules.
1000 rules inserted. Base: 810 rules (102 with conclusion selected). Queue: 524 rules.
1200 rules inserted. Base: 940 rules (102 with conclusion selected). Queue: 542 rules.
1400 rules inserted. Base: 1049 rules (109 with conclusion selected). Queue: 592 rules.
1600 rules inserted. Base: 1175 rules (109 with conclusion selected). Queue: 549 rules.
1800 rules inserted. Base: 1265 rules (110 with conclusion selected). Queue: 518 rules.
2000 rules inserted. Base: 1394 rules (114 with conclusion selected). Queue: 499 rules.
2200 rules inserted. Base: 1507 rules (116 with conclusion selected). Queue: 431 rules.
2400 rules inserted. Base: 1551 rules (121 with conclusion selected). Queue: 447 rules.
2600 rules inserted. Base: 1618 rules (124 with conclusion selected). Queue: 367 rules.
2800 rules inserted. Base: 1692 rules (130 with conclusion selected). Queue: 383 rules.
3000 rules inserted. Base: 1726 rules (137 with conclusion selected). Queue: 365 rules.
3200 rules inserted. Base: 1739 rules (147 with conclusion selected). Queue: 363 rules.
3400 rules inserted. Base: 1794 rules (151 with conclusion selected). Queue: 289 rules.
3600 rules inserted. Base: 1845 rules (151 with conclusion selected). Queue: 215 rules.
3800 rules inserted. Base: 1950 rules (151 with conclusion selected). Queue: 111 rules.
select attacker(bitG(g(x_6)))/-5000
4000 rules inserted. Base: 2049 rules (171 with conclusion selected). Queue: 195 rules.
4200 rules inserted. Base: 2194 rules (184 with conclusion selected). Queue: 336 rules.
4400 rules inserted. Base: 2325 rules (192 with conclusion selected). Queue: 451 rules.
4600 rules inserted. Base: 2419 rules (192 with conclusion selected). Queue: 433 rules.
4800 rules inserted. Base: 2502 rules (198 with conclusion selected). Queue: 504 rules.
5000 rules inserted. Base: 2625 rules (198 with conclusion selected). Queue: 535 rules.
5200 rules inserted. Base: 2708 rules (201 with conclusion selected). Queue: 588 rules.
5400 rules inserted. Base: 2802 rules (202 with conclusion selected). Queue: 628 rules.
5600 rules inserted. Base: 2901 rules (202 with conclusion selected). Queue: 658 rules.
5800 rules inserted. Base: 2989 rules (206 with conclusion selected). Queue: 715 rules.
6000 rules inserted. Base: 3058 rules (206 with conclusion selected). Queue: 716 rules.
6200 rules inserted. Base: 3180 rules (206 with conclusion selected). Queue: 709 rules.
6400 rules inserted. Base: 3260 rules (206 with conclusion selected). Queue: 731 rules.
6600 rules inserted. Base: 3304 rules (212 with conclusion selected). Queue: 760 rules.
6800 rules inserted. Base: 3390 rules (212 with conclusion selected). Queue: 777 rules.
7000 rules inserted. Base: 3455 rules (212 with conclusion selected). Queue: 765 rules.
7200 rules inserted. Base: 3508 rules (215 with conclusion selected). Queue: 824 rules.
7400 rules inserted. Base: 3566 rules (215 with conclusion selected). Queue: 751 rules.
7600 rules inserted. Base: 3628 rules (215 with conclusion selected). Queue: 744 rules.
7800 rules inserted. Base: 3684 rules (215 with conclusion selected). Queue: 710 rules.
8000 rules inserted. Base: 3708 rules (215 with conclusion selected). Queue: 703 rules.
8200 rules inserted. Base: 3773 rules (219 with conclusion selected). Queue: 616 rules.
8400 rules inserted. Base: 3797 rules (219 with conclusion selected). Queue: 570 rules.
8600 rules inserted. Base: 3844 rules (219 with conclusion selected). Queue: 532 rules.
8800 rules inserted. Base: 3819 rules (223 with conclusion selected). Queue: 498 rules.
9000 rules inserted. Base: 3827 rules (223 with conclusion selected). Queue: 423 rules.
9200 rules inserted. Base: 3879 rules (224 with conclusion selected). Queue: 362 rules.
9400 rules inserted. Base: 3831 rules (224 with conclusion selected). Queue: 287 rules.
9600 rules inserted. Base: 3867 rules (236 with conclusion selected). Queue: 206 rules.
9800 rules inserted. Base: 3850 rules (254 with conclusion selected). Queue: 174 rules.
10000 rules inserted. Base: 3823 rules (272 with conclusion selected). Queue: 182 rules.
10200 rules inserted. Base: 3854 rules (290 with conclusion selected). Queue: 151 rules.
10400 rules inserted. Base: 3942 rules (306 with conclusion selected). Queue: 279 rules.
10600 rules inserted. Base: 4034 rules (318 with conclusion selected). Queue: 229 rules.
10800 rules inserted. Base: 4088 rules (326 with conclusion selected). Queue: 244 rules.
11000 rules inserted. Base: 4209 rules (328 with conclusion selected). Queue: 268 rules.
11200 rules inserted. Base: 4302 rules (334 with conclusion selected). Queue: 385 rules.
11400 rules inserted. Base: 4425 rules (338 with conclusion selected). Queue: 370 rules.
11600 rules inserted. Base: 4502 rules (342 with conclusion selected). Queue: 366 rules.
11800 rules inserted. Base: 4620 rules (352 with conclusion selected). Queue: 542 rules.
12000 rules inserted. Base: 4671 rules (352 with conclusion selected). Queue: 523 rules.
12200 rules inserted. Base: 4761 rules (354 with conclusion selected). Queue: 556 rules.
12400 rules inserted. Base: 4801 rules (356 with conclusion selected). Queue: 554 rules.
12600 rules inserted. Base: 4847 rules (358 with conclusion selected). Queue: 539 rules.
12800 rules inserted. Base: 4932 rules (358 with conclusion selected). Queue: 523 rules.
13000 rules inserted. Base: 5048 rules (358 with conclusion selected). Queue: 475 rules.
13200 rules inserted. Base: 5161 rules (358 with conclusion selected). Queue: 358 rules.
13400 rules inserted. Base: 5236 rules (358 with conclusion selected). Queue: 280 rules.
13600 rules inserted. Base: 5320 rules (358 with conclusion selected). Queue: 156 rules.
13800 rules inserted. Base: 5445 rules (362 with conclusion selected). Queue: 20 rules.
Starting query not attacker(check_reach_issuer[])
goal reachable: attacker(check_reach_issuer[])

Derivation:
Abbreviations:
x_6 = x[e_1 = i[],!1 = @sid]
y_4 = y[m_1 = (tag1,bitG(g(x_6))),e = u[],!1 = @sid_1]

1. The message u[] may be sent to the attacker at output {5}.
attacker(u[]).

2. The message i[] may be sent to the attacker at output {4}.
attacker(i[]).

3. The message i[] that the attacker may have by 2 may be received at input {94}.
So the message (tag1,bitG(g(x_6))) may be sent to the attacker at output {100}.
attacker((tag1,bitG(g(x_6)))).

4. By 3, the attacker may know (tag1,bitG(g(x_6))).
Using the function 2-proj-2-tuple the attacker may obtain bitG(g(x_6)).
attacker(bitG(g(x_6))).

5. Using the function tag1 the attacker may obtain tag1.
attacker(tag1).

6. By 5, the attacker may know tag1.
By 4, the attacker may know bitG(g(x_6)).
Using the function 2-tuple the attacker may obtain (tag1,bitG(g(x_6))).
attacker((tag1,bitG(g(x_6)))).

7. The message u[] that the attacker may have by 1 may be received at input {22}.
The message (tag1,bitG(g(x_6))) that the attacker may have by 6 may be received at input {25}.
So the message (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4)))) may be sent to the attacker at output {33}.
attacker((bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4))))).

8. By 7, the attacker may know (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4)))).
Using the function 2-proj-2-tuple the attacker may obtain enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4))).
attacker(enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4)))).

9. By 7, the attacker may know (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4)))).
Using the function 1-proj-2-tuple the attacker may obtain bitG(g(y_4)).
attacker(bitG(g(y_4))).

10. By 9, the attacker may know bitG(g(y_4)).
By 8, the attacker may know enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4))).
Using the function 2-tuple the attacker may obtain (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4)))).
attacker((bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4))))).

11. The message i[] that the attacker may have by 2 may be received at input {94}.
The message (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4)))) that the attacker may have by 10 may be received at input {101}.
So the message enc((tag3,sign((g(x_6),g(y_4)),sku[])),GtoSymK(exp(g(x_6),y_4))) may be sent to the attacker at output {109}.
attacker(enc((tag3,sign((g(x_6),g(y_4)),sku[])),GtoSymK(exp(g(x_6),y_4)))).

12. The message i[] that the attacker may have by 2 may be received at input {94}.
The message (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4)))) that the attacker may have by 10 may be received at input {101}.
So the message enc((tag4,u[],attr,password[]),GtoSymK(exp(g(x_6),y_4))) may be sent to the attacker at output {112}.
attacker(enc((tag4,u[],attr,password[]),GtoSymK(exp(g(x_6),y_4)))).

13. The message u[] that the attacker may have by 1 may be received at input {22}.
The message (tag1,bitG(g(x_6))) that the attacker may have by 6 may be received at input {25}.
The message enc((tag3,sign((g(x_6),g(y_4)),sku[])),GtoSymK(exp(g(x_6),y_4))) that the attacker may have by 11 may be received at input {34}.
The message enc((tag4,u[],attr,password[]),GtoSymK(exp(g(x_6),y_4))) that the attacker may have by 12 may be received at input {38}.
So the message check_reach_issuer[] may be sent to the attacker at output {50}.
attacker(check_reach_issuer[]).

14. By 13, attacker(check_reach_issuer[]).
The goal is reached, represented in the following fact:
attacker(check_reach_issuer[]).


A more detailed output of the traces is available with
  set traceDisplay = long.

new i: bitstring creating i_4 at {1}

new u: bitstring creating u_4 at {2}

new p: bitstring creating p_3 at {3}

out(c, ~M) with ~M = i_4 at {4}

out(c, ~M_1) with ~M_1 = u_4 at {5}

out(c, ~M_2) with ~M_2 = p_3 at {6}

new ski: SecretKey creating ski_2 at {7}

new sku: SecretKey creating sku_2 at {8}

new skp: SecretKey creating skp_2 at {9}

out(c, ~M_3) with ~M_3 = pk(ski_2) at {10}

out(c, ~M_4) with ~M_4 = pk(sku_2) at {11}

out(c, ~M_5) with ~M_5 = pk(skp_2) at {12}

new password: bitstring creating password_3 at {13}

in(c, ~M_1) with ~M_1 = u_4 at {22} in copy a

in(c, ~M) with ~M = i_4 at {94} in copy a_1

new x: exponent creating x_6 at {97} in copy a_1

out(c, (~M_6,~M_7)) with ~M_6 = tag1, ~M_7 = bitG(g(x_6)) at {100} in copy a_1

in(c, (tag1,~M_7)) with ~M_7 = bitG(g(x_6)) at {25} in copy a

new y: exponent creating y_4 at {29} in copy a

out(c, (~M_8,~M_9)) with ~M_8 = bitG(g(y_4)), ~M_9 = enc((tag2,sign((g(y_4),g(x_6)),ski_2)),GtoSymK(exp(g(x_6),y_4))) at {33} in copy a

in(c, (~M_8,~M_9)) with ~M_8 = bitG(g(y_4)), ~M_9 = enc((tag2,sign((g(y_4),g(x_6)),ski_2)),GtoSymK(exp(g(x_6),y_4))) at {101} in copy a_1

out(c, ~M_10) with ~M_10 = enc((tag3,sign((g(x_6),g(y_4)),sku_2)),GtoSymK(exp(g(y_4),x_6))) at {109} in copy a_1

event userSendsLastMessageToIssuer((tag1,bitG(g(x_6))),(bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski_2)),GtoSymK(exp(g(x_6),y_4)))),enc((tag3,sign((g(x_6),g(y_4)),sku_2)),GtoSymK(exp(g(y_4),x_6))),enc((tag4,u_4,attr,password_3),GtoSymK(exp(g(y_4),x_6)))) at {111} in copy a_1

out(c, ~M_11) with ~M_11 = enc((tag4,u_4,attr,password_3),GtoSymK(exp(g(y_4),x_6))) at {112} in copy a_1

in(c, ~M_10) with ~M_10 = enc((tag3,sign((g(x_6),g(y_4)),sku_2)),GtoSymK(exp(g(x_6),y_4))) at {34} in copy a

in(c, ~M_11) with ~M_11 = enc((tag4,u_4,attr,password_3),GtoSymK(exp(g(x_6),y_4))) at {38} in copy a

event issuerSendsLastMessageToUser((tag1,bitG(g(x_6))),(bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski_2)),GtoSymK(exp(g(x_6),y_4)))),enc((tag3,sign((g(x_6),g(y_4)),sku_2)),GtoSymK(exp(g(x_6),y_4))),enc((tag4,u_4,attr,password_3),GtoSymK(exp(g(x_6),y_4))),enc((tag5,sign((((u_4,i_4,attr),sign((u_4,i_4,attr),ski_2)),u_4),ski_2)),GtoSymK(exp(g(x_6),y_4)))) at {47} in copy a

out(c, ~M_12) with ~M_12 = enc((tag5,sign((((u_4,i_4,attr),sign((u_4,i_4,attr),ski_2)),u_4),ski_2)),GtoSymK(exp(g(x_6),y_4))) at {48} in copy a

out(c, ~M_13) with ~M_13 = check_reach_issuer at {50} in copy a

event issuerCompletesProtocol((tag1,bitG(g(x_6))),(bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski_2)),GtoSymK(exp(g(x_6),y_4)))),enc((tag3,sign((g(x_6),g(y_4)),sku_2)),GtoSymK(exp(g(x_6),y_4))),enc((tag4,u_4,attr,password_3),GtoSymK(exp(g(x_6),y_4)))) at {51} in copy a

The attacker has the message ~M_13 = check_reach_issuer.
A trace has been found.
RESULT not attacker(check_reach_issuer[]) is false.
-- Query not attacker(check_reach_user[]) in process 1.
Translating the process into Horn clauses...
select attacker(bitG(gx_10))/-5000
Completing...
Termination warning: attacker(bitG(elem)) -> attacker(elem)
Selecting 0
200 rules inserted. Base: 191 rules (57 with conclusion selected). Queue: 174 rules.
400 rules inserted. Base: 353 rules (75 with conclusion selected). Queue: 233 rules.
600 rules inserted. Base: 526 rules (91 with conclusion selected). Queue: 278 rules.
800 rules inserted. Base: 714 rules (97 with conclusion selected). Queue: 452 rules.
1000 rules inserted. Base: 810 rules (102 with conclusion selected). Queue: 524 rules.
1200 rules inserted. Base: 940 rules (102 with conclusion selected). Queue: 542 rules.
1400 rules inserted. Base: 1049 rules (109 with conclusion selected). Queue: 592 rules.
1600 rules inserted. Base: 1175 rules (109 with conclusion selected). Queue: 549 rules.
1800 rules inserted. Base: 1265 rules (110 with conclusion selected). Queue: 518 rules.
2000 rules inserted. Base: 1394 rules (114 with conclusion selected). Queue: 499 rules.
2200 rules inserted. Base: 1507 rules (116 with conclusion selected). Queue: 431 rules.
2400 rules inserted. Base: 1551 rules (121 with conclusion selected). Queue: 447 rules.
2600 rules inserted. Base: 1618 rules (124 with conclusion selected). Queue: 367 rules.
2800 rules inserted. Base: 1692 rules (130 with conclusion selected). Queue: 383 rules.
3000 rules inserted. Base: 1726 rules (137 with conclusion selected). Queue: 365 rules.
3200 rules inserted. Base: 1739 rules (147 with conclusion selected). Queue: 363 rules.
3400 rules inserted. Base: 1794 rules (151 with conclusion selected). Queue: 289 rules.
3600 rules inserted. Base: 1845 rules (151 with conclusion selected). Queue: 215 rules.
3800 rules inserted. Base: 1950 rules (151 with conclusion selected). Queue: 111 rules.
select attacker(bitG(g(x_6)))/-5000
4000 rules inserted. Base: 2049 rules (171 with conclusion selected). Queue: 195 rules.
4200 rules inserted. Base: 2194 rules (184 with conclusion selected). Queue: 336 rules.
4400 rules inserted. Base: 2325 rules (192 with conclusion selected). Queue: 451 rules.
4600 rules inserted. Base: 2419 rules (192 with conclusion selected). Queue: 433 rules.
4800 rules inserted. Base: 2502 rules (198 with conclusion selected). Queue: 504 rules.
5000 rules inserted. Base: 2625 rules (198 with conclusion selected). Queue: 535 rules.
5200 rules inserted. Base: 2708 rules (201 with conclusion selected). Queue: 588 rules.
5400 rules inserted. Base: 2802 rules (202 with conclusion selected). Queue: 628 rules.
5600 rules inserted. Base: 2901 rules (202 with conclusion selected). Queue: 658 rules.
5800 rules inserted. Base: 2989 rules (206 with conclusion selected). Queue: 715 rules.
6000 rules inserted. Base: 3058 rules (206 with conclusion selected). Queue: 716 rules.
6200 rules inserted. Base: 3180 rules (206 with conclusion selected). Queue: 709 rules.
6400 rules inserted. Base: 3260 rules (206 with conclusion selected). Queue: 731 rules.
6600 rules inserted. Base: 3304 rules (212 with conclusion selected). Queue: 760 rules.
6800 rules inserted. Base: 3390 rules (212 with conclusion selected). Queue: 777 rules.
7000 rules inserted. Base: 3455 rules (212 with conclusion selected). Queue: 765 rules.
7200 rules inserted. Base: 3508 rules (215 with conclusion selected). Queue: 824 rules.
7400 rules inserted. Base: 3566 rules (215 with conclusion selected). Queue: 751 rules.
7600 rules inserted. Base: 3628 rules (215 with conclusion selected). Queue: 744 rules.
7800 rules inserted. Base: 3684 rules (215 with conclusion selected). Queue: 710 rules.
8000 rules inserted. Base: 3708 rules (215 with conclusion selected). Queue: 703 rules.
8200 rules inserted. Base: 3773 rules (219 with conclusion selected). Queue: 616 rules.
8400 rules inserted. Base: 3797 rules (219 with conclusion selected). Queue: 570 rules.
8600 rules inserted. Base: 3844 rules (219 with conclusion selected). Queue: 532 rules.
8800 rules inserted. Base: 3819 rules (223 with conclusion selected). Queue: 498 rules.
9000 rules inserted. Base: 3827 rules (223 with conclusion selected). Queue: 423 rules.
9200 rules inserted. Base: 3879 rules (224 with conclusion selected). Queue: 362 rules.
9400 rules inserted. Base: 3831 rules (224 with conclusion selected). Queue: 287 rules.
9600 rules inserted. Base: 3867 rules (236 with conclusion selected). Queue: 206 rules.
9800 rules inserted. Base: 3850 rules (254 with conclusion selected). Queue: 174 rules.
10000 rules inserted. Base: 3823 rules (272 with conclusion selected). Queue: 182 rules.
10200 rules inserted. Base: 3854 rules (290 with conclusion selected). Queue: 151 rules.
10400 rules inserted. Base: 3942 rules (306 with conclusion selected). Queue: 279 rules.
10600 rules inserted. Base: 4034 rules (318 with conclusion selected). Queue: 229 rules.
10800 rules inserted. Base: 4088 rules (326 with conclusion selected). Queue: 244 rules.
11000 rules inserted. Base: 4209 rules (328 with conclusion selected). Queue: 268 rules.
11200 rules inserted. Base: 4302 rules (334 with conclusion selected). Queue: 385 rules.
11400 rules inserted. Base: 4425 rules (338 with conclusion selected). Queue: 370 rules.
11600 rules inserted. Base: 4502 rules (342 with conclusion selected). Queue: 366 rules.
11800 rules inserted. Base: 4620 rules (352 with conclusion selected). Queue: 542 rules.
12000 rules inserted. Base: 4671 rules (352 with conclusion selected). Queue: 523 rules.
12200 rules inserted. Base: 4761 rules (354 with conclusion selected). Queue: 556 rules.
12400 rules inserted. Base: 4801 rules (356 with conclusion selected). Queue: 554 rules.
12600 rules inserted. Base: 4847 rules (358 with conclusion selected). Queue: 539 rules.
12800 rules inserted. Base: 4932 rules (358 with conclusion selected). Queue: 523 rules.
13000 rules inserted. Base: 5048 rules (358 with conclusion selected). Queue: 475 rules.
13200 rules inserted. Base: 5161 rules (358 with conclusion selected). Queue: 358 rules.
13400 rules inserted. Base: 5236 rules (358 with conclusion selected). Queue: 280 rules.
13600 rules inserted. Base: 5320 rules (358 with conclusion selected). Queue: 156 rules.
13800 rules inserted. Base: 5445 rules (362 with conclusion selected). Queue: 20 rules.
Starting query not attacker(check_reach_user[])
goal reachable: attacker(check_reach_user[])

Derivation:
Abbreviations:
x_6 = x[e_1 = i[],!1 = @sid]
y_4 = y[m_1 = (tag1,bitG(g(x_6))),e = u[],!1 = @sid_1]

1. The message i[] may be sent to the attacker at output {4}.
attacker(i[]).

2. The message u[] may be sent to the attacker at output {5}.
attacker(u[]).

3. The message i[] that the attacker may have by 1 may be received at input {94}.
So the message (tag1,bitG(g(x_6))) may be sent to the attacker at output {100}.
attacker((tag1,bitG(g(x_6)))).

4. By 3, the attacker may know (tag1,bitG(g(x_6))).
Using the function 2-proj-2-tuple the attacker may obtain bitG(g(x_6)).
attacker(bitG(g(x_6))).

5. Using the function tag1 the attacker may obtain tag1.
attacker(tag1).

6. By 5, the attacker may know tag1.
By 4, the attacker may know bitG(g(x_6)).
Using the function 2-tuple the attacker may obtain (tag1,bitG(g(x_6))).
attacker((tag1,bitG(g(x_6)))).

7. The message u[] that the attacker may have by 2 may be received at input {22}.
The message (tag1,bitG(g(x_6))) that the attacker may have by 6 may be received at input {25}.
So the message (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4)))) may be sent to the attacker at output {33}.
attacker((bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4))))).

8. By 7, the attacker may know (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4)))).
Using the function 2-proj-2-tuple the attacker may obtain enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4))).
attacker(enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4)))).

9. By 7, the attacker may know (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4)))).
Using the function 1-proj-2-tuple the attacker may obtain bitG(g(y_4)).
attacker(bitG(g(y_4))).

10. By 9, the attacker may know bitG(g(y_4)).
By 8, the attacker may know enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4))).
Using the function 2-tuple the attacker may obtain (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4)))).
attacker((bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4))))).

11. The message i[] that the attacker may have by 1 may be received at input {94}.
The message (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4)))) that the attacker may have by 10 may be received at input {101}.
So the message enc((tag3,sign((g(x_6),g(y_4)),sku[])),GtoSymK(exp(g(x_6),y_4))) may be sent to the attacker at output {109}.
attacker(enc((tag3,sign((g(x_6),g(y_4)),sku[])),GtoSymK(exp(g(x_6),y_4)))).

12. The message i[] that the attacker may have by 1 may be received at input {94}.
The message (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4)))) that the attacker may have by 10 may be received at input {101}.
So the message enc((tag4,u[],attr,password[]),GtoSymK(exp(g(x_6),y_4))) may be sent to the attacker at output {112}.
attacker(enc((tag4,u[],attr,password[]),GtoSymK(exp(g(x_6),y_4)))).

13. The message u[] that the attacker may have by 2 may be received at input {22}.
The message (tag1,bitG(g(x_6))) that the attacker may have by 6 may be received at input {25}.
The message enc((tag3,sign((g(x_6),g(y_4)),sku[])),GtoSymK(exp(g(x_6),y_4))) that the attacker may have by 11 may be received at input {34}.
The message enc((tag4,u[],attr,password[]),GtoSymK(exp(g(x_6),y_4))) that the attacker may have by 12 may be received at input {38}.
So the message enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(x_6),y_4))) may be sent to the attacker at output {48}.
attacker(enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(x_6),y_4)))).

14. The message i[] that the attacker may have by 1 may be received at input {94}.
The message (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4)))) that the attacker may have by 10 may be received at input {101}.
The message enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(x_6),y_4))) that the attacker may have by 13 may be received at input {113}.
So the message check_reach_user[] may be sent to the attacker at output {205}.
attacker(check_reach_user[]).

15. By 14, attacker(check_reach_user[]).
The goal is reached, represented in the following fact:
attacker(check_reach_user[]).


A more detailed output of the traces is available with
  set traceDisplay = long.

new i: bitstring creating i_4 at {1}

new u: bitstring creating u_4 at {2}

new p: bitstring creating p_3 at {3}

out(c, ~M) with ~M = i_4 at {4}

out(c, ~M_1) with ~M_1 = u_4 at {5}

out(c, ~M_2) with ~M_2 = p_3 at {6}

new ski: SecretKey creating ski_2 at {7}

new sku: SecretKey creating sku_2 at {8}

new skp: SecretKey creating skp_2 at {9}

out(c, ~M_3) with ~M_3 = pk(ski_2) at {10}

out(c, ~M_4) with ~M_4 = pk(sku_2) at {11}

out(c, ~M_5) with ~M_5 = pk(skp_2) at {12}

new password: bitstring creating password_3 at {13}

in(c, ~M_1) with ~M_1 = u_4 at {22} in copy a

in(c, ~M) with ~M = i_4 at {94} in copy a_1

new x: exponent creating x_6 at {97} in copy a_1

out(c, (~M_6,~M_7)) with ~M_6 = tag1, ~M_7 = bitG(g(x_6)) at {100} in copy a_1

in(c, (tag1,~M_7)) with ~M_7 = bitG(g(x_6)) at {25} in copy a

new y: exponent creating y_4 at {29} in copy a

out(c, (~M_8,~M_9)) with ~M_8 = bitG(g(y_4)), ~M_9 = enc((tag2,sign((g(y_4),g(x_6)),ski_2)),GtoSymK(exp(g(x_6),y_4))) at {33} in copy a

in(c, (~M_8,~M_9)) with ~M_8 = bitG(g(y_4)), ~M_9 = enc((tag2,sign((g(y_4),g(x_6)),ski_2)),GtoSymK(exp(g(x_6),y_4))) at {101} in copy a_1

out(c, ~M_10) with ~M_10 = enc((tag3,sign((g(x_6),g(y_4)),sku_2)),GtoSymK(exp(g(y_4),x_6))) at {109} in copy a_1

event userSendsLastMessageToIssuer((tag1,bitG(g(x_6))),(bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski_2)),GtoSymK(exp(g(x_6),y_4)))),enc((tag3,sign((g(x_6),g(y_4)),sku_2)),GtoSymK(exp(g(y_4),x_6))),enc((tag4,u_4,attr,password_3),GtoSymK(exp(g(y_4),x_6)))) at {111} in copy a_1

out(c, ~M_11) with ~M_11 = enc((tag4,u_4,attr,password_3),GtoSymK(exp(g(y_4),x_6))) at {112} in copy a_1

in(c, ~M_10) with ~M_10 = enc((tag3,sign((g(x_6),g(y_4)),sku_2)),GtoSymK(exp(g(x_6),y_4))) at {34} in copy a

in(c, ~M_11) with ~M_11 = enc((tag4,u_4,attr,password_3),GtoSymK(exp(g(x_6),y_4))) at {38} in copy a

event issuerSendsLastMessageToUser((tag1,bitG(g(x_6))),(bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski_2)),GtoSymK(exp(g(x_6),y_4)))),enc((tag3,sign((g(x_6),g(y_4)),sku_2)),GtoSymK(exp(g(x_6),y_4))),enc((tag4,u_4,attr,password_3),GtoSymK(exp(g(x_6),y_4))),enc((tag5,sign((((u_4,i_4,attr),sign((u_4,i_4,attr),ski_2)),u_4),ski_2)),GtoSymK(exp(g(x_6),y_4)))) at {47} in copy a

out(c, ~M_12) with ~M_12 = enc((tag5,sign((((u_4,i_4,attr),sign((u_4,i_4,attr),ski_2)),u_4),ski_2)),GtoSymK(exp(g(x_6),y_4))) at {48} in copy a

out(c, ~M_13) with ~M_13 = check_reach_issuer at {50} in copy a

event issuerCompletesProtocol((tag1,bitG(g(x_6))),(bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski_2)),GtoSymK(exp(g(x_6),y_4)))),enc((tag3,sign((g(x_6),g(y_4)),sku_2)),GtoSymK(exp(g(x_6),y_4))),enc((tag4,u_4,attr,password_3),GtoSymK(exp(g(x_6),y_4)))) at {51} in copy a

in(c, ~M_12) with ~M_12 = enc((tag5,sign((((u_4,i_4,attr),sign((u_4,i_4,attr),ski_2)),u_4),ski_2)),GtoSymK(exp(g(x_6),y_4))) at {113} in copy a_1

out(c, ~M_14) with ~M_14 = check_reach_user at {205} in copy a_1

event userCompletesProtocol((tag1,bitG(g(x_6))),(bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski_2)),GtoSymK(exp(g(x_6),y_4)))),enc((tag3,sign((g(x_6),g(y_4)),sku_2)),GtoSymK(exp(g(y_4),x_6))),enc((tag4,u_4,attr,password_3),GtoSymK(exp(g(y_4),x_6))),enc((tag5,sign((((u_4,i_4,attr),sign((u_4,i_4,attr),ski_2)),u_4),ski_2)),GtoSymK(exp(g(x_6),y_4)))) at {206} in copy a_1

The attacker has the message ~M_14 = check_reach_user.
A trace has been found.
RESULT not attacker(check_reach_user[]) is false.
-- Query not attacker(check_reach_user_to_pod[]) in process 1.
Translating the process into Horn clauses...
select attacker(bitG(gx_10))/-5000
Completing...
Termination warning: attacker(bitG(elem)) -> attacker(elem)
Selecting 0
200 rules inserted. Base: 191 rules (57 with conclusion selected). Queue: 174 rules.
400 rules inserted. Base: 353 rules (75 with conclusion selected). Queue: 233 rules.
600 rules inserted. Base: 526 rules (91 with conclusion selected). Queue: 278 rules.
800 rules inserted. Base: 714 rules (97 with conclusion selected). Queue: 452 rules.
1000 rules inserted. Base: 810 rules (102 with conclusion selected). Queue: 524 rules.
1200 rules inserted. Base: 940 rules (102 with conclusion selected). Queue: 542 rules.
1400 rules inserted. Base: 1049 rules (109 with conclusion selected). Queue: 592 rules.
1600 rules inserted. Base: 1175 rules (109 with conclusion selected). Queue: 549 rules.
1800 rules inserted. Base: 1265 rules (110 with conclusion selected). Queue: 518 rules.
2000 rules inserted. Base: 1394 rules (114 with conclusion selected). Queue: 499 rules.
2200 rules inserted. Base: 1507 rules (116 with conclusion selected). Queue: 431 rules.
2400 rules inserted. Base: 1551 rules (121 with conclusion selected). Queue: 447 rules.
2600 rules inserted. Base: 1618 rules (124 with conclusion selected). Queue: 367 rules.
2800 rules inserted. Base: 1692 rules (130 with conclusion selected). Queue: 383 rules.
3000 rules inserted. Base: 1726 rules (137 with conclusion selected). Queue: 365 rules.
3200 rules inserted. Base: 1739 rules (147 with conclusion selected). Queue: 363 rules.
3400 rules inserted. Base: 1794 rules (151 with conclusion selected). Queue: 289 rules.
3600 rules inserted. Base: 1845 rules (151 with conclusion selected). Queue: 215 rules.
3800 rules inserted. Base: 1950 rules (151 with conclusion selected). Queue: 111 rules.
select attacker(bitG(g(x_6)))/-5000
4000 rules inserted. Base: 2049 rules (171 with conclusion selected). Queue: 195 rules.
4200 rules inserted. Base: 2194 rules (184 with conclusion selected). Queue: 336 rules.
4400 rules inserted. Base: 2325 rules (192 with conclusion selected). Queue: 451 rules.
4600 rules inserted. Base: 2419 rules (192 with conclusion selected). Queue: 433 rules.
4800 rules inserted. Base: 2502 rules (198 with conclusion selected). Queue: 504 rules.
5000 rules inserted. Base: 2625 rules (198 with conclusion selected). Queue: 535 rules.
5200 rules inserted. Base: 2708 rules (201 with conclusion selected). Queue: 588 rules.
5400 rules inserted. Base: 2802 rules (202 with conclusion selected). Queue: 628 rules.
5600 rules inserted. Base: 2901 rules (202 with conclusion selected). Queue: 658 rules.
5800 rules inserted. Base: 2989 rules (206 with conclusion selected). Queue: 715 rules.
6000 rules inserted. Base: 3058 rules (206 with conclusion selected). Queue: 716 rules.
6200 rules inserted. Base: 3180 rules (206 with conclusion selected). Queue: 709 rules.
6400 rules inserted. Base: 3260 rules (206 with conclusion selected). Queue: 731 rules.
6600 rules inserted. Base: 3304 rules (212 with conclusion selected). Queue: 760 rules.
6800 rules inserted. Base: 3390 rules (212 with conclusion selected). Queue: 777 rules.
7000 rules inserted. Base: 3455 rules (212 with conclusion selected). Queue: 765 rules.
7200 rules inserted. Base: 3508 rules (215 with conclusion selected). Queue: 824 rules.
7400 rules inserted. Base: 3566 rules (215 with conclusion selected). Queue: 751 rules.
7600 rules inserted. Base: 3628 rules (215 with conclusion selected). Queue: 744 rules.
7800 rules inserted. Base: 3684 rules (215 with conclusion selected). Queue: 710 rules.
8000 rules inserted. Base: 3708 rules (215 with conclusion selected). Queue: 703 rules.
8200 rules inserted. Base: 3773 rules (219 with conclusion selected). Queue: 616 rules.
8400 rules inserted. Base: 3797 rules (219 with conclusion selected). Queue: 570 rules.
8600 rules inserted. Base: 3844 rules (219 with conclusion selected). Queue: 532 rules.
8800 rules inserted. Base: 3819 rules (223 with conclusion selected). Queue: 498 rules.
9000 rules inserted. Base: 3827 rules (223 with conclusion selected). Queue: 423 rules.
9200 rules inserted. Base: 3879 rules (224 with conclusion selected). Queue: 362 rules.
9400 rules inserted. Base: 3831 rules (224 with conclusion selected). Queue: 287 rules.
9600 rules inserted. Base: 3867 rules (236 with conclusion selected). Queue: 206 rules.
9800 rules inserted. Base: 3850 rules (254 with conclusion selected). Queue: 174 rules.
10000 rules inserted. Base: 3823 rules (272 with conclusion selected). Queue: 182 rules.
10200 rules inserted. Base: 3854 rules (290 with conclusion selected). Queue: 151 rules.
10400 rules inserted. Base: 3942 rules (306 with conclusion selected). Queue: 279 rules.
10600 rules inserted. Base: 4034 rules (318 with conclusion selected). Queue: 229 rules.
10800 rules inserted. Base: 4088 rules (326 with conclusion selected). Queue: 244 rules.
11000 rules inserted. Base: 4209 rules (328 with conclusion selected). Queue: 268 rules.
11200 rules inserted. Base: 4302 rules (334 with conclusion selected). Queue: 385 rules.
11400 rules inserted. Base: 4425 rules (338 with conclusion selected). Queue: 370 rules.
11600 rules inserted. Base: 4502 rules (342 with conclusion selected). Queue: 366 rules.
11800 rules inserted. Base: 4620 rules (352 with conclusion selected). Queue: 542 rules.
12000 rules inserted. Base: 4671 rules (352 with conclusion selected). Queue: 523 rules.
12200 rules inserted. Base: 4761 rules (354 with conclusion selected). Queue: 556 rules.
12400 rules inserted. Base: 4801 rules (356 with conclusion selected). Queue: 554 rules.
12600 rules inserted. Base: 4847 rules (358 with conclusion selected). Queue: 539 rules.
12800 rules inserted. Base: 4932 rules (358 with conclusion selected). Queue: 523 rules.
13000 rules inserted. Base: 5048 rules (358 with conclusion selected). Queue: 475 rules.
13200 rules inserted. Base: 5161 rules (358 with conclusion selected). Queue: 358 rules.
13400 rules inserted. Base: 5236 rules (358 with conclusion selected). Queue: 280 rules.
13600 rules inserted. Base: 5320 rules (358 with conclusion selected). Queue: 156 rules.
13800 rules inserted. Base: 5445 rules (362 with conclusion selected). Queue: 20 rules.
Starting query not attacker(check_reach_user_to_pod[])
goal reachable: attacker(check_reach_user_to_pod[])

Derivation:
Abbreviations:
x_6 = x[e_1 = i[],!1 = @sid]
y_4 = y[m_1 = (tag1,bitG(g(x_6))),e = u[],!1 = @sid_1]
x_7 = x_1[e_2 = p[],!2 = @sid_2,m_14 = enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(x_6),y_4))),m_11 = (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4)))),e_1 = i[],!1 = @sid]
y_5 = y_2[m_48 = (tag6,bitG(g(x_7))),e_4 = u[],!1 = @sid_3]
nc_6 = nc_4[m_51 = enc((tag9,uri),GtoSymK(exp(g(x_7),y_5))),m_50 = enc((tag8,sign((g(x_7),g(y_5)),sku[])),GtoSymK(exp(g(x_7),y_5))),m_48 = (tag6,bitG(g(x_7))),e_4 = u[],!1 = @sid_3]
accesstoken_6 = accesstoken_4[m_53 = enc((tag11,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),scope,solid),sku[]),nc_6),GtoSymK(exp(g(x_7),y_5))),m_51 = enc((tag9,uri),GtoSymK(exp(g(x_7),y_5))),m_50 = enc((tag8,sign((g(x_7),g(y_5)),sku[])),GtoSymK(exp(g(x_7),y_5))),m_48 = (tag6,bitG(g(x_7))),e_4 = u[],!1 = @sid_3]

1. The message i[] may be sent to the attacker at output {4}.
attacker(i[]).

2. The message u[] may be sent to the attacker at output {5}.
attacker(u[]).

3. The message i[] that the attacker may have by 1 may be received at input {94}.
So the message (tag1,bitG(g(x_6))) may be sent to the attacker at output {100}.
attacker((tag1,bitG(g(x_6)))).

4. By 3, the attacker may know (tag1,bitG(g(x_6))).
Using the function 2-proj-2-tuple the attacker may obtain bitG(g(x_6)).
attacker(bitG(g(x_6))).

5. Using the function tag1 the attacker may obtain tag1.
attacker(tag1).

6. By 5, the attacker may know tag1.
By 4, the attacker may know bitG(g(x_6)).
Using the function 2-tuple the attacker may obtain (tag1,bitG(g(x_6))).
attacker((tag1,bitG(g(x_6)))).

7. The message u[] that the attacker may have by 2 may be received at input {22}.
The message (tag1,bitG(g(x_6))) that the attacker may have by 6 may be received at input {25}.
So the message (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4)))) may be sent to the attacker at output {33}.
attacker((bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4))))).

8. By 7, the attacker may know (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4)))).
Using the function 2-proj-2-tuple the attacker may obtain enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4))).
attacker(enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4)))).

9. By 7, the attacker may know (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4)))).
Using the function 1-proj-2-tuple the attacker may obtain bitG(g(y_4)).
attacker(bitG(g(y_4))).

10. By 9, the attacker may know bitG(g(y_4)).
By 8, the attacker may know enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4))).
Using the function 2-tuple the attacker may obtain (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4)))).
attacker((bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4))))).

11. The message i[] that the attacker may have by 1 may be received at input {94}.
The message (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4)))) that the attacker may have by 10 may be received at input {101}.
So the message enc((tag3,sign((g(x_6),g(y_4)),sku[])),GtoSymK(exp(g(x_6),y_4))) may be sent to the attacker at output {109}.
attacker(enc((tag3,sign((g(x_6),g(y_4)),sku[])),GtoSymK(exp(g(x_6),y_4)))).

12. The message i[] that the attacker may have by 1 may be received at input {94}.
The message (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4)))) that the attacker may have by 10 may be received at input {101}.
So the message enc((tag4,u[],attr,password[]),GtoSymK(exp(g(x_6),y_4))) may be sent to the attacker at output {112}.
attacker(enc((tag4,u[],attr,password[]),GtoSymK(exp(g(x_6),y_4)))).

13. The message u[] that the attacker may have by 2 may be received at input {22}.
The message (tag1,bitG(g(x_6))) that the attacker may have by 6 may be received at input {25}.
The message enc((tag3,sign((g(x_6),g(y_4)),sku[])),GtoSymK(exp(g(x_6),y_4))) that the attacker may have by 11 may be received at input {34}.
The message enc((tag4,u[],attr,password[]),GtoSymK(exp(g(x_6),y_4))) that the attacker may have by 12 may be received at input {38}.
So the message enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(x_6),y_4))) may be sent to the attacker at output {48}.
attacker(enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(x_6),y_4)))).

14. The message p[] may be sent to the attacker at output {6}.
attacker(p[]).

15. The message i[] that the attacker may have by 1 may be received at input {94}.
The message (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4)))) that the attacker may have by 10 may be received at input {101}.
The message enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(x_6),y_4))) that the attacker may have by 13 may be received at input {113}.
The message p[] that the attacker may have by 14 may be received at input {125}.
So the message (tag6,bitG(g(x_7))) may be sent to the attacker at output {131}.
attacker((tag6,bitG(g(x_7)))).

16. By 15, the attacker may know (tag6,bitG(g(x_7))).
Using the function 2-proj-2-tuple the attacker may obtain bitG(g(x_7)).
attacker(bitG(g(x_7))).

17. Using the function tag6 the attacker may obtain tag6.
attacker(tag6).

18. By 17, the attacker may know tag6.
By 16, the attacker may know bitG(g(x_7)).
Using the function 2-tuple the attacker may obtain (tag6,bitG(g(x_7))).
attacker((tag6,bitG(g(x_7)))).

19. The message u[] that the attacker may have by 2 may be received at input {330}.
The message (tag6,bitG(g(x_7))) that the attacker may have by 18 may be received at input {333}.
So the message (bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp[])),GtoSymK(exp(g(x_7),y_5)))) may be sent to the attacker at output {341}.
attacker((bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp[])),GtoSymK(exp(g(x_7),y_5))))).

20. By 19, the attacker may know (bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp[])),GtoSymK(exp(g(x_7),y_5)))).
Using the function 2-proj-2-tuple the attacker may obtain enc((tag7,sign((g(y_5),g(x_7)),skp[])),GtoSymK(exp(g(x_7),y_5))).
attacker(enc((tag7,sign((g(y_5),g(x_7)),skp[])),GtoSymK(exp(g(x_7),y_5)))).

21. By 19, the attacker may know (bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp[])),GtoSymK(exp(g(x_7),y_5)))).
Using the function 1-proj-2-tuple the attacker may obtain bitG(g(y_5)).
attacker(bitG(g(y_5))).

22. By 21, the attacker may know bitG(g(y_5)).
By 20, the attacker may know enc((tag7,sign((g(y_5),g(x_7)),skp[])),GtoSymK(exp(g(x_7),y_5))).
Using the function 2-tuple the attacker may obtain (bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp[])),GtoSymK(exp(g(x_7),y_5)))).
attacker((bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp[])),GtoSymK(exp(g(x_7),y_5))))).

23. The message i[] that the attacker may have by 1 may be received at input {94}.
The message (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4)))) that the attacker may have by 10 may be received at input {101}.
The message enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(x_6),y_4))) that the attacker may have by 13 may be received at input {113}.
The message p[] that the attacker may have by 14 may be received at input {125}.
The message (bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp[])),GtoSymK(exp(g(x_7),y_5)))) that the attacker may have by 22 may be received at input {132}.
So the message enc((tag8,sign((g(x_7),g(y_5)),sku[])),GtoSymK(exp(g(x_7),y_5))) may be sent to the attacker at output {140}.
attacker(enc((tag8,sign((g(x_7),g(y_5)),sku[])),GtoSymK(exp(g(x_7),y_5)))).

24. The message i[] that the attacker may have by 1 may be received at input {94}.
The message (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4)))) that the attacker may have by 10 may be received at input {101}.
The message enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(x_6),y_4))) that the attacker may have by 13 may be received at input {113}.
The message p[] that the attacker may have by 14 may be received at input {125}.
The message (bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp[])),GtoSymK(exp(g(x_7),y_5)))) that the attacker may have by 22 may be received at input {132}.
So the message enc((tag9,uri),GtoSymK(exp(g(x_7),y_5))) may be sent to the attacker at output {142}.
attacker(enc((tag9,uri),GtoSymK(exp(g(x_7),y_5)))).

25. The message u[] that the attacker may have by 2 may be received at input {330}.
The message (tag6,bitG(g(x_7))) that the attacker may have by 18 may be received at input {333}.
The message enc((tag8,sign((g(x_7),g(y_5)),sku[])),GtoSymK(exp(g(x_7),y_5))) that the attacker may have by 23 may be received at input {342}.
The message enc((tag9,uri),GtoSymK(exp(g(x_7),y_5))) that the attacker may have by 24 may be received at input {346}.
So the message enc((tag10,(u[],i[],attr),nc_6),GtoSymK(exp(g(x_7),y_5))) may be sent to the attacker at output {353}.
attacker(enc((tag10,(u[],i[],attr),nc_6),GtoSymK(exp(g(x_7),y_5)))).

26. The message i[] that the attacker may have by 1 may be received at input {94}.
The message (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4)))) that the attacker may have by 10 may be received at input {101}.
The message enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(x_6),y_4))) that the attacker may have by 13 may be received at input {113}.
The message p[] that the attacker may have by 14 may be received at input {125}.
The message (bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp[])),GtoSymK(exp(g(x_7),y_5)))) that the attacker may have by 22 may be received at input {132}.
The message enc((tag10,(u[],i[],attr),nc_6),GtoSymK(exp(g(x_7),y_5))) that the attacker may have by 25 may be received at input {143}.
So the message enc((tag11,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),scope,solid),sku[]),nc_6),GtoSymK(exp(g(x_7),y_5))) may be sent to the attacker at output {156}.
attacker(enc((tag11,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),scope,solid),sku[]),nc_6),GtoSymK(exp(g(x_7),y_5)))).

27. The message u[] that the attacker may have by 2 may be received at input {330}.
The message (tag6,bitG(g(x_7))) that the attacker may have by 18 may be received at input {333}.
The message enc((tag8,sign((g(x_7),g(y_5)),sku[])),GtoSymK(exp(g(x_7),y_5))) that the attacker may have by 23 may be received at input {342}.
The message enc((tag9,uri),GtoSymK(exp(g(x_7),y_5))) that the attacker may have by 24 may be received at input {346}.
The message enc((tag11,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),scope,solid),sku[]),nc_6),GtoSymK(exp(g(x_7),y_5))) that the attacker may have by 26 may be received at input {354}.
So the message enc((tag12,sign(accesstoken_6,skp[])),GtoSymK(exp(g(x_7),y_5))) may be sent to the attacker at output {369}.
attacker(enc((tag12,sign(accesstoken_6,skp[])),GtoSymK(exp(g(x_7),y_5)))).

28. The message i[] that the attacker may have by 1 may be received at input {94}.
The message (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4)))) that the attacker may have by 10 may be received at input {101}.
The message enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(x_6),y_4))) that the attacker may have by 13 may be received at input {113}.
The message p[] that the attacker may have by 14 may be received at input {125}.
The message (bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp[])),GtoSymK(exp(g(x_7),y_5)))) that the attacker may have by 22 may be received at input {132}.
The message enc((tag10,(u[],i[],attr),nc_6),GtoSymK(exp(g(x_7),y_5))) that the attacker may have by 25 may be received at input {143}.
The message enc((tag12,sign(accesstoken_6,skp[])),GtoSymK(exp(g(x_7),y_5))) that the attacker may have by 27 may be received at input {157}.
So the message check_reach_user_to_pod[] may be sent to the attacker at output {162}.
attacker(check_reach_user_to_pod[]).

29. By 28, attacker(check_reach_user_to_pod[]).
The goal is reached, represented in the following fact:
attacker(check_reach_user_to_pod[]).


A more detailed output of the traces is available with
  set traceDisplay = long.

new i: bitstring creating i_4 at {1}

new u: bitstring creating u_4 at {2}

new p: bitstring creating p_3 at {3}

out(c, ~M) with ~M = i_4 at {4}

out(c, ~M_1) with ~M_1 = u_4 at {5}

out(c, ~M_2) with ~M_2 = p_3 at {6}

new ski: SecretKey creating ski_2 at {7}

new sku: SecretKey creating sku_2 at {8}

new skp: SecretKey creating skp_2 at {9}

out(c, ~M_3) with ~M_3 = pk(ski_2) at {10}

out(c, ~M_4) with ~M_4 = pk(sku_2) at {11}

out(c, ~M_5) with ~M_5 = pk(skp_2) at {12}

new password: bitstring creating password_3 at {13}

in(c, ~M_1) with ~M_1 = u_4 at {22} in copy a

in(c, ~M) with ~M = i_4 at {94} in copy a_1

new x: exponent creating x_6 at {97} in copy a_1

out(c, (~M_6,~M_7)) with ~M_6 = tag1, ~M_7 = bitG(g(x_6)) at {100} in copy a_1

in(c, (tag1,~M_7)) with ~M_7 = bitG(g(x_6)) at {25} in copy a

new y: exponent creating y_4 at {29} in copy a

out(c, (~M_8,~M_9)) with ~M_8 = bitG(g(y_4)), ~M_9 = enc((tag2,sign((g(y_4),g(x_6)),ski_2)),GtoSymK(exp(g(x_6),y_4))) at {33} in copy a

in(c, (~M_8,~M_9)) with ~M_8 = bitG(g(y_4)), ~M_9 = enc((tag2,sign((g(y_4),g(x_6)),ski_2)),GtoSymK(exp(g(x_6),y_4))) at {101} in copy a_1

out(c, ~M_10) with ~M_10 = enc((tag3,sign((g(x_6),g(y_4)),sku_2)),GtoSymK(exp(g(y_4),x_6))) at {109} in copy a_1

event userSendsLastMessageToIssuer((tag1,bitG(g(x_6))),(bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski_2)),GtoSymK(exp(g(x_6),y_4)))),enc((tag3,sign((g(x_6),g(y_4)),sku_2)),GtoSymK(exp(g(y_4),x_6))),enc((tag4,u_4,attr,password_3),GtoSymK(exp(g(y_4),x_6)))) at {111} in copy a_1

out(c, ~M_11) with ~M_11 = enc((tag4,u_4,attr,password_3),GtoSymK(exp(g(y_4),x_6))) at {112} in copy a_1

in(c, ~M_10) with ~M_10 = enc((tag3,sign((g(x_6),g(y_4)),sku_2)),GtoSymK(exp(g(x_6),y_4))) at {34} in copy a

in(c, ~M_11) with ~M_11 = enc((tag4,u_4,attr,password_3),GtoSymK(exp(g(x_6),y_4))) at {38} in copy a

event issuerSendsLastMessageToUser((tag1,bitG(g(x_6))),(bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski_2)),GtoSymK(exp(g(x_6),y_4)))),enc((tag3,sign((g(x_6),g(y_4)),sku_2)),GtoSymK(exp(g(x_6),y_4))),enc((tag4,u_4,attr,password_3),GtoSymK(exp(g(x_6),y_4))),enc((tag5,sign((((u_4,i_4,attr),sign((u_4,i_4,attr),ski_2)),u_4),ski_2)),GtoSymK(exp(g(x_6),y_4)))) at {47} in copy a

out(c, ~M_12) with ~M_12 = enc((tag5,sign((((u_4,i_4,attr),sign((u_4,i_4,attr),ski_2)),u_4),ski_2)),GtoSymK(exp(g(x_6),y_4))) at {48} in copy a

out(c, ~M_13) with ~M_13 = check_reach_issuer at {50} in copy a

event issuerCompletesProtocol((tag1,bitG(g(x_6))),(bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski_2)),GtoSymK(exp(g(x_6),y_4)))),enc((tag3,sign((g(x_6),g(y_4)),sku_2)),GtoSymK(exp(g(x_6),y_4))),enc((tag4,u_4,attr,password_3),GtoSymK(exp(g(x_6),y_4)))) at {51} in copy a

in(c, ~M_12) with ~M_12 = enc((tag5,sign((((u_4,i_4,attr),sign((u_4,i_4,attr),ski_2)),u_4),ski_2)),GtoSymK(exp(g(x_6),y_4))) at {113} in copy a_1

out(c, ~M_14) with ~M_14 = check_reach_user at {205} in copy a_1

event userCompletesProtocol((tag1,bitG(g(x_6))),(bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski_2)),GtoSymK(exp(g(x_6),y_4)))),enc((tag3,sign((g(x_6),g(y_4)),sku_2)),GtoSymK(exp(g(y_4),x_6))),enc((tag4,u_4,attr,password_3),GtoSymK(exp(g(y_4),x_6))),enc((tag5,sign((((u_4,i_4,attr),sign((u_4,i_4,attr),ski_2)),u_4),ski_2)),GtoSymK(exp(g(x_6),y_4)))) at {206} in copy a_1

in(c, ~M_2) with ~M_2 = p_3 at {125} in copy a_1, a_2

new x_1: exponent creating x_7 at {128} in copy a_1, a_2

out(c, (~M_15,~M_16)) with ~M_15 = tag6, ~M_16 = bitG(g(x_7)) at {131} in copy a_1, a_2

in(c, ~M_1) with ~M_1 = u_4 at {330} in copy a_3

in(c, (tag6,~M_16)) with ~M_16 = bitG(g(x_7)) at {333} in copy a_3

new y_2: exponent creating y_5 at {337} in copy a_3

out(c, (~M_17,~M_18)) with ~M_17 = bitG(g(y_5)), ~M_18 = enc((tag7,sign((g(y_5),g(x_7)),skp_2)),GtoSymK(exp(g(x_7),y_5))) at {341} in copy a_3

in(c, (~M_17,~M_18)) with ~M_17 = bitG(g(y_5)), ~M_18 = enc((tag7,sign((g(y_5),g(x_7)),skp_2)),GtoSymK(exp(g(x_7),y_5))) at {132} in copy a_1, a_2

out(c, ~M_19) with ~M_19 = enc((tag8,sign((g(x_7),g(y_5)),sku_2)),GtoSymK(exp(g(y_5),x_7))) at {140} in copy a_1, a_2

out(c, ~M_20) with ~M_20 = enc((tag9,uri),GtoSymK(exp(g(y_5),x_7))) at {142} in copy a_1, a_2

in(c, ~M_19) with ~M_19 = enc((tag8,sign((g(x_7),g(y_5)),sku_2)),GtoSymK(exp(g(x_7),y_5))) at {342} in copy a_3

in(c, ~M_20) with ~M_20 = enc((tag9,uri),GtoSymK(exp(g(x_7),y_5))) at {346} in copy a_3

new nc_4: bitstring creating nc_6 at {350} in copy a_3

out(c, ~M_21) with ~M_21 = enc((tag10,(u_4,i_4,attr),nc_6),GtoSymK(exp(g(x_7),y_5))) at {353} in copy a_3

in(c, ~M_21) with ~M_21 = enc((tag10,(u_4,i_4,attr),nc_6),GtoSymK(exp(g(x_7),y_5))) at {143} in copy a_1, a_2

event userSendsLastMessageToPod((tag6,bitG(g(x_7))),(bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp_2)),GtoSymK(exp(g(x_7),y_5)))),enc((tag8,sign((g(x_7),g(y_5)),sku_2)),GtoSymK(exp(g(y_5),x_7))),enc((tag9,uri),GtoSymK(exp(g(y_5),x_7))),enc((tag10,(u_4,i_4,attr),nc_6),GtoSymK(exp(g(x_7),y_5))),enc((tag11,sign((((u_4,i_4,attr),sign((u_4,i_4,attr),ski_2)),scope,solid),sku_2),nc_6),GtoSymK(exp(g(y_5),x_7)))) at {155} in copy a_1, a_2

out(c, ~M_22) with ~M_22 = enc((tag11,sign((((u_4,i_4,attr),sign((u_4,i_4,attr),ski_2)),scope,solid),sku_2),nc_6),GtoSymK(exp(g(y_5),x_7))) at {156} in copy a_1, a_2

in(c, ~M_22) with ~M_22 = enc((tag11,sign((((u_4,i_4,attr),sign((u_4,i_4,attr),ski_2)),scope,solid),sku_2),nc_6),GtoSymK(exp(g(x_7),y_5))) at {354} in copy a_3

new accesstoken_4: bitstring creating accesstoken_6 at {366} in copy a_3

event podSendsLastMessageToUser((tag6,bitG(g(x_7))),(bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp_2)),GtoSymK(exp(g(x_7),y_5)))),enc((tag8,sign((g(x_7),g(y_5)),sku_2)),GtoSymK(exp(g(x_7),y_5))),enc((tag9,uri),GtoSymK(exp(g(x_7),y_5))),enc((tag10,(u_4,i_4,attr),nc_6),GtoSymK(exp(g(x_7),y_5))),enc((tag11,sign((((u_4,i_4,attr),sign((u_4,i_4,attr),ski_2)),scope,solid),sku_2),nc_6),GtoSymK(exp(g(x_7),y_5))),enc((tag12,sign(accesstoken_6,skp_2)),GtoSymK(exp(g(x_7),y_5)))) at {368} in copy a_3

out(c, ~M_23) with ~M_23 = enc((tag12,sign(accesstoken_6,skp_2)),GtoSymK(exp(g(x_7),y_5))) at {369} in copy a_3

out(c, ~M_24) with ~M_24 = check_reach_pod at {371} in copy a_3

event podCompletesProtocol((tag6,bitG(g(x_7))),(bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp_2)),GtoSymK(exp(g(x_7),y_5)))),enc((tag8,sign((g(x_7),g(y_5)),sku_2)),GtoSymK(exp(g(x_7),y_5))),enc((tag9,uri),GtoSymK(exp(g(x_7),y_5))),enc((tag10,(u_4,i_4,attr),nc_6),GtoSymK(exp(g(x_7),y_5))),enc((tag11,sign((((u_4,i_4,attr),sign((u_4,i_4,attr),ski_2)),scope,solid),sku_2),nc_6),GtoSymK(exp(g(x_7),y_5)))) at {372} in copy a_3

in(c, ~M_23) with ~M_23 = enc((tag12,sign(accesstoken_6,skp_2)),GtoSymK(exp(g(x_7),y_5))) at {157} in copy a_1, a_2

out(c, ~M_25) with ~M_25 = check_reach_user_to_pod at {162} in copy a_1, a_2

event userCompletesProtocolFull((tag1,bitG(g(x_6))),(bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski_2)),GtoSymK(exp(g(x_6),y_4)))),enc((tag3,sign((g(x_6),g(y_4)),sku_2)),GtoSymK(exp(g(y_4),x_6))),enc((tag4,u_4,attr,password_3),GtoSymK(exp(g(y_4),x_6))),enc((tag5,sign((((u_4,i_4,attr),sign((u_4,i_4,attr),ski_2)),u_4),ski_2)),GtoSymK(exp(g(x_6),y_4))),(tag6,bitG(g(x_7))),(bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp_2)),GtoSymK(exp(g(x_7),y_5)))),enc((tag8,sign((g(x_7),g(y_5)),sku_2)),GtoSymK(exp(g(y_5),x_7))),enc((tag9,uri),GtoSymK(exp(g(y_5),x_7))),enc((tag10,(u_4,i_4,attr),nc_6),GtoSymK(exp(g(x_7),y_5))),enc((tag11,sign((((u_4,i_4,attr),sign((u_4,i_4,attr),ski_2)),scope,solid),sku_2),nc_6),GtoSymK(exp(g(y_5),x_7))),enc((tag12,sign(accesstoken_6,skp_2)),GtoSymK(exp(g(x_7),y_5)))) at {163} in copy a_1, a_2

The attacker has the message ~M_25 = check_reach_user_to_pod.
A trace has been found.
RESULT not attacker(check_reach_user_to_pod[]) is false.
-- Query not attacker(check_reach_pod[]) in process 1.
Translating the process into Horn clauses...
select attacker(bitG(gx_10))/-5000
Completing...
Termination warning: attacker(bitG(elem)) -> attacker(elem)
Selecting 0
200 rules inserted. Base: 191 rules (57 with conclusion selected). Queue: 174 rules.
400 rules inserted. Base: 353 rules (75 with conclusion selected). Queue: 233 rules.
600 rules inserted. Base: 526 rules (91 with conclusion selected). Queue: 278 rules.
800 rules inserted. Base: 714 rules (97 with conclusion selected). Queue: 452 rules.
1000 rules inserted. Base: 810 rules (102 with conclusion selected). Queue: 524 rules.
1200 rules inserted. Base: 940 rules (102 with conclusion selected). Queue: 542 rules.
1400 rules inserted. Base: 1049 rules (109 with conclusion selected). Queue: 592 rules.
1600 rules inserted. Base: 1175 rules (109 with conclusion selected). Queue: 549 rules.
1800 rules inserted. Base: 1265 rules (110 with conclusion selected). Queue: 518 rules.
2000 rules inserted. Base: 1394 rules (114 with conclusion selected). Queue: 499 rules.
2200 rules inserted. Base: 1507 rules (116 with conclusion selected). Queue: 431 rules.
2400 rules inserted. Base: 1551 rules (121 with conclusion selected). Queue: 447 rules.
2600 rules inserted. Base: 1618 rules (124 with conclusion selected). Queue: 367 rules.
2800 rules inserted. Base: 1692 rules (130 with conclusion selected). Queue: 383 rules.
3000 rules inserted. Base: 1726 rules (137 with conclusion selected). Queue: 365 rules.
3200 rules inserted. Base: 1739 rules (147 with conclusion selected). Queue: 363 rules.
3400 rules inserted. Base: 1794 rules (151 with conclusion selected). Queue: 289 rules.
3600 rules inserted. Base: 1845 rules (151 with conclusion selected). Queue: 215 rules.
3800 rules inserted. Base: 1950 rules (151 with conclusion selected). Queue: 111 rules.
select attacker(bitG(g(x_6)))/-5000
4000 rules inserted. Base: 2049 rules (171 with conclusion selected). Queue: 195 rules.
4200 rules inserted. Base: 2194 rules (184 with conclusion selected). Queue: 336 rules.
4400 rules inserted. Base: 2325 rules (192 with conclusion selected). Queue: 451 rules.
4600 rules inserted. Base: 2419 rules (192 with conclusion selected). Queue: 433 rules.
4800 rules inserted. Base: 2502 rules (198 with conclusion selected). Queue: 504 rules.
5000 rules inserted. Base: 2625 rules (198 with conclusion selected). Queue: 535 rules.
5200 rules inserted. Base: 2708 rules (201 with conclusion selected). Queue: 588 rules.
5400 rules inserted. Base: 2802 rules (202 with conclusion selected). Queue: 628 rules.
5600 rules inserted. Base: 2901 rules (202 with conclusion selected). Queue: 658 rules.
5800 rules inserted. Base: 2989 rules (206 with conclusion selected). Queue: 715 rules.
6000 rules inserted. Base: 3058 rules (206 with conclusion selected). Queue: 716 rules.
6200 rules inserted. Base: 3180 rules (206 with conclusion selected). Queue: 709 rules.
6400 rules inserted. Base: 3260 rules (206 with conclusion selected). Queue: 731 rules.
6600 rules inserted. Base: 3304 rules (212 with conclusion selected). Queue: 760 rules.
6800 rules inserted. Base: 3390 rules (212 with conclusion selected). Queue: 777 rules.
7000 rules inserted. Base: 3455 rules (212 with conclusion selected). Queue: 765 rules.
7200 rules inserted. Base: 3508 rules (215 with conclusion selected). Queue: 824 rules.
7400 rules inserted. Base: 3566 rules (215 with conclusion selected). Queue: 751 rules.
7600 rules inserted. Base: 3628 rules (215 with conclusion selected). Queue: 744 rules.
7800 rules inserted. Base: 3684 rules (215 with conclusion selected). Queue: 710 rules.
8000 rules inserted. Base: 3708 rules (215 with conclusion selected). Queue: 703 rules.
8200 rules inserted. Base: 3773 rules (219 with conclusion selected). Queue: 616 rules.
8400 rules inserted. Base: 3797 rules (219 with conclusion selected). Queue: 570 rules.
8600 rules inserted. Base: 3844 rules (219 with conclusion selected). Queue: 532 rules.
8800 rules inserted. Base: 3819 rules (223 with conclusion selected). Queue: 498 rules.
9000 rules inserted. Base: 3827 rules (223 with conclusion selected). Queue: 423 rules.
9200 rules inserted. Base: 3879 rules (224 with conclusion selected). Queue: 362 rules.
9400 rules inserted. Base: 3831 rules (224 with conclusion selected). Queue: 287 rules.
9600 rules inserted. Base: 3867 rules (236 with conclusion selected). Queue: 206 rules.
9800 rules inserted. Base: 3850 rules (254 with conclusion selected). Queue: 174 rules.
10000 rules inserted. Base: 3823 rules (272 with conclusion selected). Queue: 182 rules.
10200 rules inserted. Base: 3854 rules (290 with conclusion selected). Queue: 151 rules.
10400 rules inserted. Base: 3942 rules (306 with conclusion selected). Queue: 279 rules.
10600 rules inserted. Base: 4034 rules (318 with conclusion selected). Queue: 229 rules.
10800 rules inserted. Base: 4088 rules (326 with conclusion selected). Queue: 244 rules.
11000 rules inserted. Base: 4209 rules (328 with conclusion selected). Queue: 268 rules.
11200 rules inserted. Base: 4302 rules (334 with conclusion selected). Queue: 385 rules.
11400 rules inserted. Base: 4425 rules (338 with conclusion selected). Queue: 370 rules.
11600 rules inserted. Base: 4502 rules (342 with conclusion selected). Queue: 366 rules.
11800 rules inserted. Base: 4620 rules (352 with conclusion selected). Queue: 542 rules.
12000 rules inserted. Base: 4671 rules (352 with conclusion selected). Queue: 523 rules.
12200 rules inserted. Base: 4761 rules (354 with conclusion selected). Queue: 556 rules.
12400 rules inserted. Base: 4801 rules (356 with conclusion selected). Queue: 554 rules.
12600 rules inserted. Base: 4847 rules (358 with conclusion selected). Queue: 539 rules.
12800 rules inserted. Base: 4932 rules (358 with conclusion selected). Queue: 523 rules.
13000 rules inserted. Base: 5048 rules (358 with conclusion selected). Queue: 475 rules.
13200 rules inserted. Base: 5161 rules (358 with conclusion selected). Queue: 358 rules.
13400 rules inserted. Base: 5236 rules (358 with conclusion selected). Queue: 280 rules.
13600 rules inserted. Base: 5320 rules (358 with conclusion selected). Queue: 156 rules.
13800 rules inserted. Base: 5445 rules (362 with conclusion selected). Queue: 20 rules.
Starting query not attacker(check_reach_pod[])
goal reachable: attacker(check_reach_pod[])

Derivation:
Abbreviations:
x_6 = x[e_1 = i[],!1 = @sid]
y_4 = y[m_1 = (tag1,bitG(g(x_6))),e = u[],!1 = @sid_1]
x_7 = x_1[e_2 = p[],!2 = @sid_2,m_14 = enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(x_6),y_4))),m_11 = (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4)))),e_1 = i[],!1 = @sid]
y_5 = y_2[m_48 = (tag6,bitG(g(x_7))),e_4 = u[],!1 = @sid_3]
nc_6 = nc_4[m_51 = enc((tag9,uri),GtoSymK(exp(g(x_7),y_5))),m_50 = enc((tag8,sign((g(x_7),g(y_5)),sku[])),GtoSymK(exp(g(x_7),y_5))),m_48 = (tag6,bitG(g(x_7))),e_4 = u[],!1 = @sid_3]

1. The message u[] may be sent to the attacker at output {5}.
attacker(u[]).

2. The message i[] may be sent to the attacker at output {4}.
attacker(i[]).

3. The message i[] that the attacker may have by 2 may be received at input {94}.
So the message (tag1,bitG(g(x_6))) may be sent to the attacker at output {100}.
attacker((tag1,bitG(g(x_6)))).

4. By 3, the attacker may know (tag1,bitG(g(x_6))).
Using the function 2-proj-2-tuple the attacker may obtain bitG(g(x_6)).
attacker(bitG(g(x_6))).

5. Using the function tag1 the attacker may obtain tag1.
attacker(tag1).

6. By 5, the attacker may know tag1.
By 4, the attacker may know bitG(g(x_6)).
Using the function 2-tuple the attacker may obtain (tag1,bitG(g(x_6))).
attacker((tag1,bitG(g(x_6)))).

7. The message u[] that the attacker may have by 1 may be received at input {22}.
The message (tag1,bitG(g(x_6))) that the attacker may have by 6 may be received at input {25}.
So the message (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4)))) may be sent to the attacker at output {33}.
attacker((bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4))))).

8. By 7, the attacker may know (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4)))).
Using the function 2-proj-2-tuple the attacker may obtain enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4))).
attacker(enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4)))).

9. By 7, the attacker may know (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4)))).
Using the function 1-proj-2-tuple the attacker may obtain bitG(g(y_4)).
attacker(bitG(g(y_4))).

10. By 9, the attacker may know bitG(g(y_4)).
By 8, the attacker may know enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4))).
Using the function 2-tuple the attacker may obtain (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4)))).
attacker((bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4))))).

11. The message i[] that the attacker may have by 2 may be received at input {94}.
The message (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4)))) that the attacker may have by 10 may be received at input {101}.
So the message enc((tag3,sign((g(x_6),g(y_4)),sku[])),GtoSymK(exp(g(x_6),y_4))) may be sent to the attacker at output {109}.
attacker(enc((tag3,sign((g(x_6),g(y_4)),sku[])),GtoSymK(exp(g(x_6),y_4)))).

12. The message i[] that the attacker may have by 2 may be received at input {94}.
The message (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4)))) that the attacker may have by 10 may be received at input {101}.
So the message enc((tag4,u[],attr,password[]),GtoSymK(exp(g(x_6),y_4))) may be sent to the attacker at output {112}.
attacker(enc((tag4,u[],attr,password[]),GtoSymK(exp(g(x_6),y_4)))).

13. The message u[] that the attacker may have by 1 may be received at input {22}.
The message (tag1,bitG(g(x_6))) that the attacker may have by 6 may be received at input {25}.
The message enc((tag3,sign((g(x_6),g(y_4)),sku[])),GtoSymK(exp(g(x_6),y_4))) that the attacker may have by 11 may be received at input {34}.
The message enc((tag4,u[],attr,password[]),GtoSymK(exp(g(x_6),y_4))) that the attacker may have by 12 may be received at input {38}.
So the message enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(x_6),y_4))) may be sent to the attacker at output {48}.
attacker(enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(x_6),y_4)))).

14. The message p[] may be sent to the attacker at output {6}.
attacker(p[]).

15. The message i[] that the attacker may have by 2 may be received at input {94}.
The message (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4)))) that the attacker may have by 10 may be received at input {101}.
The message enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(x_6),y_4))) that the attacker may have by 13 may be received at input {113}.
The message p[] that the attacker may have by 14 may be received at input {125}.
So the message (tag6,bitG(g(x_7))) may be sent to the attacker at output {131}.
attacker((tag6,bitG(g(x_7)))).

16. By 15, the attacker may know (tag6,bitG(g(x_7))).
Using the function 2-proj-2-tuple the attacker may obtain bitG(g(x_7)).
attacker(bitG(g(x_7))).

17. Using the function tag6 the attacker may obtain tag6.
attacker(tag6).

18. By 17, the attacker may know tag6.
By 16, the attacker may know bitG(g(x_7)).
Using the function 2-tuple the attacker may obtain (tag6,bitG(g(x_7))).
attacker((tag6,bitG(g(x_7)))).

19. The message u[] that the attacker may have by 1 may be received at input {330}.
The message (tag6,bitG(g(x_7))) that the attacker may have by 18 may be received at input {333}.
So the message (bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp[])),GtoSymK(exp(g(x_7),y_5)))) may be sent to the attacker at output {341}.
attacker((bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp[])),GtoSymK(exp(g(x_7),y_5))))).

20. By 19, the attacker may know (bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp[])),GtoSymK(exp(g(x_7),y_5)))).
Using the function 2-proj-2-tuple the attacker may obtain enc((tag7,sign((g(y_5),g(x_7)),skp[])),GtoSymK(exp(g(x_7),y_5))).
attacker(enc((tag7,sign((g(y_5),g(x_7)),skp[])),GtoSymK(exp(g(x_7),y_5)))).

21. By 19, the attacker may know (bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp[])),GtoSymK(exp(g(x_7),y_5)))).
Using the function 1-proj-2-tuple the attacker may obtain bitG(g(y_5)).
attacker(bitG(g(y_5))).

22. By 21, the attacker may know bitG(g(y_5)).
By 20, the attacker may know enc((tag7,sign((g(y_5),g(x_7)),skp[])),GtoSymK(exp(g(x_7),y_5))).
Using the function 2-tuple the attacker may obtain (bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp[])),GtoSymK(exp(g(x_7),y_5)))).
attacker((bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp[])),GtoSymK(exp(g(x_7),y_5))))).

23. The message i[] that the attacker may have by 2 may be received at input {94}.
The message (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4)))) that the attacker may have by 10 may be received at input {101}.
The message enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(x_6),y_4))) that the attacker may have by 13 may be received at input {113}.
The message p[] that the attacker may have by 14 may be received at input {125}.
The message (bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp[])),GtoSymK(exp(g(x_7),y_5)))) that the attacker may have by 22 may be received at input {132}.
So the message enc((tag8,sign((g(x_7),g(y_5)),sku[])),GtoSymK(exp(g(x_7),y_5))) may be sent to the attacker at output {140}.
attacker(enc((tag8,sign((g(x_7),g(y_5)),sku[])),GtoSymK(exp(g(x_7),y_5)))).

24. The message i[] that the attacker may have by 2 may be received at input {94}.
The message (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4)))) that the attacker may have by 10 may be received at input {101}.
The message enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(x_6),y_4))) that the attacker may have by 13 may be received at input {113}.
The message p[] that the attacker may have by 14 may be received at input {125}.
The message (bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp[])),GtoSymK(exp(g(x_7),y_5)))) that the attacker may have by 22 may be received at input {132}.
So the message enc((tag9,uri),GtoSymK(exp(g(x_7),y_5))) may be sent to the attacker at output {142}.
attacker(enc((tag9,uri),GtoSymK(exp(g(x_7),y_5)))).

25. The message u[] that the attacker may have by 1 may be received at input {330}.
The message (tag6,bitG(g(x_7))) that the attacker may have by 18 may be received at input {333}.
The message enc((tag8,sign((g(x_7),g(y_5)),sku[])),GtoSymK(exp(g(x_7),y_5))) that the attacker may have by 23 may be received at input {342}.
The message enc((tag9,uri),GtoSymK(exp(g(x_7),y_5))) that the attacker may have by 24 may be received at input {346}.
So the message enc((tag10,(u[],i[],attr),nc_6),GtoSymK(exp(g(x_7),y_5))) may be sent to the attacker at output {353}.
attacker(enc((tag10,(u[],i[],attr),nc_6),GtoSymK(exp(g(x_7),y_5)))).

26. The message i[] that the attacker may have by 2 may be received at input {94}.
The message (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4)))) that the attacker may have by 10 may be received at input {101}.
The message enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(x_6),y_4))) that the attacker may have by 13 may be received at input {113}.
The message p[] that the attacker may have by 14 may be received at input {125}.
The message (bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp[])),GtoSymK(exp(g(x_7),y_5)))) that the attacker may have by 22 may be received at input {132}.
The message enc((tag10,(u[],i[],attr),nc_6),GtoSymK(exp(g(x_7),y_5))) that the attacker may have by 25 may be received at input {143}.
So the message enc((tag11,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),scope,solid),sku[]),nc_6),GtoSymK(exp(g(x_7),y_5))) may be sent to the attacker at output {156}.
attacker(enc((tag11,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),scope,solid),sku[]),nc_6),GtoSymK(exp(g(x_7),y_5)))).

27. The message u[] that the attacker may have by 1 may be received at input {330}.
The message (tag6,bitG(g(x_7))) that the attacker may have by 18 may be received at input {333}.
The message enc((tag8,sign((g(x_7),g(y_5)),sku[])),GtoSymK(exp(g(x_7),y_5))) that the attacker may have by 23 may be received at input {342}.
The message enc((tag9,uri),GtoSymK(exp(g(x_7),y_5))) that the attacker may have by 24 may be received at input {346}.
The message enc((tag11,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),scope,solid),sku[]),nc_6),GtoSymK(exp(g(x_7),y_5))) that the attacker may have by 26 may be received at input {354}.
So the message check_reach_pod[] may be sent to the attacker at output {371}.
attacker(check_reach_pod[]).

28. By 27, attacker(check_reach_pod[]).
The goal is reached, represented in the following fact:
attacker(check_reach_pod[]).


A more detailed output of the traces is available with
  set traceDisplay = long.

new i: bitstring creating i_4 at {1}

new u: bitstring creating u_4 at {2}

new p: bitstring creating p_3 at {3}

out(c, ~M) with ~M = i_4 at {4}

out(c, ~M_1) with ~M_1 = u_4 at {5}

out(c, ~M_2) with ~M_2 = p_3 at {6}

new ski: SecretKey creating ski_2 at {7}

new sku: SecretKey creating sku_2 at {8}

new skp: SecretKey creating skp_2 at {9}

out(c, ~M_3) with ~M_3 = pk(ski_2) at {10}

out(c, ~M_4) with ~M_4 = pk(sku_2) at {11}

out(c, ~M_5) with ~M_5 = pk(skp_2) at {12}

new password: bitstring creating password_3 at {13}

in(c, ~M_1) with ~M_1 = u_4 at {22} in copy a

in(c, ~M) with ~M = i_4 at {94} in copy a_1

new x: exponent creating x_6 at {97} in copy a_1

out(c, (~M_6,~M_7)) with ~M_6 = tag1, ~M_7 = bitG(g(x_6)) at {100} in copy a_1

in(c, (tag1,~M_7)) with ~M_7 = bitG(g(x_6)) at {25} in copy a

new y: exponent creating y_4 at {29} in copy a

out(c, (~M_8,~M_9)) with ~M_8 = bitG(g(y_4)), ~M_9 = enc((tag2,sign((g(y_4),g(x_6)),ski_2)),GtoSymK(exp(g(x_6),y_4))) at {33} in copy a

in(c, (~M_8,~M_9)) with ~M_8 = bitG(g(y_4)), ~M_9 = enc((tag2,sign((g(y_4),g(x_6)),ski_2)),GtoSymK(exp(g(x_6),y_4))) at {101} in copy a_1

out(c, ~M_10) with ~M_10 = enc((tag3,sign((g(x_6),g(y_4)),sku_2)),GtoSymK(exp(g(y_4),x_6))) at {109} in copy a_1

event userSendsLastMessageToIssuer((tag1,bitG(g(x_6))),(bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski_2)),GtoSymK(exp(g(x_6),y_4)))),enc((tag3,sign((g(x_6),g(y_4)),sku_2)),GtoSymK(exp(g(y_4),x_6))),enc((tag4,u_4,attr,password_3),GtoSymK(exp(g(y_4),x_6)))) at {111} in copy a_1

out(c, ~M_11) with ~M_11 = enc((tag4,u_4,attr,password_3),GtoSymK(exp(g(y_4),x_6))) at {112} in copy a_1

in(c, ~M_10) with ~M_10 = enc((tag3,sign((g(x_6),g(y_4)),sku_2)),GtoSymK(exp(g(x_6),y_4))) at {34} in copy a

in(c, ~M_11) with ~M_11 = enc((tag4,u_4,attr,password_3),GtoSymK(exp(g(x_6),y_4))) at {38} in copy a

event issuerSendsLastMessageToUser((tag1,bitG(g(x_6))),(bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski_2)),GtoSymK(exp(g(x_6),y_4)))),enc((tag3,sign((g(x_6),g(y_4)),sku_2)),GtoSymK(exp(g(x_6),y_4))),enc((tag4,u_4,attr,password_3),GtoSymK(exp(g(x_6),y_4))),enc((tag5,sign((((u_4,i_4,attr),sign((u_4,i_4,attr),ski_2)),u_4),ski_2)),GtoSymK(exp(g(x_6),y_4)))) at {47} in copy a

out(c, ~M_12) with ~M_12 = enc((tag5,sign((((u_4,i_4,attr),sign((u_4,i_4,attr),ski_2)),u_4),ski_2)),GtoSymK(exp(g(x_6),y_4))) at {48} in copy a

out(c, ~M_13) with ~M_13 = check_reach_issuer at {50} in copy a

event issuerCompletesProtocol((tag1,bitG(g(x_6))),(bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski_2)),GtoSymK(exp(g(x_6),y_4)))),enc((tag3,sign((g(x_6),g(y_4)),sku_2)),GtoSymK(exp(g(x_6),y_4))),enc((tag4,u_4,attr,password_3),GtoSymK(exp(g(x_6),y_4)))) at {51} in copy a

in(c, ~M_12) with ~M_12 = enc((tag5,sign((((u_4,i_4,attr),sign((u_4,i_4,attr),ski_2)),u_4),ski_2)),GtoSymK(exp(g(x_6),y_4))) at {113} in copy a_1

out(c, ~M_14) with ~M_14 = check_reach_user at {205} in copy a_1

event userCompletesProtocol((tag1,bitG(g(x_6))),(bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski_2)),GtoSymK(exp(g(x_6),y_4)))),enc((tag3,sign((g(x_6),g(y_4)),sku_2)),GtoSymK(exp(g(y_4),x_6))),enc((tag4,u_4,attr,password_3),GtoSymK(exp(g(y_4),x_6))),enc((tag5,sign((((u_4,i_4,attr),sign((u_4,i_4,attr),ski_2)),u_4),ski_2)),GtoSymK(exp(g(x_6),y_4)))) at {206} in copy a_1

in(c, ~M_2) with ~M_2 = p_3 at {125} in copy a_1, a_2

new x_1: exponent creating x_7 at {128} in copy a_1, a_2

out(c, (~M_15,~M_16)) with ~M_15 = tag6, ~M_16 = bitG(g(x_7)) at {131} in copy a_1, a_2

in(c, ~M_1) with ~M_1 = u_4 at {330} in copy a_3

in(c, (tag6,~M_16)) with ~M_16 = bitG(g(x_7)) at {333} in copy a_3

new y_2: exponent creating y_5 at {337} in copy a_3

out(c, (~M_17,~M_18)) with ~M_17 = bitG(g(y_5)), ~M_18 = enc((tag7,sign((g(y_5),g(x_7)),skp_2)),GtoSymK(exp(g(x_7),y_5))) at {341} in copy a_3

in(c, (~M_17,~M_18)) with ~M_17 = bitG(g(y_5)), ~M_18 = enc((tag7,sign((g(y_5),g(x_7)),skp_2)),GtoSymK(exp(g(x_7),y_5))) at {132} in copy a_1, a_2

out(c, ~M_19) with ~M_19 = enc((tag8,sign((g(x_7),g(y_5)),sku_2)),GtoSymK(exp(g(y_5),x_7))) at {140} in copy a_1, a_2

out(c, ~M_20) with ~M_20 = enc((tag9,uri),GtoSymK(exp(g(y_5),x_7))) at {142} in copy a_1, a_2

in(c, ~M_19) with ~M_19 = enc((tag8,sign((g(x_7),g(y_5)),sku_2)),GtoSymK(exp(g(x_7),y_5))) at {342} in copy a_3

in(c, ~M_20) with ~M_20 = enc((tag9,uri),GtoSymK(exp(g(x_7),y_5))) at {346} in copy a_3

new nc_4: bitstring creating nc_6 at {350} in copy a_3

out(c, ~M_21) with ~M_21 = enc((tag10,(u_4,i_4,attr),nc_6),GtoSymK(exp(g(x_7),y_5))) at {353} in copy a_3

in(c, ~M_21) with ~M_21 = enc((tag10,(u_4,i_4,attr),nc_6),GtoSymK(exp(g(x_7),y_5))) at {143} in copy a_1, a_2

event userSendsLastMessageToPod((tag6,bitG(g(x_7))),(bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp_2)),GtoSymK(exp(g(x_7),y_5)))),enc((tag8,sign((g(x_7),g(y_5)),sku_2)),GtoSymK(exp(g(y_5),x_7))),enc((tag9,uri),GtoSymK(exp(g(y_5),x_7))),enc((tag10,(u_4,i_4,attr),nc_6),GtoSymK(exp(g(x_7),y_5))),enc((tag11,sign((((u_4,i_4,attr),sign((u_4,i_4,attr),ski_2)),scope,solid),sku_2),nc_6),GtoSymK(exp(g(y_5),x_7)))) at {155} in copy a_1, a_2

out(c, ~M_22) with ~M_22 = enc((tag11,sign((((u_4,i_4,attr),sign((u_4,i_4,attr),ski_2)),scope,solid),sku_2),nc_6),GtoSymK(exp(g(y_5),x_7))) at {156} in copy a_1, a_2

in(c, ~M_22) with ~M_22 = enc((tag11,sign((((u_4,i_4,attr),sign((u_4,i_4,attr),ski_2)),scope,solid),sku_2),nc_6),GtoSymK(exp(g(x_7),y_5))) at {354} in copy a_3

new accesstoken_4: bitstring creating accesstoken_6 at {366} in copy a_3

event podSendsLastMessageToUser((tag6,bitG(g(x_7))),(bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp_2)),GtoSymK(exp(g(x_7),y_5)))),enc((tag8,sign((g(x_7),g(y_5)),sku_2)),GtoSymK(exp(g(x_7),y_5))),enc((tag9,uri),GtoSymK(exp(g(x_7),y_5))),enc((tag10,(u_4,i_4,attr),nc_6),GtoSymK(exp(g(x_7),y_5))),enc((tag11,sign((((u_4,i_4,attr),sign((u_4,i_4,attr),ski_2)),scope,solid),sku_2),nc_6),GtoSymK(exp(g(x_7),y_5))),enc((tag12,sign(accesstoken_6,skp_2)),GtoSymK(exp(g(x_7),y_5)))) at {368} in copy a_3

out(c, ~M_23) with ~M_23 = enc((tag12,sign(accesstoken_6,skp_2)),GtoSymK(exp(g(x_7),y_5))) at {369} in copy a_3

out(c, ~M_24) with ~M_24 = check_reach_pod at {371} in copy a_3

event podCompletesProtocol((tag6,bitG(g(x_7))),(bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp_2)),GtoSymK(exp(g(x_7),y_5)))),enc((tag8,sign((g(x_7),g(y_5)),sku_2)),GtoSymK(exp(g(x_7),y_5))),enc((tag9,uri),GtoSymK(exp(g(x_7),y_5))),enc((tag10,(u_4,i_4,attr),nc_6),GtoSymK(exp(g(x_7),y_5))),enc((tag11,sign((((u_4,i_4,attr),sign((u_4,i_4,attr),ski_2)),scope,solid),sku_2),nc_6),GtoSymK(exp(g(x_7),y_5)))) at {372} in copy a_3

The attacker has the message ~M_24 = check_reach_pod.
A trace has been found.
RESULT not attacker(check_reach_pod[]) is false.
-- Query not attacker(symmetric_key_IU[]) in process 1.
Translating the process into Horn clauses...
select attacker(bitG(gx_10))/-5000
Completing...
Termination warning: attacker(bitG(elem)) -> attacker(elem)
Selecting 0
200 rules inserted. Base: 191 rules (57 with conclusion selected). Queue: 174 rules.
400 rules inserted. Base: 353 rules (75 with conclusion selected). Queue: 233 rules.
600 rules inserted. Base: 526 rules (91 with conclusion selected). Queue: 278 rules.
800 rules inserted. Base: 714 rules (97 with conclusion selected). Queue: 452 rules.
1000 rules inserted. Base: 810 rules (102 with conclusion selected). Queue: 524 rules.
1200 rules inserted. Base: 940 rules (102 with conclusion selected). Queue: 542 rules.
1400 rules inserted. Base: 1049 rules (109 with conclusion selected). Queue: 592 rules.
1600 rules inserted. Base: 1175 rules (109 with conclusion selected). Queue: 549 rules.
1800 rules inserted. Base: 1265 rules (110 with conclusion selected). Queue: 518 rules.
2000 rules inserted. Base: 1394 rules (114 with conclusion selected). Queue: 499 rules.
2200 rules inserted. Base: 1507 rules (116 with conclusion selected). Queue: 431 rules.
2400 rules inserted. Base: 1551 rules (121 with conclusion selected). Queue: 447 rules.
2600 rules inserted. Base: 1618 rules (124 with conclusion selected). Queue: 367 rules.
2800 rules inserted. Base: 1692 rules (130 with conclusion selected). Queue: 383 rules.
3000 rules inserted. Base: 1726 rules (137 with conclusion selected). Queue: 365 rules.
3200 rules inserted. Base: 1739 rules (147 with conclusion selected). Queue: 363 rules.
3400 rules inserted. Base: 1794 rules (151 with conclusion selected). Queue: 289 rules.
3600 rules inserted. Base: 1845 rules (151 with conclusion selected). Queue: 215 rules.
3800 rules inserted. Base: 1950 rules (151 with conclusion selected). Queue: 111 rules.
select attacker(bitG(g(x_6)))/-5000
4000 rules inserted. Base: 2049 rules (171 with conclusion selected). Queue: 195 rules.
4200 rules inserted. Base: 2194 rules (184 with conclusion selected). Queue: 336 rules.
4400 rules inserted. Base: 2325 rules (192 with conclusion selected). Queue: 451 rules.
4600 rules inserted. Base: 2419 rules (192 with conclusion selected). Queue: 433 rules.
4800 rules inserted. Base: 2502 rules (198 with conclusion selected). Queue: 504 rules.
5000 rules inserted. Base: 2625 rules (198 with conclusion selected). Queue: 535 rules.
5200 rules inserted. Base: 2708 rules (201 with conclusion selected). Queue: 588 rules.
5400 rules inserted. Base: 2802 rules (202 with conclusion selected). Queue: 628 rules.
5600 rules inserted. Base: 2901 rules (202 with conclusion selected). Queue: 658 rules.
5800 rules inserted. Base: 2989 rules (206 with conclusion selected). Queue: 715 rules.
6000 rules inserted. Base: 3058 rules (206 with conclusion selected). Queue: 716 rules.
6200 rules inserted. Base: 3180 rules (206 with conclusion selected). Queue: 709 rules.
6400 rules inserted. Base: 3260 rules (206 with conclusion selected). Queue: 731 rules.
6600 rules inserted. Base: 3304 rules (212 with conclusion selected). Queue: 760 rules.
6800 rules inserted. Base: 3390 rules (212 with conclusion selected). Queue: 777 rules.
7000 rules inserted. Base: 3455 rules (212 with conclusion selected). Queue: 765 rules.
7200 rules inserted. Base: 3508 rules (215 with conclusion selected). Queue: 824 rules.
7400 rules inserted. Base: 3566 rules (215 with conclusion selected). Queue: 751 rules.
7600 rules inserted. Base: 3628 rules (215 with conclusion selected). Queue: 744 rules.
7800 rules inserted. Base: 3684 rules (215 with conclusion selected). Queue: 710 rules.
8000 rules inserted. Base: 3708 rules (215 with conclusion selected). Queue: 703 rules.
8200 rules inserted. Base: 3773 rules (219 with conclusion selected). Queue: 616 rules.
8400 rules inserted. Base: 3797 rules (219 with conclusion selected). Queue: 570 rules.
8600 rules inserted. Base: 3844 rules (219 with conclusion selected). Queue: 532 rules.
8800 rules inserted. Base: 3819 rules (223 with conclusion selected). Queue: 498 rules.
9000 rules inserted. Base: 3827 rules (223 with conclusion selected). Queue: 423 rules.
9200 rules inserted. Base: 3879 rules (224 with conclusion selected). Queue: 362 rules.
9400 rules inserted. Base: 3831 rules (224 with conclusion selected). Queue: 287 rules.
9600 rules inserted. Base: 3867 rules (236 with conclusion selected). Queue: 206 rules.
9800 rules inserted. Base: 3850 rules (254 with conclusion selected). Queue: 174 rules.
10000 rules inserted. Base: 3823 rules (272 with conclusion selected). Queue: 182 rules.
10200 rules inserted. Base: 3854 rules (290 with conclusion selected). Queue: 151 rules.
10400 rules inserted. Base: 3942 rules (306 with conclusion selected). Queue: 279 rules.
10600 rules inserted. Base: 4034 rules (318 with conclusion selected). Queue: 229 rules.
10800 rules inserted. Base: 4088 rules (326 with conclusion selected). Queue: 244 rules.
11000 rules inserted. Base: 4209 rules (328 with conclusion selected). Queue: 268 rules.
11200 rules inserted. Base: 4302 rules (334 with conclusion selected). Queue: 385 rules.
11400 rules inserted. Base: 4425 rules (338 with conclusion selected). Queue: 370 rules.
11600 rules inserted. Base: 4502 rules (342 with conclusion selected). Queue: 366 rules.
11800 rules inserted. Base: 4620 rules (352 with conclusion selected). Queue: 542 rules.
12000 rules inserted. Base: 4671 rules (352 with conclusion selected). Queue: 523 rules.
12200 rules inserted. Base: 4761 rules (354 with conclusion selected). Queue: 556 rules.
12400 rules inserted. Base: 4801 rules (356 with conclusion selected). Queue: 554 rules.
12600 rules inserted. Base: 4847 rules (358 with conclusion selected). Queue: 539 rules.
12800 rules inserted. Base: 4932 rules (358 with conclusion selected). Queue: 523 rules.
13000 rules inserted. Base: 5048 rules (358 with conclusion selected). Queue: 475 rules.
13200 rules inserted. Base: 5161 rules (358 with conclusion selected). Queue: 358 rules.
13400 rules inserted. Base: 5236 rules (358 with conclusion selected). Queue: 280 rules.
13600 rules inserted. Base: 5320 rules (358 with conclusion selected). Queue: 156 rules.
13800 rules inserted. Base: 5445 rules (362 with conclusion selected). Queue: 20 rules.
Starting query not attacker(symmetric_key_IU[])
RESULT not attacker(symmetric_key_IU[]) is true.
-- Query not attacker(symmetric_key_UP[]) in process 1.
Translating the process into Horn clauses...
select attacker(bitG(gx_10))/-5000
Completing...
Termination warning: attacker(bitG(elem)) -> attacker(elem)
Selecting 0
200 rules inserted. Base: 191 rules (57 with conclusion selected). Queue: 174 rules.
400 rules inserted. Base: 353 rules (75 with conclusion selected). Queue: 233 rules.
600 rules inserted. Base: 526 rules (91 with conclusion selected). Queue: 278 rules.
800 rules inserted. Base: 714 rules (97 with conclusion selected). Queue: 452 rules.
1000 rules inserted. Base: 810 rules (102 with conclusion selected). Queue: 524 rules.
1200 rules inserted. Base: 940 rules (102 with conclusion selected). Queue: 542 rules.
1400 rules inserted. Base: 1049 rules (109 with conclusion selected). Queue: 592 rules.
1600 rules inserted. Base: 1175 rules (109 with conclusion selected). Queue: 549 rules.
1800 rules inserted. Base: 1265 rules (110 with conclusion selected). Queue: 518 rules.
2000 rules inserted. Base: 1394 rules (114 with conclusion selected). Queue: 499 rules.
2200 rules inserted. Base: 1507 rules (116 with conclusion selected). Queue: 431 rules.
2400 rules inserted. Base: 1551 rules (121 with conclusion selected). Queue: 447 rules.
2600 rules inserted. Base: 1618 rules (124 with conclusion selected). Queue: 367 rules.
2800 rules inserted. Base: 1692 rules (130 with conclusion selected). Queue: 383 rules.
3000 rules inserted. Base: 1726 rules (137 with conclusion selected). Queue: 365 rules.
3200 rules inserted. Base: 1739 rules (147 with conclusion selected). Queue: 363 rules.
3400 rules inserted. Base: 1794 rules (151 with conclusion selected). Queue: 289 rules.
3600 rules inserted. Base: 1845 rules (151 with conclusion selected). Queue: 215 rules.
3800 rules inserted. Base: 1950 rules (151 with conclusion selected). Queue: 111 rules.
select attacker(bitG(g(x_6)))/-5000
4000 rules inserted. Base: 2049 rules (171 with conclusion selected). Queue: 195 rules.
4200 rules inserted. Base: 2194 rules (184 with conclusion selected). Queue: 336 rules.
4400 rules inserted. Base: 2325 rules (192 with conclusion selected). Queue: 451 rules.
4600 rules inserted. Base: 2419 rules (192 with conclusion selected). Queue: 433 rules.
4800 rules inserted. Base: 2502 rules (198 with conclusion selected). Queue: 504 rules.
5000 rules inserted. Base: 2625 rules (198 with conclusion selected). Queue: 535 rules.
5200 rules inserted. Base: 2708 rules (201 with conclusion selected). Queue: 588 rules.
5400 rules inserted. Base: 2802 rules (202 with conclusion selected). Queue: 628 rules.
5600 rules inserted. Base: 2901 rules (202 with conclusion selected). Queue: 658 rules.
5800 rules inserted. Base: 2989 rules (206 with conclusion selected). Queue: 715 rules.
6000 rules inserted. Base: 3058 rules (206 with conclusion selected). Queue: 716 rules.
6200 rules inserted. Base: 3180 rules (206 with conclusion selected). Queue: 709 rules.
6400 rules inserted. Base: 3260 rules (206 with conclusion selected). Queue: 731 rules.
6600 rules inserted. Base: 3304 rules (212 with conclusion selected). Queue: 760 rules.
6800 rules inserted. Base: 3390 rules (212 with conclusion selected). Queue: 777 rules.
7000 rules inserted. Base: 3455 rules (212 with conclusion selected). Queue: 765 rules.
7200 rules inserted. Base: 3508 rules (215 with conclusion selected). Queue: 824 rules.
7400 rules inserted. Base: 3566 rules (215 with conclusion selected). Queue: 751 rules.
7600 rules inserted. Base: 3628 rules (215 with conclusion selected). Queue: 744 rules.
7800 rules inserted. Base: 3684 rules (215 with conclusion selected). Queue: 710 rules.
8000 rules inserted. Base: 3708 rules (215 with conclusion selected). Queue: 703 rules.
8200 rules inserted. Base: 3773 rules (219 with conclusion selected). Queue: 616 rules.
8400 rules inserted. Base: 3797 rules (219 with conclusion selected). Queue: 570 rules.
8600 rules inserted. Base: 3844 rules (219 with conclusion selected). Queue: 532 rules.
8800 rules inserted. Base: 3819 rules (223 with conclusion selected). Queue: 498 rules.
9000 rules inserted. Base: 3827 rules (223 with conclusion selected). Queue: 423 rules.
9200 rules inserted. Base: 3879 rules (224 with conclusion selected). Queue: 362 rules.
9400 rules inserted. Base: 3831 rules (224 with conclusion selected). Queue: 287 rules.
9600 rules inserted. Base: 3867 rules (236 with conclusion selected). Queue: 206 rules.
9800 rules inserted. Base: 3850 rules (254 with conclusion selected). Queue: 174 rules.
10000 rules inserted. Base: 3823 rules (272 with conclusion selected). Queue: 182 rules.
10200 rules inserted. Base: 3854 rules (290 with conclusion selected). Queue: 151 rules.
10400 rules inserted. Base: 3942 rules (306 with conclusion selected). Queue: 279 rules.
10600 rules inserted. Base: 4034 rules (318 with conclusion selected). Queue: 229 rules.
10800 rules inserted. Base: 4088 rules (326 with conclusion selected). Queue: 244 rules.
11000 rules inserted. Base: 4209 rules (328 with conclusion selected). Queue: 268 rules.
11200 rules inserted. Base: 4302 rules (334 with conclusion selected). Queue: 385 rules.
11400 rules inserted. Base: 4425 rules (338 with conclusion selected). Queue: 370 rules.
11600 rules inserted. Base: 4502 rules (342 with conclusion selected). Queue: 366 rules.
11800 rules inserted. Base: 4620 rules (352 with conclusion selected). Queue: 542 rules.
12000 rules inserted. Base: 4671 rules (352 with conclusion selected). Queue: 523 rules.
12200 rules inserted. Base: 4761 rules (354 with conclusion selected). Queue: 556 rules.
12400 rules inserted. Base: 4801 rules (356 with conclusion selected). Queue: 554 rules.
12600 rules inserted. Base: 4847 rules (358 with conclusion selected). Queue: 539 rules.
12800 rules inserted. Base: 4932 rules (358 with conclusion selected). Queue: 523 rules.
13000 rules inserted. Base: 5048 rules (358 with conclusion selected). Queue: 475 rules.
13200 rules inserted. Base: 5161 rules (358 with conclusion selected). Queue: 358 rules.
13400 rules inserted. Base: 5236 rules (358 with conclusion selected). Queue: 280 rules.
13600 rules inserted. Base: 5320 rules (358 with conclusion selected). Queue: 156 rules.
13800 rules inserted. Base: 5445 rules (362 with conclusion selected). Queue: 20 rules.
Starting query not attacker(symmetric_key_UP[])
RESULT not attacker(symmetric_key_UP[]) is true.
-- Query inj-event(issuerCompletesProtocol(m_62,m_63,m_64,m_65)) ==> inj-event(userSendsLastMessageToIssuer(m_62,m_63,m_64,m_65)) in process 1.
Translating the process into Horn clauses...
select attacker(bitG(gx_10))/-5000
Completing...
Termination warning: attacker(bitG(elem)) -> attacker(elem)
Selecting 0
200 rules inserted. Base: 191 rules (57 with conclusion selected). Queue: 176 rules.
400 rules inserted. Base: 353 rules (75 with conclusion selected). Queue: 235 rules.
600 rules inserted. Base: 510 rules (91 with conclusion selected). Queue: 278 rules.
800 rules inserted. Base: 698 rules (94 with conclusion selected). Queue: 422 rules.
1000 rules inserted. Base: 801 rules (100 with conclusion selected). Queue: 532 rules.
1200 rules inserted. Base: 927 rules (102 with conclusion selected). Queue: 558 rules.
1400 rules inserted. Base: 1032 rules (109 with conclusion selected). Queue: 614 rules.
1600 rules inserted. Base: 1161 rules (109 with conclusion selected). Queue: 569 rules.
1800 rules inserted. Base: 1230 rules (110 with conclusion selected). Queue: 554 rules.
2000 rules inserted. Base: 1367 rules (114 with conclusion selected). Queue: 535 rules.
2200 rules inserted. Base: 1477 rules (116 with conclusion selected). Queue: 474 rules.
2400 rules inserted. Base: 1540 rules (118 with conclusion selected). Queue: 443 rules.
2600 rules inserted. Base: 1634 rules (124 with conclusion selected). Queue: 451 rules.
2800 rules inserted. Base: 1691 rules (128 with conclusion selected). Queue: 427 rules.
3000 rules inserted. Base: 1746 rules (135 with conclusion selected). Queue: 476 rules.
3200 rules inserted. Base: 1805 rules (138 with conclusion selected). Queue: 453 rules.
3400 rules inserted. Base: 1817 rules (148 with conclusion selected). Queue: 441 rules.
3600 rules inserted. Base: 1838 rules (150 with conclusion selected). Queue: 360 rules.
3800 rules inserted. Base: 1888 rules (152 with conclusion selected). Queue: 294 rules.
4000 rules inserted. Base: 1973 rules (152 with conclusion selected). Queue: 188 rules.
select attacker(bitG(g(x_6)))/-5000
4200 rules inserted. Base: 2104 rules (158 with conclusion selected). Queue: 122 rules.
4400 rules inserted. Base: 2237 rules (175 with conclusion selected). Queue: 211 rules.
4600 rules inserted. Base: 2382 rules (187 with conclusion selected). Queue: 365 rules.
4800 rules inserted. Base: 2486 rules (195 with conclusion selected). Queue: 458 rules.
5000 rules inserted. Base: 2578 rules (195 with conclusion selected). Queue: 438 rules.
5200 rules inserted. Base: 2669 rules (201 with conclusion selected). Queue: 514 rules.
5400 rules inserted. Base: 2798 rules (201 with conclusion selected). Queue: 548 rules.
5600 rules inserted. Base: 2871 rules (206 with conclusion selected). Queue: 638 rules.
5800 rules inserted. Base: 2966 rules (206 with conclusion selected). Queue: 634 rules.
6000 rules inserted. Base: 3069 rules (206 with conclusion selected). Queue: 651 rules.
6200 rules inserted. Base: 3149 rules (210 with conclusion selected). Queue: 726 rules.
6400 rules inserted. Base: 3223 rules (210 with conclusion selected). Queue: 726 rules.
6600 rules inserted. Base: 3341 rules (210 with conclusion selected). Queue: 723 rules.
6800 rules inserted. Base: 3423 rules (210 with conclusion selected). Queue: 739 rules.
7000 rules inserted. Base: 3470 rules (216 with conclusion selected). Queue: 768 rules.
7200 rules inserted. Base: 3563 rules (216 with conclusion selected). Queue: 787 rules.
7400 rules inserted. Base: 3625 rules (216 with conclusion selected). Queue: 775 rules.
7600 rules inserted. Base: 3673 rules (219 with conclusion selected). Queue: 841 rules.
7800 rules inserted. Base: 3744 rules (219 with conclusion selected). Queue: 774 rules.
8000 rules inserted. Base: 3806 rules (219 with conclusion selected). Queue: 765 rules.
8200 rules inserted. Base: 3856 rules (219 with conclusion selected). Queue: 732 rules.
8400 rules inserted. Base: 3876 rules (219 with conclusion selected). Queue: 719 rules.
8600 rules inserted. Base: 3937 rules (223 with conclusion selected). Queue: 640 rules.
8800 rules inserted. Base: 3973 rules (223 with conclusion selected). Queue: 599 rules.
9000 rules inserted. Base: 4021 rules (223 with conclusion selected). Queue: 550 rules.
9200 rules inserted. Base: 3999 rules (227 with conclusion selected). Queue: 513 rules.
9400 rules inserted. Base: 4006 rules (227 with conclusion selected). Queue: 445 rules.
9600 rules inserted. Base: 4065 rules (227 with conclusion selected). Queue: 376 rules.
9800 rules inserted. Base: 4041 rules (228 with conclusion selected). Queue: 304 rules.
10000 rules inserted. Base: 4101 rules (240 with conclusion selected). Queue: 225 rules.
10200 rules inserted. Base: 4080 rules (253 with conclusion selected). Queue: 152 rules.
10400 rules inserted. Base: 4039 rules (273 with conclusion selected). Queue: 155 rules.
10600 rules inserted. Base: 4023 rules (292 with conclusion selected). Queue: 133 rules.
10800 rules inserted. Base: 4112 rules (311 with conclusion selected). Queue: 272 rules.
11000 rules inserted. Base: 4206 rules (326 with conclusion selected). Queue: 205 rules.
11200 rules inserted. Base: 4290 rules (330 with conclusion selected). Queue: 217 rules.
11400 rules inserted. Base: 4380 rules (336 with conclusion selected). Queue: 377 rules.
11600 rules inserted. Base: 4462 rules (340 with conclusion selected). Queue: 396 rules.
11800 rules inserted. Base: 4606 rules (349 with conclusion selected). Queue: 404 rules.
12000 rules inserted. Base: 4689 rules (349 with conclusion selected). Queue: 398 rules.
12200 rules inserted. Base: 4715 rules (359 with conclusion selected). Queue: 505 rules.
12400 rules inserted. Base: 4772 rules (359 with conclusion selected). Queue: 502 rules.
12600 rules inserted. Base: 4850 rules (363 with conclusion selected). Queue: 538 rules.
12800 rules inserted. Base: 4891 rules (363 with conclusion selected). Queue: 592 rules.
13000 rules inserted. Base: 4909 rules (365 with conclusion selected). Queue: 554 rules.
13200 rules inserted. Base: 4919 rules (365 with conclusion selected). Queue: 492 rules.
13400 rules inserted. Base: 4994 rules (365 with conclusion selected). Queue: 429 rules.
13600 rules inserted. Base: 5101 rules (365 with conclusion selected). Queue: 306 rules.
13800 rules inserted. Base: 5130 rules (365 with conclusion selected). Queue: 261 rules.
14000 rules inserted. Base: 5167 rules (367 with conclusion selected). Queue: 141 rules.
14200 rules inserted. Base: 5273 rules (369 with conclusion selected). Queue: 24 rules.
Starting query inj-event(issuerCompletesProtocol(m_62,m_63,m_64,m_65)) ==> inj-event(userSendsLastMessageToIssuer(m_62,m_63,m_64,m_65))
goal reachable: begin(userSendsLastMessageToIssuer((tag1,bitG(g(x_6))),(bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(y_4),x_6)))),enc((tag3,sign((g(x_6),g(y_4)),sku[])),GtoSymK(exp(g(y_4),x_6))),enc((tag4,u[],attr,password[]),GtoSymK(exp(g(y_4),x_6)))),@occ111_1) -> end(@occ51_1,issuerCompletesProtocol((tag1,bitG(g(x_6))),(bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(y_4),x_6)))),enc((tag3,sign((g(x_6),g(y_4)),sku[])),GtoSymK(exp(g(y_4),x_6))),enc((tag4,u[],attr,password[]),GtoSymK(exp(g(y_4),x_6)))))
The hypothesis occurs strictly before the conclusion.
Abbreviations:
x_6 = x[e_1 = i[],!1 = @sid]
y_4 = y[m_1 = (tag1,bitG(g(x_6))),e = u[],!1 = @sid_1]
@occ51_1 = @occ51[m_4 = enc((tag4,u[],attr,password[]),GtoSymK(exp(g(y_4),x_6))),m_3 = enc((tag3,sign((g(x_6),g(y_4)),sku[])),GtoSymK(exp(g(y_4),x_6))),m_1 = (tag1,bitG(g(x_6))),e = u[],!1 = @sid_1]
@occ111_1 = @occ111[m_11 = (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(y_4),x_6)))),e_1 = i[],!1 = @sid]
RESULT inj-event(issuerCompletesProtocol(m_62,m_63,m_64,m_65)) ==> inj-event(userSendsLastMessageToIssuer(m_62,m_63,m_64,m_65)) is true.
-- Query inj-event(userCompletesProtocol(m_62,m_63,m_64,m_65,m_66)) ==> inj-event(issuerSendsLastMessageToUser(m_62,m_63,m_64,m_65,m_66)) in process 1.
Translating the process into Horn clauses...
select attacker(bitG(gx_10))/-5000
Completing...
Termination warning: attacker(bitG(elem)) -> attacker(elem)
Selecting 0
200 rules inserted. Base: 191 rules (57 with conclusion selected). Queue: 176 rules.
400 rules inserted. Base: 353 rules (75 with conclusion selected). Queue: 238 rules.
600 rules inserted. Base: 526 rules (91 with conclusion selected). Queue: 281 rules.
800 rules inserted. Base: 714 rules (94 with conclusion selected). Queue: 426 rules.
1000 rules inserted. Base: 823 rules (100 with conclusion selected). Queue: 532 rules.
1200 rules inserted. Base: 949 rules (102 with conclusion selected). Queue: 563 rules.
1400 rules inserted. Base: 1056 rules (109 with conclusion selected). Queue: 621 rules.
1600 rules inserted. Base: 1186 rules (109 with conclusion selected). Queue: 563 rules.
1800 rules inserted. Base: 1270 rules (110 with conclusion selected). Queue: 550 rules.
2000 rules inserted. Base: 1403 rules (114 with conclusion selected). Queue: 528 rules.
2200 rules inserted. Base: 1522 rules (116 with conclusion selected). Queue: 476 rules.
2400 rules inserted. Base: 1599 rules (118 with conclusion selected). Queue: 435 rules.
2600 rules inserted. Base: 1688 rules (124 with conclusion selected). Queue: 440 rules.
2800 rules inserted. Base: 1730 rules (130 with conclusion selected). Queue: 404 rules.
3000 rules inserted. Base: 1770 rules (135 with conclusion selected). Queue: 417 rules.
3200 rules inserted. Base: 1773 rules (141 with conclusion selected). Queue: 408 rules.
3400 rules inserted. Base: 1835 rules (147 with conclusion selected). Queue: 375 rules.
3600 rules inserted. Base: 1904 rules (151 with conclusion selected). Queue: 299 rules.
3800 rules inserted. Base: 1956 rules (151 with conclusion selected). Queue: 204 rules.
select attacker(bitG(g(x_6)))/-5000
4000 rules inserted. Base: 2063 rules (156 with conclusion selected). Queue: 135 rules.
4200 rules inserted. Base: 2184 rules (172 with conclusion selected). Queue: 199 rules.
4400 rules inserted. Base: 2328 rules (187 with conclusion selected). Queue: 370 rules.
4600 rules inserted. Base: 2465 rules (196 with conclusion selected). Queue: 487 rules.
4800 rules inserted. Base: 2565 rules (196 with conclusion selected). Queue: 457 rules.
5000 rules inserted. Base: 2655 rules (196 with conclusion selected). Queue: 468 rules.
5200 rules inserted. Base: 2763 rules (202 with conclusion selected). Queue: 582 rules.
5400 rules inserted. Base: 2863 rules (202 with conclusion selected). Queue: 603 rules.
5600 rules inserted. Base: 2926 rules (208 with conclusion selected). Queue: 660 rules.
5800 rules inserted. Base: 3049 rules (208 with conclusion selected). Queue: 693 rules.
6000 rules inserted. Base: 3140 rules (208 with conclusion selected). Queue: 715 rules.
6200 rules inserted. Base: 3180 rules (212 with conclusion selected). Queue: 731 rules.
6400 rules inserted. Base: 3278 rules (212 with conclusion selected). Queue: 749 rules.
6600 rules inserted. Base: 3383 rules (212 with conclusion selected). Queue: 751 rules.
6800 rules inserted. Base: 3487 rules (218 with conclusion selected). Queue: 798 rules.
7000 rules inserted. Base: 3512 rules (218 with conclusion selected). Queue: 792 rules.
7200 rules inserted. Base: 3605 rules (218 with conclusion selected). Queue: 802 rules.
7400 rules inserted. Base: 3639 rules (218 with conclusion selected). Queue: 795 rules.
7600 rules inserted. Base: 3716 rules (221 with conclusion selected). Queue: 821 rules.
7800 rules inserted. Base: 3793 rules (221 with conclusion selected). Queue: 754 rules.
8000 rules inserted. Base: 3855 rules (221 with conclusion selected). Queue: 747 rules.
8200 rules inserted. Base: 3897 rules (221 with conclusion selected). Queue: 720 rules.
8400 rules inserted. Base: 3944 rules (221 with conclusion selected). Queue: 695 rules.
8600 rules inserted. Base: 4001 rules (225 with conclusion selected). Queue: 622 rules.
8800 rules inserted. Base: 4021 rules (225 with conclusion selected). Queue: 570 rules.
9000 rules inserted. Base: 4066 rules (225 with conclusion selected). Queue: 540 rules.
9200 rules inserted. Base: 4050 rules (229 with conclusion selected). Queue: 509 rules.
9400 rules inserted. Base: 4050 rules (229 with conclusion selected). Queue: 431 rules.
9600 rules inserted. Base: 4105 rules (230 with conclusion selected). Queue: 372 rules.
9800 rules inserted. Base: 4062 rules (230 with conclusion selected). Queue: 294 rules.
10000 rules inserted. Base: 4104 rules (242 with conclusion selected). Queue: 214 rules.
10200 rules inserted. Base: 4074 rules (258 with conclusion selected). Queue: 198 rules.
10400 rules inserted. Base: 4103 rules (277 with conclusion selected). Queue: 207 rules.
10600 rules inserted. Base: 4119 rules (289 with conclusion selected). Queue: 182 rules.
10800 rules inserted. Base: 4175 rules (306 with conclusion selected). Queue: 351 rules.
11000 rules inserted. Base: 4262 rules (319 with conclusion selected). Queue: 334 rules.
11200 rules inserted. Base: 4331 rules (331 with conclusion selected). Queue: 264 rules.
11400 rules inserted. Base: 4364 rules (336 with conclusion selected). Queue: 275 rules.
11600 rules inserted. Base: 4494 rules (339 with conclusion selected). Queue: 298 rules.
11800 rules inserted. Base: 4586 rules (347 with conclusion selected). Queue: 363 rules.
12000 rules inserted. Base: 4677 rules (350 with conclusion selected). Queue: 413 rules.
12200 rules inserted. Base: 4792 rules (356 with conclusion selected). Queue: 464 rules.
12400 rules inserted. Base: 4879 rules (357 with conclusion selected). Queue: 449 rules.
12600 rules inserted. Base: 4988 rules (366 with conclusion selected). Queue: 621 rules.
12800 rules inserted. Base: 5023 rules (366 with conclusion selected). Queue: 604 rules.
13000 rules inserted. Base: 5105 rules (368 with conclusion selected). Queue: 638 rules.
13200 rules inserted. Base: 5145 rules (370 with conclusion selected). Queue: 692 rules.
13400 rules inserted. Base: 5180 rules (372 with conclusion selected). Queue: 669 rules.
13600 rules inserted. Base: 5261 rules (372 with conclusion selected). Queue: 659 rules.
13800 rules inserted. Base: 5352 rules (372 with conclusion selected). Queue: 668 rules.
14000 rules inserted. Base: 5478 rules (372 with conclusion selected). Queue: 540 rules.
14200 rules inserted. Base: 5565 rules (372 with conclusion selected). Queue: 462 rules.
14400 rules inserted. Base: 5639 rules (372 with conclusion selected). Queue: 400 rules.
14600 rules inserted. Base: 5670 rules (372 with conclusion selected). Queue: 338 rules.
14800 rules inserted. Base: 5802 rules (374 with conclusion selected). Queue: 200 rules.
15000 rules inserted. Base: 5901 rules (374 with conclusion selected). Queue: 94 rules.
15200 rules inserted. Base: 5968 rules (390 with conclusion selected). Queue: 19 rules.
Starting query inj-event(userCompletesProtocol(m_62,m_63,m_64,m_65,m_66)) ==> inj-event(issuerSendsLastMessageToUser(m_62,m_63,m_64,m_65,m_66))
goal reachable: begin(issuerSendsLastMessageToUser((tag1,bitG(g(x_6))),(bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(y_4),x_6)))),enc((tag3,sign((g(x_6),g(y_4)),sku[])),GtoSymK(exp(g(y_4),x_6))),enc((tag4,u[],attr,password[]),GtoSymK(exp(g(y_4),x_6))),enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(y_4),x_6)))),@occ47_1) -> end(@occ206_1,userCompletesProtocol((tag1,bitG(g(x_6))),(bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(y_4),x_6)))),enc((tag3,sign((g(x_6),g(y_4)),sku[])),GtoSymK(exp(g(y_4),x_6))),enc((tag4,u[],attr,password[]),GtoSymK(exp(g(y_4),x_6))),enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(y_4),x_6)))))
The hypothesis occurs strictly before the conclusion.
Abbreviations:
x_6 = x[e_1 = i[],!1 = @sid]
y_4 = y[m_1 = (tag1,bitG(g(x_6))),e = u[],!1 = @sid_1]
@occ206_1 = @occ206[m_14 = enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(y_4),x_6))),m_11 = (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(y_4),x_6)))),e_1 = i[],!1 = @sid]
@occ47_1 = @occ47[m_4 = enc((tag4,u[],attr,password[]),GtoSymK(exp(g(y_4),x_6))),m_3 = enc((tag3,sign((g(x_6),g(y_4)),sku[])),GtoSymK(exp(g(y_4),x_6))),m_1 = (tag1,bitG(g(x_6))),e = u[],!1 = @sid_1]
RESULT inj-event(userCompletesProtocol(m_62,m_63,m_64,m_65,m_66)) ==> inj-event(issuerSendsLastMessageToUser(m_62,m_63,m_64,m_65,m_66)) is true.
-- Query inj-event(userCompletesProtocolFull(m_62,m_63,m_64,m_65,m_66,m_67,m_68,m_69,m_70,m_71,m_72,m_73)) ==> inj-event(issuerSendsLastMessageToUser(m_62,m_63,m_64,m_65,m_66)) && inj-event(podSendsLastMessageToUser(m_67,m_68,m_69,m_70,m_71,m_72,m_73)) in process 1.
Translating the process into Horn clauses...
select attacker(bitG(gx_10))/-5000
Completing...
Termination warning: attacker(bitG(elem)) -> attacker(elem)
Selecting 0
200 rules inserted. Base: 191 rules (55 with conclusion selected). Queue: 178 rules.
400 rules inserted. Base: 354 rules (75 with conclusion selected). Queue: 249 rules.
600 rules inserted. Base: 534 rules (87 with conclusion selected). Queue: 285 rules.
800 rules inserted. Base: 714 rules (94 with conclusion selected). Queue: 429 rules.
1000 rules inserted. Base: 843 rules (100 with conclusion selected). Queue: 537 rules.
1200 rules inserted. Base: 956 rules (102 with conclusion selected). Queue: 572 rules.
1400 rules inserted. Base: 1094 rules (103 with conclusion selected). Queue: 636 rules.
1600 rules inserted. Base: 1216 rules (109 with conclusion selected). Queue: 617 rules.
1800 rules inserted. Base: 1276 rules (109 with conclusion selected). Queue: 574 rules.
2000 rules inserted. Base: 1428 rules (110 with conclusion selected). Queue: 556 rules.
2200 rules inserted. Base: 1536 rules (116 with conclusion selected). Queue: 537 rules.
2400 rules inserted. Base: 1653 rules (116 with conclusion selected). Queue: 467 rules.
2600 rules inserted. Base: 1716 rules (122 with conclusion selected). Queue: 517 rules.
2800 rules inserted. Base: 1823 rules (124 with conclusion selected). Queue: 420 rules.
3000 rules inserted. Base: 1863 rules (130 with conclusion selected). Queue: 414 rules.
3200 rules inserted. Base: 1898 rules (135 with conclusion selected). Queue: 409 rules.
3400 rules inserted. Base: 1889 rules (141 with conclusion selected). Queue: 394 rules.
3600 rules inserted. Base: 1955 rules (148 with conclusion selected). Queue: 374 rules.
3800 rules inserted. Base: 2038 rules (151 with conclusion selected). Queue: 288 rules.
4000 rules inserted. Base: 2091 rules (151 with conclusion selected). Queue: 189 rules.
select attacker(bitG(g(x_6)))/-5000
4200 rules inserted. Base: 2219 rules (156 with conclusion selected). Queue: 113 rules.
4400 rules inserted. Base: 2347 rules (173 with conclusion selected). Queue: 214 rules.
4600 rules inserted. Base: 2489 rules (186 with conclusion selected). Queue: 401 rules.
4800 rules inserted. Base: 2606 rules (195 with conclusion selected). Queue: 503 rules.
5000 rules inserted. Base: 2699 rules (195 with conclusion selected). Queue: 487 rules.
5200 rules inserted. Base: 2787 rules (195 with conclusion selected). Queue: 487 rules.
5400 rules inserted. Base: 2903 rules (201 with conclusion selected). Queue: 604 rules.
5600 rules inserted. Base: 3007 rules (201 with conclusion selected). Queue: 629 rules.
5800 rules inserted. Base: 3068 rules (206 with conclusion selected). Queue: 693 rules.
6000 rules inserted. Base: 3197 rules (206 with conclusion selected). Queue: 730 rules.
6200 rules inserted. Base: 3302 rules (206 with conclusion selected). Queue: 735 rules.
6400 rules inserted. Base: 3336 rules (210 with conclusion selected). Queue: 773 rules.
6600 rules inserted. Base: 3430 rules (210 with conclusion selected). Queue: 783 rules.
6800 rules inserted. Base: 3547 rules (210 with conclusion selected). Queue: 792 rules.
7000 rules inserted. Base: 3643 rules (211 with conclusion selected). Queue: 815 rules.
7200 rules inserted. Base: 3698 rules (216 with conclusion selected). Queue: 851 rules.
7400 rules inserted. Base: 3780 rules (216 with conclusion selected). Queue: 862 rules.
7600 rules inserted. Base: 3838 rules (216 with conclusion selected). Queue: 859 rules.
7800 rules inserted. Base: 3892 rules (219 with conclusion selected). Queue: 923 rules.
8000 rules inserted. Base: 3948 rules (219 with conclusion selected). Queue: 879 rules.
8200 rules inserted. Base: 3994 rules (219 with conclusion selected). Queue: 806 rules.
8400 rules inserted. Base: 4077 rules (219 with conclusion selected). Queue: 808 rules.
8600 rules inserted. Base: 4104 rules (219 with conclusion selected). Queue: 781 rules.
8800 rules inserted. Base: 4168 rules (219 with conclusion selected). Queue: 752 rules.
9000 rules inserted. Base: 4222 rules (223 with conclusion selected). Queue: 678 rules.
9200 rules inserted. Base: 4240 rules (223 with conclusion selected). Queue: 635 rules.
9400 rules inserted. Base: 4292 rules (223 with conclusion selected). Queue: 595 rules.
9600 rules inserted. Base: 4270 rules (227 with conclusion selected). Queue: 564 rules.
9800 rules inserted. Base: 4281 rules (227 with conclusion selected). Queue: 499 rules.
10000 rules inserted. Base: 4301 rules (227 with conclusion selected). Queue: 459 rules.
10200 rules inserted. Base: 4300 rules (228 with conclusion selected). Queue: 379 rules.
10400 rules inserted. Base: 4347 rules (228 with conclusion selected). Queue: 291 rules.
10600 rules inserted. Base: 4365 rules (244 with conclusion selected). Queue: 207 rules.
10800 rules inserted. Base: 4353 rules (259 with conclusion selected). Queue: 209 rules.
11000 rules inserted. Base: 4363 rules (275 with conclusion selected). Queue: 246 rules.
11200 rules inserted. Base: 4420 rules (282 with conclusion selected). Queue: 232 rules.
11400 rules inserted. Base: 4498 rules (297 with conclusion selected). Queue: 300 rules.
11600 rules inserted. Base: 4545 rules (312 with conclusion selected). Queue: 407 rules.
11800 rules inserted. Base: 4650 rules (319 with conclusion selected). Queue: 407 rules.
12000 rules inserted. Base: 4657 rules (329 with conclusion selected). Queue: 332 rules.
12200 rules inserted. Base: 4673 rules (334 with conclusion selected). Queue: 355 rules.
12400 rules inserted. Base: 4799 rules (337 with conclusion selected). Queue: 368 rules.
12600 rules inserted. Base: 4903 rules (343 with conclusion selected). Queue: 478 rules.
12800 rules inserted. Base: 4977 rules (345 with conclusion selected). Queue: 467 rules.
13000 rules inserted. Base: 5074 rules (349 with conclusion selected). Queue: 445 rules.
13200 rules inserted. Base: 5197 rules (354 with conclusion selected). Queue: 465 rules.
13400 rules inserted. Base: 5276 rules (355 with conclusion selected). Queue: 441 rules.
13600 rules inserted. Base: 5384 rules (364 with conclusion selected). Queue: 630 rules.
13800 rules inserted. Base: 5434 rules (364 with conclusion selected). Queue: 605 rules.
14000 rules inserted. Base: 5520 rules (366 with conclusion selected). Queue: 640 rules.
14200 rules inserted. Base: 5561 rules (368 with conclusion selected). Queue: 675 rules.
14400 rules inserted. Base: 5596 rules (370 with conclusion selected). Queue: 656 rules.
14600 rules inserted. Base: 5679 rules (370 with conclusion selected). Queue: 642 rules.
14800 rules inserted. Base: 5777 rules (370 with conclusion selected). Queue: 642 rules.
15000 rules inserted. Base: 5892 rules (370 with conclusion selected). Queue: 526 rules.
15200 rules inserted. Base: 5978 rules (370 with conclusion selected). Queue: 450 rules.
15400 rules inserted. Base: 6059 rules (370 with conclusion selected). Queue: 384 rules.
15600 rules inserted. Base: 6103 rules (370 with conclusion selected). Queue: 308 rules.
15800 rules inserted. Base: 6226 rules (372 with conclusion selected). Queue: 177 rules.
16000 rules inserted. Base: 6358 rules (372 with conclusion selected). Queue: 45 rules.
16200 rules inserted. Base: 6447 rules (391 with conclusion selected). Queue: 35 rules.
Starting query inj-event(userCompletesProtocolFull(m_62,m_63,m_64,m_65,m_66,m_67,m_68,m_69,m_70,m_71,m_72,m_73)) ==> inj-event(issuerSendsLastMessageToUser(m_62,m_63,m_64,m_65,m_66)) && inj-event(podSendsLastMessageToUser(m_67,m_68,m_69,m_70,m_71,m_72,m_73))
goal reachable: @sid Ôëá @sid_1 && begin(podSendsLastMessageToUser((tag6,bitG(g(x_6))),(bitG(g(y_4)),enc((tag7,sign((g(y_4),g(x_6)),skp[])),GtoSymK(exp(g(y_4),x_6)))),enc((tag8,sign((g(x_6),g(y_4)),sku[])),GtoSymK(exp(g(y_4),x_6))),enc((tag9,uri),GtoSymK(exp(g(y_4),x_6))),enc((tag10,(u[],i[],attr),nc_6),GtoSymK(exp(g(y_4),x_6))),enc((tag11,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),scope,solid),sku[]),nc_6),GtoSymK(exp(g(y_4),x_6))),enc((tag12,sign(accesstoken_6,skp[])),GtoSymK(exp(g(y_4),x_6)))),@occ368_1) && begin(podSendsLastMessageToUser((tag6,bitG(g(x_7))),(bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp[])),GtoSymK(exp(g(y_5),x_7)))),enc((tag8,sign((g(x_7),g(y_5)),sku[])),GtoSymK(exp(g(y_5),x_7))),enc((tag9,uri),GtoSymK(exp(g(y_5),x_7))),enc((tag10,(u[],i[],attr),nc_7),GtoSymK(exp(g(y_5),x_7))),enc((tag11,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),scope,solid),sku[]),nc_7),GtoSymK(exp(g(y_5),x_7))),enc((tag12,sign(accesstoken_7,skp[])),GtoSymK(exp(g(y_5),x_7)))),@occ368_2) && begin(issuerSendsLastMessageToUser((tag1,bitG(g(x_8))),(bitG(g(y_6)),enc((tag2,sign((g(y_6),g(x_8)),ski[])),GtoSymK(exp(g(y_6),x_8)))),enc((tag3,sign((g(x_8),g(y_6)),sku[])),GtoSymK(exp(g(y_6),x_8))),enc((tag4,u[],attr,password[]),GtoSymK(exp(g(y_6),x_8))),enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(y_6),x_8)))),@occ47_2) -> end(@occ163_1,userCompletesProtocolFull((tag1,bitG(g(x_8))),(bitG(g(y_6)),enc((tag2,sign((g(y_6),g(x_8)),ski[])),GtoSymK(exp(g(y_6),x_8)))),enc((tag3,sign((g(x_8),g(y_6)),sku[])),GtoSymK(exp(g(y_6),x_8))),enc((tag4,u[],attr,password[]),GtoSymK(exp(g(y_6),x_8))),enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(y_6),x_8))),(tag6,bitG(g(x_6))),(bitG(g(y_4)),enc((tag7,sign((g(y_4),g(x_6)),skp[])),GtoSymK(exp(g(y_4),x_6)))),enc((tag8,sign((g(x_6),g(y_4)),sku[])),GtoSymK(exp(g(y_4),x_6))),enc((tag9,uri),GtoSymK(exp(g(y_4),x_6))),enc((tag10,(u[],i[],attr),nc_6),GtoSymK(exp(g(y_4),x_6))),enc((tag11,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),scope,solid),sku[]),nc_6),GtoSymK(exp(g(y_4),x_6))),enc((tag12,sign(accesstoken_6,skp[])),GtoSymK(exp(g(y_4),x_6))))) && end(@occ163_2,userCompletesProtocolFull((tag1,bitG(g(x_8))),(bitG(g(y_6)),enc((tag2,sign((g(y_6),g(x_8)),ski[])),GtoSymK(exp(g(y_6),x_8)))),enc((tag3,sign((g(x_8),g(y_6)),sku[])),GtoSymK(exp(g(y_6),x_8))),enc((tag4,u[],attr,password[]),GtoSymK(exp(g(y_6),x_8))),enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(y_6),x_8))),(tag6,bitG(g(x_7))),(bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp[])),GtoSymK(exp(g(y_5),x_7)))),enc((tag8,sign((g(x_7),g(y_5)),sku[])),GtoSymK(exp(g(y_5),x_7))),enc((tag9,uri),GtoSymK(exp(g(y_5),x_7))),enc((tag10,(u[],i[],attr),nc_7),GtoSymK(exp(g(y_5),x_7))),enc((tag11,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),scope,solid),sku[]),nc_7),GtoSymK(exp(g(y_5),x_7))),enc((tag12,sign(accesstoken_7,skp[])),GtoSymK(exp(g(y_5),x_7)))))
Abbreviations:
x_8 = x[e_1 = i[],!1 = @sid_2]
y_6 = y[m_1 = (tag1,bitG(g(x_8))),e = u[],!1 = @sid_3]
x_6 = x_1[e_2 = p[],!2 = @sid,m_14 = enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(y_6),x_8))),m_11 = (bitG(g(y_6)),enc((tag2,sign((g(y_6),g(x_8)),ski[])),GtoSymK(exp(g(y_6),x_8)))),e_1 = i[],!1 = @sid_2]
y_4 = y_2[m_48 = (tag6,bitG(g(x_6))),e_4 = u[],!1 = @sid_4]
nc_6 = nc_4[m_51 = enc((tag9,uri),GtoSymK(exp(g(y_4),x_6))),m_50 = enc((tag8,sign((g(x_6),g(y_4)),sku[])),GtoSymK(exp(g(y_4),x_6))),m_48 = (tag6,bitG(g(x_6))),e_4 = u[],!1 = @sid_4]
accesstoken_6 = accesstoken_4[m_53 = enc((tag11,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),scope,solid),sku[]),nc_6),GtoSymK(exp(g(y_4),x_6))),m_51 = enc((tag9,uri),GtoSymK(exp(g(y_4),x_6))),m_50 = enc((tag8,sign((g(x_6),g(y_4)),sku[])),GtoSymK(exp(g(y_4),x_6))),m_48 = (tag6,bitG(g(x_6))),e_4 = u[],!1 = @sid_4]
@occ163_1 = @occ163[m_21 = enc((tag12,sign(accesstoken_6,skp[])),GtoSymK(exp(g(y_4),x_6))),m_19 = enc((tag10,(u[],i[],attr),nc_6),GtoSymK(exp(g(y_4),x_6))),m_16 = (bitG(g(y_4)),enc((tag7,sign((g(y_4),g(x_6)),skp[])),GtoSymK(exp(g(y_4),x_6)))),e_2 = p[],!2 = @sid,m_14 = enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(y_6),x_8))),m_11 = (bitG(g(y_6)),enc((tag2,sign((g(y_6),g(x_8)),ski[])),GtoSymK(exp(g(y_6),x_8)))),e_1 = i[],!1 = @sid_2]
x_7 = x_1[e_2 = p[],!2 = @sid_1,m_14 = enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(y_6),x_8))),m_11 = (bitG(g(y_6)),enc((tag2,sign((g(y_6),g(x_8)),ski[])),GtoSymK(exp(g(y_6),x_8)))),e_1 = i[],!1 = @sid_2]
y_5 = y_2[m_48 = (tag6,bitG(g(x_7))),e_4 = u[],!1 = @sid_5]
nc_7 = nc_4[m_51 = enc((tag9,uri),GtoSymK(exp(g(y_5),x_7))),m_50 = enc((tag8,sign((g(x_7),g(y_5)),sku[])),GtoSymK(exp(g(y_5),x_7))),m_48 = (tag6,bitG(g(x_7))),e_4 = u[],!1 = @sid_5]
accesstoken_7 = accesstoken_4[m_53 = enc((tag11,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),scope,solid),sku[]),nc_7),GtoSymK(exp(g(y_5),x_7))),m_51 = enc((tag9,uri),GtoSymK(exp(g(y_5),x_7))),m_50 = enc((tag8,sign((g(x_7),g(y_5)),sku[])),GtoSymK(exp(g(y_5),x_7))),m_48 = (tag6,bitG(g(x_7))),e_4 = u[],!1 = @sid_5]
@occ163_2 = @occ163[m_21 = enc((tag12,sign(accesstoken_7,skp[])),GtoSymK(exp(g(y_5),x_7))),m_19 = enc((tag10,(u[],i[],attr),nc_7),GtoSymK(exp(g(y_5),x_7))),m_16 = (bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp[])),GtoSymK(exp(g(y_5),x_7)))),e_2 = p[],!2 = @sid_1,m_14 = enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(y_6),x_8))),m_11 = (bitG(g(y_6)),enc((tag2,sign((g(y_6),g(x_8)),ski[])),GtoSymK(exp(g(y_6),x_8)))),e_1 = i[],!1 = @sid_2]
@occ368_1 = @occ368[m_53 = enc((tag11,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),scope,solid),sku[]),nc_6),GtoSymK(exp(g(y_4),x_6))),m_51 = enc((tag9,uri),GtoSymK(exp(g(y_4),x_6))),m_50 = enc((tag8,sign((g(x_6),g(y_4)),sku[])),GtoSymK(exp(g(y_4),x_6))),m_48 = (tag6,bitG(g(x_6))),e_4 = u[],!1 = @sid_4]
@occ368_2 = @occ368[m_53 = enc((tag11,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),scope,solid),sku[]),nc_7),GtoSymK(exp(g(y_5),x_7))),m_51 = enc((tag9,uri),GtoSymK(exp(g(y_5),x_7))),m_50 = enc((tag8,sign((g(x_7),g(y_5)),sku[])),GtoSymK(exp(g(y_5),x_7))),m_48 = (tag6,bitG(g(x_7))),e_4 = u[],!1 = @sid_5]
@occ47_2 = @occ47_1[m_4 = enc((tag4,u[],attr,password[]),GtoSymK(exp(g(y_6),x_8))),m_3 = enc((tag3,sign((g(x_8),g(y_6)),sku[])),GtoSymK(exp(g(y_6),x_8))),m_1 = (tag1,bitG(g(x_8))),e = u[],!1 = @sid_3]

Derivation:
Abbreviations:
x_6 = x[e_1 = i[],!1 = @sid]
y_4 = y[m_1 = (tag1,bitG(g(x_6))),e = u[],!1 = @sid_1]
x_7 = x_1[e_2 = p[],!2 = @sid_2,m_14 = enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(y_4),x_6))),m_11 = (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(y_4),x_6)))),e_1 = i[],!1 = @sid]
y_5 = y_2[m_48 = (tag6,bitG(g(x_7))),e_4 = u[],!1 = @sid_3]
nc_6 = nc_4[m_51 = enc((tag9,uri),GtoSymK(exp(g(y_5),x_7))),m_50 = enc((tag8,sign((g(x_7),g(y_5)),sku[])),GtoSymK(exp(g(y_5),x_7))),m_48 = (tag6,bitG(g(x_7))),e_4 = u[],!1 = @sid_3]
accesstoken_6 = accesstoken_4[m_53 = enc((tag11,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),scope,solid),sku[]),nc_6),GtoSymK(exp(g(y_5),x_7))),m_51 = enc((tag9,uri),GtoSymK(exp(g(y_5),x_7))),m_50 = enc((tag8,sign((g(x_7),g(y_5)),sku[])),GtoSymK(exp(g(y_5),x_7))),m_48 = (tag6,bitG(g(x_7))),e_4 = u[],!1 = @sid_3]
@occ163_1 = @occ163[m_21 = enc((tag12,sign(accesstoken_6,skp[])),GtoSymK(exp(g(y_5),x_7))),m_19 = enc((tag10,(u[],i[],attr),nc_6),GtoSymK(exp(g(y_5),x_7))),m_16 = (bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp[])),GtoSymK(exp(g(y_5),x_7)))),e_2 = p[],!2 = @sid_2,m_14 = enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(y_4),x_6))),m_11 = (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(y_4),x_6)))),e_1 = i[],!1 = @sid]
x_8 = x_1[e_2 = p[],!2 = @sid_4,m_14 = enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(y_4),x_6))),m_11 = (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(y_4),x_6)))),e_1 = i[],!1 = @sid]
y_6 = y_2[m_48 = (tag6,bitG(g(x_8))),e_4 = u[],!1 = @sid_5]
nc_7 = nc_4[m_51 = enc((tag9,uri),GtoSymK(exp(g(y_6),x_8))),m_50 = enc((tag8,sign((g(x_8),g(y_6)),sku[])),GtoSymK(exp(g(y_6),x_8))),m_48 = (tag6,bitG(g(x_8))),e_4 = u[],!1 = @sid_5]
accesstoken_7 = accesstoken_4[m_53 = enc((tag11,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),scope,solid),sku[]),nc_7),GtoSymK(exp(g(y_6),x_8))),m_51 = enc((tag9,uri),GtoSymK(exp(g(y_6),x_8))),m_50 = enc((tag8,sign((g(x_8),g(y_6)),sku[])),GtoSymK(exp(g(y_6),x_8))),m_48 = (tag6,bitG(g(x_8))),e_4 = u[],!1 = @sid_5]
@occ163_2 = @occ163[m_21 = enc((tag12,sign(accesstoken_7,skp[])),GtoSymK(exp(g(y_6),x_8))),m_19 = enc((tag10,(u[],i[],attr),nc_7),GtoSymK(exp(g(y_6),x_8))),m_16 = (bitG(g(y_6)),enc((tag7,sign((g(y_6),g(x_8)),skp[])),GtoSymK(exp(g(y_6),x_8)))),e_2 = p[],!2 = @sid_4,m_14 = enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(y_4),x_6))),m_11 = (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(y_4),x_6)))),e_1 = i[],!1 = @sid]
@occ368_1 = @occ368[m_53 = enc((tag11,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),scope,solid),sku[]),nc_6),GtoSymK(exp(g(y_5),x_7))),m_51 = enc((tag9,uri),GtoSymK(exp(g(y_5),x_7))),m_50 = enc((tag8,sign((g(x_7),g(y_5)),sku[])),GtoSymK(exp(g(y_5),x_7))),m_48 = (tag6,bitG(g(x_7))),e_4 = u[],!1 = @sid_3]
@occ368_2 = @occ368[m_53 = enc((tag11,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),scope,solid),sku[]),nc_7),GtoSymK(exp(g(y_6),x_8))),m_51 = enc((tag9,uri),GtoSymK(exp(g(y_6),x_8))),m_50 = enc((tag8,sign((g(x_8),g(y_6)),sku[])),GtoSymK(exp(g(y_6),x_8))),m_48 = (tag6,bitG(g(x_8))),e_4 = u[],!1 = @sid_5]
@occ47_2 = @occ47_1[m_4 = enc((tag4,u[],attr,password[]),GtoSymK(exp(g(y_4),x_6))),m_3 = enc((tag3,sign((g(x_6),g(y_4)),sku[])),GtoSymK(exp(g(y_4),x_6))),m_1 = (tag1,bitG(g(x_6))),e = u[],!1 = @sid_1]

1. The message i[] may be sent to the attacker at output {4}.
attacker(i[]).

2. The message u[] may be sent to the attacker at output {5}.
attacker(u[]).

3. The message i[] that the attacker may have by 1 may be received at input {94}.
So the message (tag1,bitG(g(x_6))) may be sent to the attacker at output {100}.
attacker((tag1,bitG(g(x_6)))).

4. By 3, the attacker may know (tag1,bitG(g(x_6))).
Using the function 2-proj-2-tuple the attacker may obtain bitG(g(x_6)).
attacker(bitG(g(x_6))).

5. Using the function tag1 the attacker may obtain tag1.
attacker(tag1).

6. By 5, the attacker may know tag1.
By 4, the attacker may know bitG(g(x_6)).
Using the function 2-tuple the attacker may obtain (tag1,bitG(g(x_6))).
attacker((tag1,bitG(g(x_6)))).

7. The message u[] that the attacker may have by 2 may be received at input {22}.
The message (tag1,bitG(g(x_6))) that the attacker may have by 6 may be received at input {25}.
So the message (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(y_4),x_6)))) may be sent to the attacker at output {33}.
attacker((bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(y_4),x_6))))).

8. By 7, the attacker may know (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(y_4),x_6)))).
Using the function 2-proj-2-tuple the attacker may obtain enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(y_4),x_6))).
attacker(enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(y_4),x_6)))).

9. The message u[] that the attacker may have by 2 may be received at input {22}.
The message (tag1,bitG(g(x_6))) that the attacker may have by 6 may be received at input {25}.
So the message (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4)))) may be sent to the attacker at output {33}.
attacker((bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4))))).

10. By 9, the attacker may know (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(x_6),y_4)))).
Using the function 1-proj-2-tuple the attacker may obtain bitG(g(y_4)).
attacker(bitG(g(y_4))).

11. By 10, the attacker may know bitG(g(y_4)).
By 8, the attacker may know enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(y_4),x_6))).
Using the function 2-tuple the attacker may obtain (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(y_4),x_6)))).
attacker((bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(y_4),x_6))))).

12. The message i[] that the attacker may have by 1 may be received at input {94}.
The message (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(y_4),x_6)))) that the attacker may have by 11 may be received at input {101}.
So the message enc((tag3,sign((g(x_6),g(y_4)),sku[])),GtoSymK(exp(g(y_4),x_6))) may be sent to the attacker at output {109}.
attacker(enc((tag3,sign((g(x_6),g(y_4)),sku[])),GtoSymK(exp(g(y_4),x_6)))).

13. The message i[] that the attacker may have by 1 may be received at input {94}.
The message (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(y_4),x_6)))) that the attacker may have by 11 may be received at input {101}.
So the message enc((tag4,u[],attr,password[]),GtoSymK(exp(g(y_4),x_6))) may be sent to the attacker at output {112}.
attacker(enc((tag4,u[],attr,password[]),GtoSymK(exp(g(y_4),x_6)))).

14. The message u[] that the attacker may have by 2 may be received at input {22}.
The message (tag1,bitG(g(x_6))) that the attacker may have by 6 may be received at input {25}.
The message enc((tag3,sign((g(x_6),g(y_4)),sku[])),GtoSymK(exp(g(y_4),x_6))) that the attacker may have by 12 may be received at input {34}.
The message enc((tag4,u[],attr,password[]),GtoSymK(exp(g(y_4),x_6))) that the attacker may have by 13 may be received at input {38}.
The event issuerSendsLastMessageToUser((tag1,bitG(g(x_6))),(bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(y_4),x_6)))),enc((tag3,sign((g(x_6),g(y_4)),sku[])),GtoSymK(exp(g(y_4),x_6))),enc((tag4,u[],attr,password[]),GtoSymK(exp(g(y_4),x_6))),enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(y_4),x_6)))) (with occurrence name @occ47_2) may be executed at {47}.
So the message enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(y_4),x_6))) may be sent to the attacker at output {48}.
attacker(enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(y_4),x_6)))).

15. The message p[] may be sent to the attacker at output {6}.
attacker(p[]).

16. The message i[] that the attacker may have by 1 may be received at input {94}.
The message (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(y_4),x_6)))) that the attacker may have by 11 may be received at input {101}.
The message enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(y_4),x_6))) that the attacker may have by 14 may be received at input {113}.
The message p[] that the attacker may have by 15 may be received at input {125}.
So the message (tag6,bitG(g(x_8))) may be sent to the attacker at output {131}.
attacker((tag6,bitG(g(x_8)))).

17. By 16, the attacker may know (tag6,bitG(g(x_8))).
Using the function 2-proj-2-tuple the attacker may obtain bitG(g(x_8)).
attacker(bitG(g(x_8))).

18. Using the function tag6 the attacker may obtain tag6.
attacker(tag6).

19. By 18, the attacker may know tag6.
By 17, the attacker may know bitG(g(x_8)).
Using the function 2-tuple the attacker may obtain (tag6,bitG(g(x_8))).
attacker((tag6,bitG(g(x_8)))).

20. The message u[] that the attacker may have by 2 may be received at input {330}.
The message (tag6,bitG(g(x_8))) that the attacker may have by 19 may be received at input {333}.
So the message (bitG(g(y_6)),enc((tag7,sign((g(y_6),g(x_8)),skp[])),GtoSymK(exp(g(y_6),x_8)))) may be sent to the attacker at output {341}.
attacker((bitG(g(y_6)),enc((tag7,sign((g(y_6),g(x_8)),skp[])),GtoSymK(exp(g(y_6),x_8))))).

21. By 20, the attacker may know (bitG(g(y_6)),enc((tag7,sign((g(y_6),g(x_8)),skp[])),GtoSymK(exp(g(y_6),x_8)))).
Using the function 2-proj-2-tuple the attacker may obtain enc((tag7,sign((g(y_6),g(x_8)),skp[])),GtoSymK(exp(g(y_6),x_8))).
attacker(enc((tag7,sign((g(y_6),g(x_8)),skp[])),GtoSymK(exp(g(y_6),x_8)))).

22. The message u[] that the attacker may have by 2 may be received at input {330}.
The message (tag6,bitG(g(x_8))) that the attacker may have by 19 may be received at input {333}.
So the message (bitG(g(y_6)),enc((tag7,sign((g(y_6),g(x_8)),skp[])),GtoSymK(exp(g(x_8),y_6)))) may be sent to the attacker at output {341}.
attacker((bitG(g(y_6)),enc((tag7,sign((g(y_6),g(x_8)),skp[])),GtoSymK(exp(g(x_8),y_6))))).

23. By 22, the attacker may know (bitG(g(y_6)),enc((tag7,sign((g(y_6),g(x_8)),skp[])),GtoSymK(exp(g(x_8),y_6)))).
Using the function 1-proj-2-tuple the attacker may obtain bitG(g(y_6)).
attacker(bitG(g(y_6))).

24. By 23, the attacker may know bitG(g(y_6)).
By 21, the attacker may know enc((tag7,sign((g(y_6),g(x_8)),skp[])),GtoSymK(exp(g(y_6),x_8))).
Using the function 2-tuple the attacker may obtain (bitG(g(y_6)),enc((tag7,sign((g(y_6),g(x_8)),skp[])),GtoSymK(exp(g(y_6),x_8)))).
attacker((bitG(g(y_6)),enc((tag7,sign((g(y_6),g(x_8)),skp[])),GtoSymK(exp(g(y_6),x_8))))).

25. The message i[] that the attacker may have by 1 may be received at input {94}.
The message (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(y_4),x_6)))) that the attacker may have by 11 may be received at input {101}.
The message enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(y_4),x_6))) that the attacker may have by 14 may be received at input {113}.
The message p[] that the attacker may have by 15 may be received at input {125}.
The message (bitG(g(y_6)),enc((tag7,sign((g(y_6),g(x_8)),skp[])),GtoSymK(exp(g(y_6),x_8)))) that the attacker may have by 24 may be received at input {132}.
So the message enc((tag8,sign((g(x_8),g(y_6)),sku[])),GtoSymK(exp(g(y_6),x_8))) may be sent to the attacker at output {140}.
attacker(enc((tag8,sign((g(x_8),g(y_6)),sku[])),GtoSymK(exp(g(y_6),x_8)))).

26. The message i[] that the attacker may have by 1 may be received at input {94}.
The message (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(y_4),x_6)))) that the attacker may have by 11 may be received at input {101}.
The message enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(y_4),x_6))) that the attacker may have by 14 may be received at input {113}.
The message p[] that the attacker may have by 15 may be received at input {125}.
The message (bitG(g(y_6)),enc((tag7,sign((g(y_6),g(x_8)),skp[])),GtoSymK(exp(g(y_6),x_8)))) that the attacker may have by 24 may be received at input {132}.
So the message enc((tag9,uri),GtoSymK(exp(g(y_6),x_8))) may be sent to the attacker at output {142}.
attacker(enc((tag9,uri),GtoSymK(exp(g(y_6),x_8)))).

27. The message u[] that the attacker may have by 2 may be received at input {330}.
The message (tag6,bitG(g(x_8))) that the attacker may have by 19 may be received at input {333}.
The message enc((tag8,sign((g(x_8),g(y_6)),sku[])),GtoSymK(exp(g(y_6),x_8))) that the attacker may have by 25 may be received at input {342}.
The message enc((tag9,uri),GtoSymK(exp(g(y_6),x_8))) that the attacker may have by 26 may be received at input {346}.
So the message enc((tag10,(u[],i[],attr),nc_7),GtoSymK(exp(g(y_6),x_8))) may be sent to the attacker at output {353}.
attacker(enc((tag10,(u[],i[],attr),nc_7),GtoSymK(exp(g(y_6),x_8)))).

28. The message i[] that the attacker may have by 1 may be received at input {94}.
The message (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(y_4),x_6)))) that the attacker may have by 11 may be received at input {101}.
The message enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(y_4),x_6))) that the attacker may have by 14 may be received at input {113}.
The message p[] that the attacker may have by 15 may be received at input {125}.
The message (bitG(g(y_6)),enc((tag7,sign((g(y_6),g(x_8)),skp[])),GtoSymK(exp(g(y_6),x_8)))) that the attacker may have by 24 may be received at input {132}.
The message enc((tag10,(u[],i[],attr),nc_7),GtoSymK(exp(g(y_6),x_8))) that the attacker may have by 27 may be received at input {143}.
So the message enc((tag11,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),scope,solid),sku[]),nc_7),GtoSymK(exp(g(y_6),x_8))) may be sent to the attacker at output {156}.
attacker(enc((tag11,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),scope,solid),sku[]),nc_7),GtoSymK(exp(g(y_6),x_8)))).

29. The message u[] that the attacker may have by 2 may be received at input {330}.
The message (tag6,bitG(g(x_8))) that the attacker may have by 19 may be received at input {333}.
The message enc((tag8,sign((g(x_8),g(y_6)),sku[])),GtoSymK(exp(g(y_6),x_8))) that the attacker may have by 25 may be received at input {342}.
The message enc((tag9,uri),GtoSymK(exp(g(y_6),x_8))) that the attacker may have by 26 may be received at input {346}.
The message enc((tag11,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),scope,solid),sku[]),nc_7),GtoSymK(exp(g(y_6),x_8))) that the attacker may have by 28 may be received at input {354}.
The event podSendsLastMessageToUser((tag6,bitG(g(x_8))),(bitG(g(y_6)),enc((tag7,sign((g(y_6),g(x_8)),skp[])),GtoSymK(exp(g(y_6),x_8)))),enc((tag8,sign((g(x_8),g(y_6)),sku[])),GtoSymK(exp(g(y_6),x_8))),enc((tag9,uri),GtoSymK(exp(g(y_6),x_8))),enc((tag10,(u[],i[],attr),nc_7),GtoSymK(exp(g(y_6),x_8))),enc((tag11,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),scope,solid),sku[]),nc_7),GtoSymK(exp(g(y_6),x_8))),enc((tag12,sign(accesstoken_7,skp[])),GtoSymK(exp(g(y_6),x_8)))) (with occurrence name @occ368_2) may be executed at {368}.
So the message enc((tag12,sign(accesstoken_7,skp[])),GtoSymK(exp(g(y_6),x_8))) may be sent to the attacker at output {369}.
attacker(enc((tag12,sign(accesstoken_7,skp[])),GtoSymK(exp(g(y_6),x_8)))).

30. The message i[] that the attacker may have by 1 may be received at input {94}.
The message (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(y_4),x_6)))) that the attacker may have by 11 may be received at input {101}.
The message enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(y_4),x_6))) that the attacker may have by 14 may be received at input {113}.
The message p[] that the attacker may have by 15 may be received at input {125}.
The message (bitG(g(y_6)),enc((tag7,sign((g(y_6),g(x_8)),skp[])),GtoSymK(exp(g(y_6),x_8)))) that the attacker may have by 24 may be received at input {132}.
The message enc((tag10,(u[],i[],attr),nc_7),GtoSymK(exp(g(y_6),x_8))) that the attacker may have by 27 may be received at input {143}.
The message enc((tag12,sign(accesstoken_7,skp[])),GtoSymK(exp(g(y_6),x_8))) that the attacker may have by 29 may be received at input {157}.
So event userCompletesProtocolFull((tag1,bitG(g(x_6))),(bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(y_4),x_6)))),enc((tag3,sign((g(x_6),g(y_4)),sku[])),GtoSymK(exp(g(y_4),x_6))),enc((tag4,u[],attr,password[]),GtoSymK(exp(g(y_4),x_6))),enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(y_4),x_6))),(tag6,bitG(g(x_8))),(bitG(g(y_6)),enc((tag7,sign((g(y_6),g(x_8)),skp[])),GtoSymK(exp(g(y_6),x_8)))),enc((tag8,sign((g(x_8),g(y_6)),sku[])),GtoSymK(exp(g(y_6),x_8))),enc((tag9,uri),GtoSymK(exp(g(y_6),x_8))),enc((tag10,(u[],i[],attr),nc_7),GtoSymK(exp(g(y_6),x_8))),enc((tag11,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),scope,solid),sku[]),nc_7),GtoSymK(exp(g(y_6),x_8))),enc((tag12,sign(accesstoken_7,skp[])),GtoSymK(exp(g(y_6),x_8)))) may be executed at {163} in session @sid_4.
end(@occ163_2,userCompletesProtocolFull((tag1,bitG(g(x_6))),(bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(y_4),x_6)))),enc((tag3,sign((g(x_6),g(y_4)),sku[])),GtoSymK(exp(g(y_4),x_6))),enc((tag4,u[],attr,password[]),GtoSymK(exp(g(y_4),x_6))),enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(y_4),x_6))),(tag6,bitG(g(x_8))),(bitG(g(y_6)),enc((tag7,sign((g(y_6),g(x_8)),skp[])),GtoSymK(exp(g(y_6),x_8)))),enc((tag8,sign((g(x_8),g(y_6)),sku[])),GtoSymK(exp(g(y_6),x_8))),enc((tag9,uri),GtoSymK(exp(g(y_6),x_8))),enc((tag10,(u[],i[],attr),nc_7),GtoSymK(exp(g(y_6),x_8))),enc((tag11,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),scope,solid),sku[]),nc_7),GtoSymK(exp(g(y_6),x_8))),enc((tag12,sign(accesstoken_7,skp[])),GtoSymK(exp(g(y_6),x_8))))).

31. By 30, end(@occ163_2,userCompletesProtocolFull((tag1,bitG(g(x_6))),(bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(y_4),x_6)))),enc((tag3,sign((g(x_6),g(y_4)),sku[])),GtoSymK(exp(g(y_4),x_6))),enc((tag4,u[],attr,password[]),GtoSymK(exp(g(y_4),x_6))),enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(y_4),x_6))),(tag6,bitG(g(x_8))),(bitG(g(y_6)),enc((tag7,sign((g(y_6),g(x_8)),skp[])),GtoSymK(exp(g(y_6),x_8)))),enc((tag8,sign((g(x_8),g(y_6)),sku[])),GtoSymK(exp(g(y_6),x_8))),enc((tag9,uri),GtoSymK(exp(g(y_6),x_8))),enc((tag10,(u[],i[],attr),nc_7),GtoSymK(exp(g(y_6),x_8))),enc((tag11,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),scope,solid),sku[]),nc_7),GtoSymK(exp(g(y_6),x_8))),enc((tag12,sign(accesstoken_7,skp[])),GtoSymK(exp(g(y_6),x_8))))).
The goal is reached, represented in the following fact:
end(@occ163_2,userCompletesProtocolFull((tag1,bitG(g(x_6))),(bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(y_4),x_6)))),enc((tag3,sign((g(x_6),g(y_4)),sku[])),GtoSymK(exp(g(y_4),x_6))),enc((tag4,u[],attr,password[]),GtoSymK(exp(g(y_4),x_6))),enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(y_4),x_6))),(tag6,bitG(g(x_8))),(bitG(g(y_6)),enc((tag7,sign((g(y_6),g(x_8)),skp[])),GtoSymK(exp(g(y_6),x_8)))),enc((tag8,sign((g(x_8),g(y_6)),sku[])),GtoSymK(exp(g(y_6),x_8))),enc((tag9,uri),GtoSymK(exp(g(y_6),x_8))),enc((tag10,(u[],i[],attr),nc_7),GtoSymK(exp(g(y_6),x_8))),enc((tag11,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),scope,solid),sku[]),nc_7),GtoSymK(exp(g(y_6),x_8))),enc((tag12,sign(accesstoken_7,skp[])),GtoSymK(exp(g(y_6),x_8))))).

32. The message i[] that the attacker may have by 1 may be received at input {94}.
The message (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(y_4),x_6)))) that the attacker may have by 11 may be received at input {101}.
The message enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(y_4),x_6))) that the attacker may have by 14 may be received at input {113}.
The message p[] that the attacker may have by 15 may be received at input {125}.
So the message (tag6,bitG(g(x_7))) may be sent to the attacker at output {131}.
attacker((tag6,bitG(g(x_7)))).

33. By 32, the attacker may know (tag6,bitG(g(x_7))).
Using the function 2-proj-2-tuple the attacker may obtain bitG(g(x_7)).
attacker(bitG(g(x_7))).

34. By 18, the attacker may know tag6.
By 33, the attacker may know bitG(g(x_7)).
Using the function 2-tuple the attacker may obtain (tag6,bitG(g(x_7))).
attacker((tag6,bitG(g(x_7)))).

35. The message u[] that the attacker may have by 2 may be received at input {330}.
The message (tag6,bitG(g(x_7))) that the attacker may have by 34 may be received at input {333}.
So the message (bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp[])),GtoSymK(exp(g(y_5),x_7)))) may be sent to the attacker at output {341}.
attacker((bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp[])),GtoSymK(exp(g(y_5),x_7))))).

36. By 35, the attacker may know (bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp[])),GtoSymK(exp(g(y_5),x_7)))).
Using the function 2-proj-2-tuple the attacker may obtain enc((tag7,sign((g(y_5),g(x_7)),skp[])),GtoSymK(exp(g(y_5),x_7))).
attacker(enc((tag7,sign((g(y_5),g(x_7)),skp[])),GtoSymK(exp(g(y_5),x_7)))).

37. The message u[] that the attacker may have by 2 may be received at input {330}.
The message (tag6,bitG(g(x_7))) that the attacker may have by 34 may be received at input {333}.
So the message (bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp[])),GtoSymK(exp(g(x_7),y_5)))) may be sent to the attacker at output {341}.
attacker((bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp[])),GtoSymK(exp(g(x_7),y_5))))).

38. By 37, the attacker may know (bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp[])),GtoSymK(exp(g(x_7),y_5)))).
Using the function 1-proj-2-tuple the attacker may obtain bitG(g(y_5)).
attacker(bitG(g(y_5))).

39. By 38, the attacker may know bitG(g(y_5)).
By 36, the attacker may know enc((tag7,sign((g(y_5),g(x_7)),skp[])),GtoSymK(exp(g(y_5),x_7))).
Using the function 2-tuple the attacker may obtain (bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp[])),GtoSymK(exp(g(y_5),x_7)))).
attacker((bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp[])),GtoSymK(exp(g(y_5),x_7))))).

40. The message i[] that the attacker may have by 1 may be received at input {94}.
The message (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(y_4),x_6)))) that the attacker may have by 11 may be received at input {101}.
The message enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(y_4),x_6))) that the attacker may have by 14 may be received at input {113}.
The message p[] that the attacker may have by 15 may be received at input {125}.
The message (bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp[])),GtoSymK(exp(g(y_5),x_7)))) that the attacker may have by 39 may be received at input {132}.
So the message enc((tag8,sign((g(x_7),g(y_5)),sku[])),GtoSymK(exp(g(y_5),x_7))) may be sent to the attacker at output {140}.
attacker(enc((tag8,sign((g(x_7),g(y_5)),sku[])),GtoSymK(exp(g(y_5),x_7)))).

41. The message i[] that the attacker may have by 1 may be received at input {94}.
The message (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(y_4),x_6)))) that the attacker may have by 11 may be received at input {101}.
The message enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(y_4),x_6))) that the attacker may have by 14 may be received at input {113}.
The message p[] that the attacker may have by 15 may be received at input {125}.
The message (bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp[])),GtoSymK(exp(g(y_5),x_7)))) that the attacker may have by 39 may be received at input {132}.
So the message enc((tag9,uri),GtoSymK(exp(g(y_5),x_7))) may be sent to the attacker at output {142}.
attacker(enc((tag9,uri),GtoSymK(exp(g(y_5),x_7)))).

42. The message u[] that the attacker may have by 2 may be received at input {330}.
The message (tag6,bitG(g(x_7))) that the attacker may have by 34 may be received at input {333}.
The message enc((tag8,sign((g(x_7),g(y_5)),sku[])),GtoSymK(exp(g(y_5),x_7))) that the attacker may have by 40 may be received at input {342}.
The message enc((tag9,uri),GtoSymK(exp(g(y_5),x_7))) that the attacker may have by 41 may be received at input {346}.
So the message enc((tag10,(u[],i[],attr),nc_6),GtoSymK(exp(g(y_5),x_7))) may be sent to the attacker at output {353}.
attacker(enc((tag10,(u[],i[],attr),nc_6),GtoSymK(exp(g(y_5),x_7)))).

43. The message i[] that the attacker may have by 1 may be received at input {94}.
The message (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(y_4),x_6)))) that the attacker may have by 11 may be received at input {101}.
The message enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(y_4),x_6))) that the attacker may have by 14 may be received at input {113}.
The message p[] that the attacker may have by 15 may be received at input {125}.
The message (bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp[])),GtoSymK(exp(g(y_5),x_7)))) that the attacker may have by 39 may be received at input {132}.
The message enc((tag10,(u[],i[],attr),nc_6),GtoSymK(exp(g(y_5),x_7))) that the attacker may have by 42 may be received at input {143}.
So the message enc((tag11,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),scope,solid),sku[]),nc_6),GtoSymK(exp(g(y_5),x_7))) may be sent to the attacker at output {156}.
attacker(enc((tag11,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),scope,solid),sku[]),nc_6),GtoSymK(exp(g(y_5),x_7)))).

44. The message u[] that the attacker may have by 2 may be received at input {330}.
The message (tag6,bitG(g(x_7))) that the attacker may have by 34 may be received at input {333}.
The message enc((tag8,sign((g(x_7),g(y_5)),sku[])),GtoSymK(exp(g(y_5),x_7))) that the attacker may have by 40 may be received at input {342}.
The message enc((tag9,uri),GtoSymK(exp(g(y_5),x_7))) that the attacker may have by 41 may be received at input {346}.
The message enc((tag11,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),scope,solid),sku[]),nc_6),GtoSymK(exp(g(y_5),x_7))) that the attacker may have by 43 may be received at input {354}.
The event podSendsLastMessageToUser((tag6,bitG(g(x_7))),(bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp[])),GtoSymK(exp(g(y_5),x_7)))),enc((tag8,sign((g(x_7),g(y_5)),sku[])),GtoSymK(exp(g(y_5),x_7))),enc((tag9,uri),GtoSymK(exp(g(y_5),x_7))),enc((tag10,(u[],i[],attr),nc_6),GtoSymK(exp(g(y_5),x_7))),enc((tag11,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),scope,solid),sku[]),nc_6),GtoSymK(exp(g(y_5),x_7))),enc((tag12,sign(accesstoken_6,skp[])),GtoSymK(exp(g(y_5),x_7)))) (with occurrence name @occ368_1) may be executed at {368}.
So the message enc((tag12,sign(accesstoken_6,skp[])),GtoSymK(exp(g(y_5),x_7))) may be sent to the attacker at output {369}.
attacker(enc((tag12,sign(accesstoken_6,skp[])),GtoSymK(exp(g(y_5),x_7)))).

45. The message i[] that the attacker may have by 1 may be received at input {94}.
The message (bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(y_4),x_6)))) that the attacker may have by 11 may be received at input {101}.
The message enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(y_4),x_6))) that the attacker may have by 14 may be received at input {113}.
The message p[] that the attacker may have by 15 may be received at input {125}.
The message (bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp[])),GtoSymK(exp(g(y_5),x_7)))) that the attacker may have by 39 may be received at input {132}.
The message enc((tag10,(u[],i[],attr),nc_6),GtoSymK(exp(g(y_5),x_7))) that the attacker may have by 42 may be received at input {143}.
The message enc((tag12,sign(accesstoken_6,skp[])),GtoSymK(exp(g(y_5),x_7))) that the attacker may have by 44 may be received at input {157}.
So event userCompletesProtocolFull((tag1,bitG(g(x_6))),(bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(y_4),x_6)))),enc((tag3,sign((g(x_6),g(y_4)),sku[])),GtoSymK(exp(g(y_4),x_6))),enc((tag4,u[],attr,password[]),GtoSymK(exp(g(y_4),x_6))),enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(y_4),x_6))),(tag6,bitG(g(x_7))),(bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp[])),GtoSymK(exp(g(y_5),x_7)))),enc((tag8,sign((g(x_7),g(y_5)),sku[])),GtoSymK(exp(g(y_5),x_7))),enc((tag9,uri),GtoSymK(exp(g(y_5),x_7))),enc((tag10,(u[],i[],attr),nc_6),GtoSymK(exp(g(y_5),x_7))),enc((tag11,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),scope,solid),sku[]),nc_6),GtoSymK(exp(g(y_5),x_7))),enc((tag12,sign(accesstoken_6,skp[])),GtoSymK(exp(g(y_5),x_7)))) may be executed at {163} in session @sid_2.
end(@occ163_1,userCompletesProtocolFull((tag1,bitG(g(x_6))),(bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(y_4),x_6)))),enc((tag3,sign((g(x_6),g(y_4)),sku[])),GtoSymK(exp(g(y_4),x_6))),enc((tag4,u[],attr,password[]),GtoSymK(exp(g(y_4),x_6))),enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(y_4),x_6))),(tag6,bitG(g(x_7))),(bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp[])),GtoSymK(exp(g(y_5),x_7)))),enc((tag8,sign((g(x_7),g(y_5)),sku[])),GtoSymK(exp(g(y_5),x_7))),enc((tag9,uri),GtoSymK(exp(g(y_5),x_7))),enc((tag10,(u[],i[],attr),nc_6),GtoSymK(exp(g(y_5),x_7))),enc((tag11,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),scope,solid),sku[]),nc_6),GtoSymK(exp(g(y_5),x_7))),enc((tag12,sign(accesstoken_6,skp[])),GtoSymK(exp(g(y_5),x_7))))).

46. By 45, end(@occ163_1,userCompletesProtocolFull((tag1,bitG(g(x_6))),(bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(y_4),x_6)))),enc((tag3,sign((g(x_6),g(y_4)),sku[])),GtoSymK(exp(g(y_4),x_6))),enc((tag4,u[],attr,password[]),GtoSymK(exp(g(y_4),x_6))),enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(y_4),x_6))),(tag6,bitG(g(x_7))),(bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp[])),GtoSymK(exp(g(y_5),x_7)))),enc((tag8,sign((g(x_7),g(y_5)),sku[])),GtoSymK(exp(g(y_5),x_7))),enc((tag9,uri),GtoSymK(exp(g(y_5),x_7))),enc((tag10,(u[],i[],attr),nc_6),GtoSymK(exp(g(y_5),x_7))),enc((tag11,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),scope,solid),sku[]),nc_6),GtoSymK(exp(g(y_5),x_7))),enc((tag12,sign(accesstoken_6,skp[])),GtoSymK(exp(g(y_5),x_7))))).
The goal is reached, represented in the following fact:
end(@occ163_1,userCompletesProtocolFull((tag1,bitG(g(x_6))),(bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(y_4),x_6)))),enc((tag3,sign((g(x_6),g(y_4)),sku[])),GtoSymK(exp(g(y_4),x_6))),enc((tag4,u[],attr,password[]),GtoSymK(exp(g(y_4),x_6))),enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(y_4),x_6))),(tag6,bitG(g(x_7))),(bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp[])),GtoSymK(exp(g(y_5),x_7)))),enc((tag8,sign((g(x_7),g(y_5)),sku[])),GtoSymK(exp(g(y_5),x_7))),enc((tag9,uri),GtoSymK(exp(g(y_5),x_7))),enc((tag10,(u[],i[],attr),nc_6),GtoSymK(exp(g(y_5),x_7))),enc((tag11,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),scope,solid),sku[]),nc_6),GtoSymK(exp(g(y_5),x_7))),enc((tag12,sign(accesstoken_6,skp[])),GtoSymK(exp(g(y_5),x_7))))).

47. By 46, end(@occ163_1,userCompletesProtocolFull((tag1,bitG(g(x_6))),(bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(y_4),x_6)))),enc((tag3,sign((g(x_6),g(y_4)),sku[])),GtoSymK(exp(g(y_4),x_6))),enc((tag4,u[],attr,password[]),GtoSymK(exp(g(y_4),x_6))),enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(y_4),x_6))),(tag6,bitG(g(x_7))),(bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp[])),GtoSymK(exp(g(y_5),x_7)))),enc((tag8,sign((g(x_7),g(y_5)),sku[])),GtoSymK(exp(g(y_5),x_7))),enc((tag9,uri),GtoSymK(exp(g(y_5),x_7))),enc((tag10,(u[],i[],attr),nc_6),GtoSymK(exp(g(y_5),x_7))),enc((tag11,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),scope,solid),sku[]),nc_6),GtoSymK(exp(g(y_5),x_7))),enc((tag12,sign(accesstoken_6,skp[])),GtoSymK(exp(g(y_5),x_7))))).
By 31, end(@occ163_2,userCompletesProtocolFull((tag1,bitG(g(x_6))),(bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(y_4),x_6)))),enc((tag3,sign((g(x_6),g(y_4)),sku[])),GtoSymK(exp(g(y_4),x_6))),enc((tag4,u[],attr,password[]),GtoSymK(exp(g(y_4),x_6))),enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(y_4),x_6))),(tag6,bitG(g(x_8))),(bitG(g(y_6)),enc((tag7,sign((g(y_6),g(x_8)),skp[])),GtoSymK(exp(g(y_6),x_8)))),enc((tag8,sign((g(x_8),g(y_6)),sku[])),GtoSymK(exp(g(y_6),x_8))),enc((tag9,uri),GtoSymK(exp(g(y_6),x_8))),enc((tag10,(u[],i[],attr),nc_7),GtoSymK(exp(g(y_6),x_8))),enc((tag11,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),scope,solid),sku[]),nc_7),GtoSymK(exp(g(y_6),x_8))),enc((tag12,sign(accesstoken_7,skp[])),GtoSymK(exp(g(y_6),x_8))))).
We have @occ163_1 Ôëá @occ163_2.
The goals for injectivity are reached, combined in the following fact:
end(@occ163_1,userCompletesProtocolFull((tag1,bitG(g(x_6))),(bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(y_4),x_6)))),enc((tag3,sign((g(x_6),g(y_4)),sku[])),GtoSymK(exp(g(y_4),x_6))),enc((tag4,u[],attr,password[]),GtoSymK(exp(g(y_4),x_6))),enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(y_4),x_6))),(tag6,bitG(g(x_7))),(bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp[])),GtoSymK(exp(g(y_5),x_7)))),enc((tag8,sign((g(x_7),g(y_5)),sku[])),GtoSymK(exp(g(y_5),x_7))),enc((tag9,uri),GtoSymK(exp(g(y_5),x_7))),enc((tag10,(u[],i[],attr),nc_6),GtoSymK(exp(g(y_5),x_7))),enc((tag11,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),scope,solid),sku[]),nc_6),GtoSymK(exp(g(y_5),x_7))),enc((tag12,sign(accesstoken_6,skp[])),GtoSymK(exp(g(y_5),x_7))))) && end(@occ163_2,userCompletesProtocolFull((tag1,bitG(g(x_6))),(bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski[])),GtoSymK(exp(g(y_4),x_6)))),enc((tag3,sign((g(x_6),g(y_4)),sku[])),GtoSymK(exp(g(y_4),x_6))),enc((tag4,u[],attr,password[]),GtoSymK(exp(g(y_4),x_6))),enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(y_4),x_6))),(tag6,bitG(g(x_8))),(bitG(g(y_6)),enc((tag7,sign((g(y_6),g(x_8)),skp[])),GtoSymK(exp(g(y_6),x_8)))),enc((tag8,sign((g(x_8),g(y_6)),sku[])),GtoSymK(exp(g(y_6),x_8))),enc((tag9,uri),GtoSymK(exp(g(y_6),x_8))),enc((tag10,(u[],i[],attr),nc_7),GtoSymK(exp(g(y_6),x_8))),enc((tag11,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),scope,solid),sku[]),nc_7),GtoSymK(exp(g(y_6),x_8))),enc((tag12,sign(accesstoken_7,skp[])),GtoSymK(exp(g(y_6),x_8))))).


A more detailed output of the traces is available with
  set traceDisplay = long.

new i: bitstring creating i_4 at {1}

new u: bitstring creating u_4 at {2}

new p: bitstring creating p_3 at {3}

out(c, ~M) with ~M = i_4 at {4}

out(c, ~M_1) with ~M_1 = u_4 at {5}

out(c, ~M_2) with ~M_2 = p_3 at {6}

new ski: SecretKey creating ski_2 at {7}

new sku: SecretKey creating sku_2 at {8}

new skp: SecretKey creating skp_2 at {9}

out(c, ~M_3) with ~M_3 = pk(ski_2) at {10}

out(c, ~M_4) with ~M_4 = pk(sku_2) at {11}

out(c, ~M_5) with ~M_5 = pk(skp_2) at {12}

new password: bitstring creating password_3 at {13}

in(c, ~M_1) with ~M_1 = u_4 at {22} in copy a

in(c, ~M) with ~M = i_4 at {94} in copy a_1

new x: exponent creating x_6 at {97} in copy a_1

out(c, (~M_6,~M_7)) with ~M_6 = tag1, ~M_7 = bitG(g(x_6)) at {100} in copy a_1

in(c, (tag1,~M_7)) with ~M_7 = bitG(g(x_6)) at {25} in copy a

new y: exponent creating y_4 at {29} in copy a

out(c, (~M_8,~M_9)) with ~M_8 = bitG(g(y_4)), ~M_9 = enc((tag2,sign((g(y_4),g(x_6)),ski_2)),GtoSymK(exp(g(x_6),y_4))) at {33} in copy a

in(c, (~M_8,~M_9)) with ~M_8 = bitG(g(y_4)), ~M_9 = enc((tag2,sign((g(y_4),g(x_6)),ski_2)),GtoSymK(exp(g(y_4),x_6))) at {101} in copy a_1

out(c, ~M_10) with ~M_10 = enc((tag3,sign((g(x_6),g(y_4)),sku_2)),GtoSymK(exp(g(y_4),x_6))) at {109} in copy a_1

event userSendsLastMessageToIssuer((tag1,bitG(g(x_6))),(bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski_2)),GtoSymK(exp(g(y_4),x_6)))),enc((tag3,sign((g(x_6),g(y_4)),sku_2)),GtoSymK(exp(g(y_4),x_6))),enc((tag4,u_4,attr,password_3),GtoSymK(exp(g(y_4),x_6)))) at {111} in copy a_1

out(c, ~M_11) with ~M_11 = enc((tag4,u_4,attr,password_3),GtoSymK(exp(g(y_4),x_6))) at {112} in copy a_1

in(c, ~M_10) with ~M_10 = enc((tag3,sign((g(x_6),g(y_4)),sku_2)),GtoSymK(exp(g(y_4),x_6))) at {34} in copy a

in(c, ~M_11) with ~M_11 = enc((tag4,u_4,attr,password_3),GtoSymK(exp(g(y_4),x_6))) at {38} in copy a

event issuerSendsLastMessageToUser((tag1,bitG(g(x_6))),(bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski_2)),GtoSymK(exp(g(x_6),y_4)))),enc((tag3,sign((g(x_6),g(y_4)),sku_2)),GtoSymK(exp(g(y_4),x_6))),enc((tag4,u_4,attr,password_3),GtoSymK(exp(g(y_4),x_6))),enc((tag5,sign((((u_4,i_4,attr),sign((u_4,i_4,attr),ski_2)),u_4),ski_2)),GtoSymK(exp(g(x_6),y_4)))) at {47} in copy a

out(c, ~M_12) with ~M_12 = enc((tag5,sign((((u_4,i_4,attr),sign((u_4,i_4,attr),ski_2)),u_4),ski_2)),GtoSymK(exp(g(x_6),y_4))) at {48} in copy a

out(c, ~M_13) with ~M_13 = check_reach_issuer at {50} in copy a

event issuerCompletesProtocol((tag1,bitG(g(x_6))),(bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski_2)),GtoSymK(exp(g(x_6),y_4)))),enc((tag3,sign((g(x_6),g(y_4)),sku_2)),GtoSymK(exp(g(y_4),x_6))),enc((tag4,u_4,attr,password_3),GtoSymK(exp(g(y_4),x_6)))) at {51} in copy a

in(c, ~M_12) with ~M_12 = enc((tag5,sign((((u_4,i_4,attr),sign((u_4,i_4,attr),ski_2)),u_4),ski_2)),GtoSymK(exp(g(y_4),x_6))) at {113} in copy a_1

out(c, ~M_14) with ~M_14 = check_reach_user at {205} in copy a_1

event userCompletesProtocol((tag1,bitG(g(x_6))),(bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski_2)),GtoSymK(exp(g(y_4),x_6)))),enc((tag3,sign((g(x_6),g(y_4)),sku_2)),GtoSymK(exp(g(y_4),x_6))),enc((tag4,u_4,attr,password_3),GtoSymK(exp(g(y_4),x_6))),enc((tag5,sign((((u_4,i_4,attr),sign((u_4,i_4,attr),ski_2)),u_4),ski_2)),GtoSymK(exp(g(y_4),x_6)))) at {206} in copy a_1

in(c, ~M_2) with ~M_2 = p_3 at {125} in copy a_1, a_2

new x_1: exponent creating x_7 at {128} in copy a_1, a_2

out(c, (~M_15,~M_16)) with ~M_15 = tag6, ~M_16 = bitG(g(x_7)) at {131} in copy a_1, a_2

in(c, ~M_2) with ~M_2 = p_3 at {125} in copy a_1, a_3

new x_1: exponent creating x_8 at {128} in copy a_1, a_3

out(c, (~M_17,~M_18)) with ~M_17 = tag6, ~M_18 = bitG(g(x_8)) at {131} in copy a_1, a_3

in(c, ~M_1) with ~M_1 = u_4 at {330} in copy a_4

in(c, (tag6,~M_16)) with ~M_16 = bitG(g(x_7)) at {333} in copy a_4

new y_2: exponent creating y_5 at {337} in copy a_4

out(c, (~M_19,~M_20)) with ~M_19 = bitG(g(y_5)), ~M_20 = enc((tag7,sign((g(y_5),g(x_7)),skp_2)),GtoSymK(exp(g(x_7),y_5))) at {341} in copy a_4

in(c, (~M_19,~M_20)) with ~M_19 = bitG(g(y_5)), ~M_20 = enc((tag7,sign((g(y_5),g(x_7)),skp_2)),GtoSymK(exp(g(y_5),x_7))) at {132} in copy a_1, a_2

out(c, ~M_21) with ~M_21 = enc((tag8,sign((g(x_7),g(y_5)),sku_2)),GtoSymK(exp(g(y_5),x_7))) at {140} in copy a_1, a_2

out(c, ~M_22) with ~M_22 = enc((tag9,uri),GtoSymK(exp(g(y_5),x_7))) at {142} in copy a_1, a_2

in(c, ~M_21) with ~M_21 = enc((tag8,sign((g(x_7),g(y_5)),sku_2)),GtoSymK(exp(g(y_5),x_7))) at {342} in copy a_4

in(c, ~M_22) with ~M_22 = enc((tag9,uri),GtoSymK(exp(g(y_5),x_7))) at {346} in copy a_4

new nc_4: bitstring creating nc_6 at {350} in copy a_4

out(c, ~M_23) with ~M_23 = enc((tag10,(u_4,i_4,attr),nc_6),GtoSymK(exp(g(x_7),y_5))) at {353} in copy a_4

in(c, ~M_23) with ~M_23 = enc((tag10,(u_4,i_4,attr),nc_6),GtoSymK(exp(g(y_5),x_7))) at {143} in copy a_1, a_2

event userSendsLastMessageToPod((tag6,bitG(g(x_7))),(bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp_2)),GtoSymK(exp(g(y_5),x_7)))),enc((tag8,sign((g(x_7),g(y_5)),sku_2)),GtoSymK(exp(g(y_5),x_7))),enc((tag9,uri),GtoSymK(exp(g(y_5),x_7))),enc((tag10,(u_4,i_4,attr),nc_6),GtoSymK(exp(g(y_5),x_7))),enc((tag11,sign((((u_4,i_4,attr),sign((u_4,i_4,attr),ski_2)),scope,solid),sku_2),nc_6),GtoSymK(exp(g(y_5),x_7)))) at {155} in copy a_1, a_2

out(c, ~M_24) with ~M_24 = enc((tag11,sign((((u_4,i_4,attr),sign((u_4,i_4,attr),ski_2)),scope,solid),sku_2),nc_6),GtoSymK(exp(g(y_5),x_7))) at {156} in copy a_1, a_2

in(c, ~M_24) with ~M_24 = enc((tag11,sign((((u_4,i_4,attr),sign((u_4,i_4,attr),ski_2)),scope,solid),sku_2),nc_6),GtoSymK(exp(g(y_5),x_7))) at {354} in copy a_4

new accesstoken_4: bitstring creating accesstoken_6 at {366} in copy a_4

event podSendsLastMessageToUser((tag6,bitG(g(x_7))),(bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp_2)),GtoSymK(exp(g(x_7),y_5)))),enc((tag8,sign((g(x_7),g(y_5)),sku_2)),GtoSymK(exp(g(y_5),x_7))),enc((tag9,uri),GtoSymK(exp(g(y_5),x_7))),enc((tag10,(u_4,i_4,attr),nc_6),GtoSymK(exp(g(x_7),y_5))),enc((tag11,sign((((u_4,i_4,attr),sign((u_4,i_4,attr),ski_2)),scope,solid),sku_2),nc_6),GtoSymK(exp(g(y_5),x_7))),enc((tag12,sign(accesstoken_6,skp_2)),GtoSymK(exp(g(x_7),y_5)))) at {368} in copy a_4

out(c, ~M_25) with ~M_25 = enc((tag12,sign(accesstoken_6,skp_2)),GtoSymK(exp(g(x_7),y_5))) at {369} in copy a_4

out(c, ~M_26) with ~M_26 = check_reach_pod at {371} in copy a_4

event podCompletesProtocol((tag6,bitG(g(x_7))),(bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp_2)),GtoSymK(exp(g(x_7),y_5)))),enc((tag8,sign((g(x_7),g(y_5)),sku_2)),GtoSymK(exp(g(y_5),x_7))),enc((tag9,uri),GtoSymK(exp(g(y_5),x_7))),enc((tag10,(u_4,i_4,attr),nc_6),GtoSymK(exp(g(x_7),y_5))),enc((tag11,sign((((u_4,i_4,attr),sign((u_4,i_4,attr),ski_2)),scope,solid),sku_2),nc_6),GtoSymK(exp(g(y_5),x_7)))) at {372} in copy a_4

in(c, ~M_25) with ~M_25 = enc((tag12,sign(accesstoken_6,skp_2)),GtoSymK(exp(g(y_5),x_7))) at {157} in copy a_1, a_2

out(c, ~M_27) with ~M_27 = check_reach_user_to_pod at {162} in copy a_1, a_2

event userCompletesProtocolFull((tag1,bitG(g(x_6))),(bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski_2)),GtoSymK(exp(g(y_4),x_6)))),enc((tag3,sign((g(x_6),g(y_4)),sku_2)),GtoSymK(exp(g(y_4),x_6))),enc((tag4,u_4,attr,password_3),GtoSymK(exp(g(y_4),x_6))),enc((tag5,sign((((u_4,i_4,attr),sign((u_4,i_4,attr),ski_2)),u_4),ski_2)),GtoSymK(exp(g(y_4),x_6))),(tag6,bitG(g(x_7))),(bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp_2)),GtoSymK(exp(g(y_5),x_7)))),enc((tag8,sign((g(x_7),g(y_5)),sku_2)),GtoSymK(exp(g(y_5),x_7))),enc((tag9,uri),GtoSymK(exp(g(y_5),x_7))),enc((tag10,(u_4,i_4,attr),nc_6),GtoSymK(exp(g(y_5),x_7))),enc((tag11,sign((((u_4,i_4,attr),sign((u_4,i_4,attr),ski_2)),scope,solid),sku_2),nc_6),GtoSymK(exp(g(y_5),x_7))),enc((tag12,sign(accesstoken_6,skp_2)),GtoSymK(exp(g(y_5),x_7)))) at {163} in copy a_1, a_2 (goal)

in(c, ~M_1) with ~M_1 = u_4 at {330} in copy a_5

in(c, (tag6,~M_18)) with ~M_18 = bitG(g(x_8)) at {333} in copy a_5

new y_2: exponent creating y_6 at {337} in copy a_5

out(c, (~M_28,~M_29)) with ~M_28 = bitG(g(y_6)), ~M_29 = enc((tag7,sign((g(y_6),g(x_8)),skp_2)),GtoSymK(exp(g(x_8),y_6))) at {341} in copy a_5

in(c, (~M_28,~M_29)) with ~M_28 = bitG(g(y_6)), ~M_29 = enc((tag7,sign((g(y_6),g(x_8)),skp_2)),GtoSymK(exp(g(y_6),x_8))) at {132} in copy a_1, a_3

out(c, ~M_30) with ~M_30 = enc((tag8,sign((g(x_8),g(y_6)),sku_2)),GtoSymK(exp(g(y_6),x_8))) at {140} in copy a_1, a_3

out(c, ~M_31) with ~M_31 = enc((tag9,uri),GtoSymK(exp(g(y_6),x_8))) at {142} in copy a_1, a_3

in(c, ~M_30) with ~M_30 = enc((tag8,sign((g(x_8),g(y_6)),sku_2)),GtoSymK(exp(g(y_6),x_8))) at {342} in copy a_5

in(c, ~M_31) with ~M_31 = enc((tag9,uri),GtoSymK(exp(g(y_6),x_8))) at {346} in copy a_5

new nc_4: bitstring creating nc_7 at {350} in copy a_5

out(c, ~M_32) with ~M_32 = enc((tag10,(u_4,i_4,attr),nc_7),GtoSymK(exp(g(x_8),y_6))) at {353} in copy a_5

in(c, ~M_32) with ~M_32 = enc((tag10,(u_4,i_4,attr),nc_7),GtoSymK(exp(g(y_6),x_8))) at {143} in copy a_1, a_3

event userSendsLastMessageToPod((tag6,bitG(g(x_8))),(bitG(g(y_6)),enc((tag7,sign((g(y_6),g(x_8)),skp_2)),GtoSymK(exp(g(y_6),x_8)))),enc((tag8,sign((g(x_8),g(y_6)),sku_2)),GtoSymK(exp(g(y_6),x_8))),enc((tag9,uri),GtoSymK(exp(g(y_6),x_8))),enc((tag10,(u_4,i_4,attr),nc_7),GtoSymK(exp(g(y_6),x_8))),enc((tag11,sign((((u_4,i_4,attr),sign((u_4,i_4,attr),ski_2)),scope,solid),sku_2),nc_7),GtoSymK(exp(g(y_6),x_8)))) at {155} in copy a_1, a_3

out(c, ~M_33) with ~M_33 = enc((tag11,sign((((u_4,i_4,attr),sign((u_4,i_4,attr),ski_2)),scope,solid),sku_2),nc_7),GtoSymK(exp(g(y_6),x_8))) at {156} in copy a_1, a_3

in(c, ~M_33) with ~M_33 = enc((tag11,sign((((u_4,i_4,attr),sign((u_4,i_4,attr),ski_2)),scope,solid),sku_2),nc_7),GtoSymK(exp(g(y_6),x_8))) at {354} in copy a_5

new accesstoken_4: bitstring creating accesstoken_7 at {366} in copy a_5

event podSendsLastMessageToUser((tag6,bitG(g(x_8))),(bitG(g(y_6)),enc((tag7,sign((g(y_6),g(x_8)),skp_2)),GtoSymK(exp(g(x_8),y_6)))),enc((tag8,sign((g(x_8),g(y_6)),sku_2)),GtoSymK(exp(g(y_6),x_8))),enc((tag9,uri),GtoSymK(exp(g(y_6),x_8))),enc((tag10,(u_4,i_4,attr),nc_7),GtoSymK(exp(g(x_8),y_6))),enc((tag11,sign((((u_4,i_4,attr),sign((u_4,i_4,attr),ski_2)),scope,solid),sku_2),nc_7),GtoSymK(exp(g(y_6),x_8))),enc((tag12,sign(accesstoken_7,skp_2)),GtoSymK(exp(g(x_8),y_6)))) at {368} in copy a_5

out(c, ~M_34) with ~M_34 = enc((tag12,sign(accesstoken_7,skp_2)),GtoSymK(exp(g(x_8),y_6))) at {369} in copy a_5

out(c, ~M_35) with ~M_35 = check_reach_pod at {371} in copy a_5

event podCompletesProtocol((tag6,bitG(g(x_8))),(bitG(g(y_6)),enc((tag7,sign((g(y_6),g(x_8)),skp_2)),GtoSymK(exp(g(x_8),y_6)))),enc((tag8,sign((g(x_8),g(y_6)),sku_2)),GtoSymK(exp(g(y_6),x_8))),enc((tag9,uri),GtoSymK(exp(g(y_6),x_8))),enc((tag10,(u_4,i_4,attr),nc_7),GtoSymK(exp(g(x_8),y_6))),enc((tag11,sign((((u_4,i_4,attr),sign((u_4,i_4,attr),ski_2)),scope,solid),sku_2),nc_7),GtoSymK(exp(g(y_6),x_8)))) at {372} in copy a_5

in(c, ~M_34) with ~M_34 = enc((tag12,sign(accesstoken_7,skp_2)),GtoSymK(exp(g(y_6),x_8))) at {157} in copy a_1, a_3

out(c, ~M_36) with ~M_36 = check_reach_user_to_pod at {162} in copy a_1, a_3

event userCompletesProtocolFull((tag1,bitG(g(x_6))),(bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski_2)),GtoSymK(exp(g(y_4),x_6)))),enc((tag3,sign((g(x_6),g(y_4)),sku_2)),GtoSymK(exp(g(y_4),x_6))),enc((tag4,u_4,attr,password_3),GtoSymK(exp(g(y_4),x_6))),enc((tag5,sign((((u_4,i_4,attr),sign((u_4,i_4,attr),ski_2)),u_4),ski_2)),GtoSymK(exp(g(y_4),x_6))),(tag6,bitG(g(x_8))),(bitG(g(y_6)),enc((tag7,sign((g(y_6),g(x_8)),skp_2)),GtoSymK(exp(g(y_6),x_8)))),enc((tag8,sign((g(x_8),g(y_6)),sku_2)),GtoSymK(exp(g(y_6),x_8))),enc((tag9,uri),GtoSymK(exp(g(y_6),x_8))),enc((tag10,(u_4,i_4,attr),nc_7),GtoSymK(exp(g(y_6),x_8))),enc((tag11,sign((((u_4,i_4,attr),sign((u_4,i_4,attr),ski_2)),scope,solid),sku_2),nc_7),GtoSymK(exp(g(y_6),x_8))),enc((tag12,sign(accesstoken_7,skp_2)),GtoSymK(exp(g(y_6),x_8)))) at {163} in copy a_1, a_3 (goal)

The event userCompletesProtocolFull((tag1,bitG(g(x_6))),(bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski_2)),GtoSymK(exp(g(y_4),x_6)))),enc((tag3,sign((g(x_6),g(y_4)),sku_2)),GtoSymK(exp(g(y_4),x_6))),enc((tag4,u_4,attr,password_3),GtoSymK(exp(g(y_4),x_6))),enc((tag5,sign((((u_4,i_4,attr),sign((u_4,i_4,attr),ski_2)),u_4),ski_2)),GtoSymK(exp(g(y_4),x_6))),(tag6,bitG(g(x_7))),(bitG(g(y_5)),enc((tag7,sign((g(y_5),g(x_7)),skp_2)),GtoSymK(exp(g(y_5),x_7)))),enc((tag8,sign((g(x_7),g(y_5)),sku_2)),GtoSymK(exp(g(y_5),x_7))),enc((tag9,uri),GtoSymK(exp(g(y_5),x_7))),enc((tag10,(u_4,i_4,attr),nc_6),GtoSymK(exp(g(y_5),x_7))),enc((tag11,sign((((u_4,i_4,attr),sign((u_4,i_4,attr),ski_2)),scope,solid),sku_2),nc_6),GtoSymK(exp(g(y_5),x_7))),enc((tag12,sign(accesstoken_6,skp_2)),GtoSymK(exp(g(y_5),x_7)))) is executed at {163} in copy a_1, a_2.
The event userCompletesProtocolFull((tag1,bitG(g(x_6))),(bitG(g(y_4)),enc((tag2,sign((g(y_4),g(x_6)),ski_2)),GtoSymK(exp(g(y_4),x_6)))),enc((tag3,sign((g(x_6),g(y_4)),sku_2)),GtoSymK(exp(g(y_4),x_6))),enc((tag4,u_4,attr,password_3),GtoSymK(exp(g(y_4),x_6))),enc((tag5,sign((((u_4,i_4,attr),sign((u_4,i_4,attr),ski_2)),u_4),ski_2)),GtoSymK(exp(g(y_4),x_6))),(tag6,bitG(g(x_8))),(bitG(g(y_6)),enc((tag7,sign((g(y_6),g(x_8)),skp_2)),GtoSymK(exp(g(y_6),x_8)))),enc((tag8,sign((g(x_8),g(y_6)),sku_2)),GtoSymK(exp(g(y_6),x_8))),enc((tag9,uri),GtoSymK(exp(g(y_6),x_8))),enc((tag10,(u_4,i_4,attr),nc_7),GtoSymK(exp(g(y_6),x_8))),enc((tag11,sign((((u_4,i_4,attr),sign((u_4,i_4,attr),ski_2)),scope,solid),sku_2),nc_7),GtoSymK(exp(g(y_6),x_8))),enc((tag12,sign(accesstoken_7,skp_2)),GtoSymK(exp(g(y_6),x_8)))) is executed at {163} in copy a_1, a_3.
A trace has been found.
RESULT inj-event(userCompletesProtocolFull(m_62,m_63,m_64,m_65,m_66,m_67,m_68,m_69,m_70,m_71,m_72,m_73)) ==> inj-event(issuerSendsLastMessageToUser(m_62,m_63,m_64,m_65,m_66)) && inj-event(podSendsLastMessageToUser(m_67,m_68,m_69,m_70,m_71,m_72,m_73)) is false.
RESULT (but event(userCompletesProtocolFull(m_62,m_63,m_64,m_65,m_66,m_67,m_68,m_69,m_70,m_71,m_72,m_73)) ==> event(issuerSendsLastMessageToUser(m_62,m_63,m_64,m_65,m_66)) && event(podSendsLastMessageToUser(m_67,m_68,m_69,m_70,m_71,m_72,m_73)) is true.)
-- Query inj-event(podCompletesProtocol(m_62,m_63,m_64,m_65,m_66,m_67)) ==> inj-event(userSendsLastMessageToPod(m_62,m_63,m_64,m_65,m_66,m_67)) in process 1.
Translating the process into Horn clauses...
select attacker(bitG(gx_10))/-5000
Completing...
Termination warning: attacker(bitG(elem)) -> attacker(elem)
Selecting 0
200 rules inserted. Base: 191 rules (57 with conclusion selected). Queue: 176 rules.
400 rules inserted. Base: 353 rules (75 with conclusion selected). Queue: 233 rules.
600 rules inserted. Base: 526 rules (91 with conclusion selected). Queue: 276 rules.
800 rules inserted. Base: 714 rules (95 with conclusion selected). Queue: 452 rules.
1000 rules inserted. Base: 813 rules (101 with conclusion selected). Queue: 524 rules.
1200 rules inserted. Base: 940 rules (102 with conclusion selected). Queue: 546 rules.
1400 rules inserted. Base: 1050 rules (109 with conclusion selected). Queue: 593 rules.
1600 rules inserted. Base: 1176 rules (109 with conclusion selected). Queue: 552 rules.
1800 rules inserted. Base: 1266 rules (110 with conclusion selected). Queue: 521 rules.
2000 rules inserted. Base: 1396 rules (114 with conclusion selected). Queue: 511 rules.
2200 rules inserted. Base: 1508 rules (116 with conclusion selected). Queue: 466 rules.
2400 rules inserted. Base: 1547 rules (121 with conclusion selected). Queue: 483 rules.
2600 rules inserted. Base: 1667 rules (124 with conclusion selected). Queue: 399 rules.
2800 rules inserted. Base: 1736 rules (130 with conclusion selected). Queue: 400 rules.
3000 rules inserted. Base: 1760 rules (135 with conclusion selected). Queue: 395 rules.
3200 rules inserted. Base: 1750 rules (141 with conclusion selected). Queue: 380 rules.
3400 rules inserted. Base: 1808 rules (148 with conclusion selected). Queue: 355 rules.
3600 rules inserted. Base: 1861 rules (151 with conclusion selected). Queue: 275 rules.
3800 rules inserted. Base: 1943 rules (151 with conclusion selected). Queue: 164 rules.
select attacker(bitG(g(x_6)))/-5000
4000 rules inserted. Base: 2038 rules (155 with conclusion selected). Queue: 80 rules.
4200 rules inserted. Base: 2197 rules (178 with conclusion selected). Queue: 269 rules.
4400 rules inserted. Base: 2307 rules (184 with conclusion selected). Queue: 373 rules.
4600 rules inserted. Base: 2430 rules (192 with conclusion selected). Queue: 474 rules.
4800 rules inserted. Base: 2527 rules (192 with conclusion selected). Queue: 445 rules.
5000 rules inserted. Base: 2600 rules (198 with conclusion selected). Queue: 547 rules.
5200 rules inserted. Base: 2717 rules (198 with conclusion selected). Queue: 578 rules.
5400 rules inserted. Base: 2801 rules (202 with conclusion selected). Queue: 660 rules.
5600 rules inserted. Base: 2907 rules (202 with conclusion selected). Queue: 651 rules.
5800 rules inserted. Base: 3004 rules (202 with conclusion selected). Queue: 679 rules.
6000 rules inserted. Base: 3077 rules (206 with conclusion selected). Queue: 740 rules.
6200 rules inserted. Base: 3157 rules (206 with conclusion selected). Queue: 740 rules.
6400 rules inserted. Base: 3274 rules (206 with conclusion selected). Queue: 748 rules.
6600 rules inserted. Base: 3358 rules (208 with conclusion selected). Queue: 767 rules.
6800 rules inserted. Base: 3405 rules (212 with conclusion selected). Queue: 798 rules.
7000 rules inserted. Base: 3494 rules (212 with conclusion selected). Queue: 816 rules.
7200 rules inserted. Base: 3556 rules (212 with conclusion selected). Queue: 804 rules.
7400 rules inserted. Base: 3616 rules (215 with conclusion selected). Queue: 874 rules.
7600 rules inserted. Base: 3691 rules (215 with conclusion selected). Queue: 805 rules.
7800 rules inserted. Base: 3744 rules (215 with conclusion selected). Queue: 791 rules.
8000 rules inserted. Base: 3785 rules (215 with conclusion selected). Queue: 760 rules.
8200 rules inserted. Base: 3813 rules (215 with conclusion selected). Queue: 754 rules.
8400 rules inserted. Base: 3878 rules (219 with conclusion selected). Queue: 699 rules.
8600 rules inserted. Base: 3922 rules (219 with conclusion selected). Queue: 646 rules.
8800 rules inserted. Base: 3956 rules (219 with conclusion selected). Queue: 593 rules.
9000 rules inserted. Base: 3986 rules (223 with conclusion selected). Queue: 570 rules.
9200 rules inserted. Base: 3983 rules (223 with conclusion selected). Queue: 515 rules.
9400 rules inserted. Base: 3978 rules (223 with conclusion selected). Queue: 452 rules.
9600 rules inserted. Base: 4029 rules (224 with conclusion selected). Queue: 389 rules.
9800 rules inserted. Base: 3997 rules (224 with conclusion selected). Queue: 319 rules.
10000 rules inserted. Base: 4042 rules (236 with conclusion selected). Queue: 245 rules.
10200 rules inserted. Base: 4074 rules (249 with conclusion selected). Queue: 189 rules.
10400 rules inserted. Base: 4072 rules (266 with conclusion selected). Queue: 203 rules.
10600 rules inserted. Base: 4070 rules (276 with conclusion selected). Queue: 182 rules.
10800 rules inserted. Base: 4133 rules (294 with conclusion selected). Queue: 294 rules.
11000 rules inserted. Base: 4222 rules (310 with conclusion selected). Queue: 336 rules.
11200 rules inserted. Base: 4309 rules (323 with conclusion selected). Queue: 282 rules.
11400 rules inserted. Base: 4342 rules (328 with conclusion selected). Queue: 314 rules.
11600 rules inserted. Base: 4467 rules (330 with conclusion selected). Queue: 341 rules.
11800 rules inserted. Base: 4587 rules (339 with conclusion selected). Queue: 427 rules.
12000 rules inserted. Base: 4629 rules (341 with conclusion selected). Queue: 437 rules.
12200 rules inserted. Base: 4771 rules (350 with conclusion selected). Queue: 506 rules.
12400 rules inserted. Base: 4865 rules (351 with conclusion selected). Queue: 473 rules.
12600 rules inserted. Base: 4920 rules (357 with conclusion selected). Queue: 577 rules.
12800 rules inserted. Base: 5021 rules (361 with conclusion selected). Queue: 634 rules.
13000 rules inserted. Base: 5058 rules (361 with conclusion selected). Queue: 616 rules.
13200 rules inserted. Base: 5138 rules (365 with conclusion selected). Queue: 652 rules.
13400 rules inserted. Base: 5190 rules (365 with conclusion selected). Queue: 762 rules.
13600 rules inserted. Base: 5215 rules (367 with conclusion selected). Queue: 734 rules.
13800 rules inserted. Base: 5277 rules (367 with conclusion selected). Queue: 721 rules.
14000 rules inserted. Base: 5341 rules (367 with conclusion selected). Queue: 704 rules.
14200 rules inserted. Base: 5412 rules (367 with conclusion selected). Queue: 622 rules.
14400 rules inserted. Base: 5540 rules (367 with conclusion selected). Queue: 489 rules.
14600 rules inserted. Base: 5624 rules (367 with conclusion selected). Queue: 400 rules.
14800 rules inserted. Base: 5643 rules (367 with conclusion selected). Queue: 364 rules.
15000 rules inserted. Base: 5732 rules (367 with conclusion selected). Queue: 232 rules.
15200 rules inserted. Base: 5794 rules (369 with conclusion selected). Queue: 188 rules.
15400 rules inserted. Base: 5944 rules (371 with conclusion selected). Queue: 32 rules.
15600 rules inserted. Base: 6007 rules (397 with conclusion selected). Queue: 19 rules.
Starting query inj-event(podCompletesProtocol(m_62,m_63,m_64,m_65,m_66,m_67)) ==> inj-event(userSendsLastMessageToPod(m_62,m_63,m_64,m_65,m_66,m_67))
goal reachable: begin(userSendsLastMessageToPod((tag6,bitG(g(x_6))),(bitG(g(y_4)),enc((tag7,sign((g(y_4),g(x_6)),skp[])),GtoSymK(exp(g(y_4),x_6)))),enc((tag8,sign((g(x_6),g(y_4)),sku[])),GtoSymK(exp(g(y_4),x_6))),enc((tag9,uri),GtoSymK(exp(g(y_4),x_6))),enc((tag10,(u[],i[],attr),nc_6),GtoSymK(exp(g(y_4),x_6))),enc((tag11,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),scope,solid),sku[]),nc_6),GtoSymK(exp(g(y_4),x_6)))),@occ155_1) -> end(@occ372_1,podCompletesProtocol((tag6,bitG(g(x_6))),(bitG(g(y_4)),enc((tag7,sign((g(y_4),g(x_6)),skp[])),GtoSymK(exp(g(y_4),x_6)))),enc((tag8,sign((g(x_6),g(y_4)),sku[])),GtoSymK(exp(g(y_4),x_6))),enc((tag9,uri),GtoSymK(exp(g(y_4),x_6))),enc((tag10,(u[],i[],attr),nc_6),GtoSymK(exp(g(y_4),x_6))),enc((tag11,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),scope,solid),sku[]),nc_6),GtoSymK(exp(g(y_4),x_6)))))
The hypothesis occurs strictly before the conclusion.
Abbreviations:
x_7 = x[e_1 = i[],!1 = @sid]
y_5 = y[m_1 = (tag1,bitG(g(x_7))),e = u[],!1 = @sid_1]
x_6 = x_1[e_2 = p[],!2 = @sid_2,m_14 = enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(y_5),x_7))),m_11 = (bitG(g(y_5)),enc((tag2,sign((g(y_5),g(x_7)),ski[])),GtoSymK(exp(g(y_5),x_7)))),e_1 = i[],!1 = @sid]
y_4 = y_2[m_48 = (tag6,bitG(g(x_6))),e_4 = u[],!1 = @sid_3]
nc_6 = nc_4[m_51 = enc((tag9,uri),GtoSymK(exp(g(y_4),x_6))),m_50 = enc((tag8,sign((g(x_6),g(y_4)),sku[])),GtoSymK(exp(g(y_4),x_6))),m_48 = (tag6,bitG(g(x_6))),e_4 = u[],!1 = @sid_3]
@occ372_1 = @occ372[m_53 = enc((tag11,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),scope,solid),sku[]),nc_6),GtoSymK(exp(g(y_4),x_6))),m_51 = enc((tag9,uri),GtoSymK(exp(g(y_4),x_6))),m_50 = enc((tag8,sign((g(x_6),g(y_4)),sku[])),GtoSymK(exp(g(y_4),x_6))),m_48 = (tag6,bitG(g(x_6))),e_4 = u[],!1 = @sid_3]
@occ155_1 = @occ155[m_19 = enc((tag10,(u[],i[],attr),nc_6),GtoSymK(exp(g(y_4),x_6))),m_16 = (bitG(g(y_4)),enc((tag7,sign((g(y_4),g(x_6)),skp[])),GtoSymK(exp(g(y_4),x_6)))),e_2 = p[],!2 = @sid_2,m_14 = enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(y_5),x_7))),m_11 = (bitG(g(y_5)),enc((tag2,sign((g(y_5),g(x_7)),ski[])),GtoSymK(exp(g(y_5),x_7)))),e_1 = i[],!1 = @sid]
goal reachable: e_5 Ôëá p[] && begin(userSendsLastMessageToPod((tag6,bitG(g(x_6))),(bitG(g(y_4)),enc((tag7,sign((g(y_4),g(x_6)),skp[])),GtoSymK(exp(g(y_4),x_6)))),enc((tag8,sign((g(x_6),g(y_4)),sku[])),GtoSymK(exp(g(y_4),x_6))),enc((tag9,uri),GtoSymK(exp(g(y_4),x_6))),enc((tag10,(u[],i[],attr),nc_6),GtoSymK(exp(g(y_4),x_6))),enc((tag11,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),scope,solid),sku[]),nc_6),GtoSymK(exp(g(y_4),x_6)))),@occ194_1) && attacker(e_5) -> end(@occ372_1,podCompletesProtocol((tag6,bitG(g(x_6))),(bitG(g(y_4)),enc((tag7,sign((g(y_4),g(x_6)),skp[])),GtoSymK(exp(g(y_4),x_6)))),enc((tag8,sign((g(x_6),g(y_4)),sku[])),GtoSymK(exp(g(y_4),x_6))),enc((tag9,uri),GtoSymK(exp(g(y_4),x_6))),enc((tag10,(u[],i[],attr),nc_6),GtoSymK(exp(g(y_4),x_6))),enc((tag11,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),scope,solid),sku[]),nc_6),GtoSymK(exp(g(y_4),x_6)))))
The 1st hypothesis occurs strictly before the conclusion.
The 2nd hypothesis occurs before the conclusion.
Abbreviations:
x_7 = x[e_1 = i[],!1 = @sid]
y_5 = y[m_1 = (tag1,bitG(g(x_7))),e = u[],!1 = @sid_1]
x_6 = x_2[pke_1 = pk(skp[]),e_2 = e_5,!2 = @sid_2,m_14 = enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(y_5),x_7))),m_11 = (bitG(g(y_5)),enc((tag2,sign((g(y_5),g(x_7)),ski[])),GtoSymK(exp(g(y_5),x_7)))),e_1 = i[],!1 = @sid]
y_4 = y_2[m_48 = (tag6,bitG(g(x_6))),e_4 = u[],!1 = @sid_3]
nc_6 = nc_4[m_51 = enc((tag9,uri),GtoSymK(exp(g(y_4),x_6))),m_50 = enc((tag8,sign((g(x_6),g(y_4)),sku[])),GtoSymK(exp(g(y_4),x_6))),m_48 = (tag6,bitG(g(x_6))),e_4 = u[],!1 = @sid_3]
@occ372_1 = @occ372[m_53 = enc((tag11,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),scope,solid),sku[]),nc_6),GtoSymK(exp(g(y_4),x_6))),m_51 = enc((tag9,uri),GtoSymK(exp(g(y_4),x_6))),m_50 = enc((tag8,sign((g(x_6),g(y_4)),sku[])),GtoSymK(exp(g(y_4),x_6))),m_48 = (tag6,bitG(g(x_6))),e_4 = u[],!1 = @sid_3]
@occ194_1 = @occ194[m_26 = enc((tag10,(u[],i[],attr),nc_6),GtoSymK(exp(g(y_4),x_6))),m_23 = (bitG(g(y_4)),enc((tag7,sign((g(y_4),g(x_6)),skp[])),GtoSymK(exp(g(y_4),x_6)))),pke_1 = pk(skp[]),e_2 = e_5,!2 = @sid_2,m_14 = enc((tag5,sign((((u[],i[],attr),sign((u[],i[],attr),ski[])),u[]),ski[])),GtoSymK(exp(g(y_5),x_7))),m_11 = (bitG(g(y_5)),enc((tag2,sign((g(y_5),g(x_7)),ski[])),GtoSymK(exp(g(y_5),x_7)))),e_1 = i[],!1 = @sid]
RESULT inj-event(podCompletesProtocol(m_62,m_63,m_64,m_65,m_66,m_67)) ==> inj-event(userSendsLastMessageToPod(m_62,m_63,m_64,m_65,m_66,m_67)) is true.

--------------------------------------------------------------
Verification summary:

Query not attacker(check_reach_issuer[]) is false.

Query not attacker(check_reach_user[]) is false.

Query not attacker(check_reach_user_to_pod[]) is false.

Query not attacker(check_reach_pod[]) is false.

Query not attacker(symmetric_key_IU[]) is true.

Query not attacker(symmetric_key_UP[]) is true.

Query inj-event(issuerCompletesProtocol(m_62,m_63,m_64,m_65)) ==> inj-event(userSendsLastMessageToIssuer(m_62,m_63,m_64,m_65)) is true.

Query inj-event(userCompletesProtocol(m_62,m_63,m_64,m_65,m_66)) ==> inj-event(issuerSendsLastMessageToUser(m_62,m_63,m_64,m_65,m_66)) is true.

Query inj-event(userCompletesProtocolFull(m_62,m_63,m_64,m_65,m_66,m_67,m_68,m_69,m_70,m_71,m_72,m_73)) ==> inj-event(issuerSendsLastMessageToUser(m_62,m_63,m_64,m_65,m_66)) && inj-event(podSendsLastMessageToUser(m_67,m_68,m_69,m_70,m_71,m_72,m_73)) is false.

Query inj-event(podCompletesProtocol(m_62,m_63,m_64,m_65,m_66,m_67)) ==> inj-event(userSendsLastMessageToPod(m_62,m_63,m_64,m_65,m_66,m_67)) is true.

--------------------------------------------------------------

