(* --------------------------------------------------------------------------------------------------------- *)
(* Modified Solid Open ID Connect *)
(* --------------------------------------------------------------------------------------------------------- *)

(* --------------------------------------------------------------------------------------------------------- *)
(* Start Definitions *)
(* --------------------------------------------------------------------------------------------------------- *)

(* START keys *)
type SymmetricKey.
type SecretKey.
type PublicKey.
fun pk(SecretKey):PublicKey.
(* END keys *)

(* START group *)
type G.
type exponent.
fun exp(G, exponent): G.
fun g(exponent): G.
equation forall x: exponent, y: exponent; exp(g(x),y) = exp(g(y),x).
fun GtoSymK(G): SymmetricKey.
fun bitG(G):bitstring.
reduc forall elem:G; unbitG(bitG(elem))=elem.
(* END group *)

(* START hash *)
fun hash(bitstring): bitstring.
fun hash_pk(PublicKey): bitstring.
(* End hash *)

(* START symmetric encryption *)
fun enc(bitstring(*the message*), SymmetricKey):bitstring (*symmetric encrypt input msg*).
reduc forall msg:bitstring,symk:SymmetricKey; dec(enc(msg,symk),symk)=msg (*symmetric decrypt*).

fun symk_to_bit(SymmetricKey): bitstring.
reduc forall symk:SymmetricKey; bit_to_symk(symk_to_bit(symk)) = symk.
(* END symmetric encryption *)

(* START asymmetric encryption *)
fun aenc(bitstring(*the message*), PublicKey):bitstring (*asymmetric encrypt input msg*).
reduc forall msg:bitstring,sk:SecretKey; adec(aenc(msg,pk(sk)),sk)=msg (*asymmetric decrypt*).
(* END Asymmetric encryption *)

(* START digital signature *)
fun sign(bitstring(*the message*), SecretKey):bitstring (*sign the input msg*).
reduc forall msg:bitstring,sk:SecretKey; check(sign(msg,sk),pk(sk))=msg (*check signature, and get msg*).
reduc forall msg:bitstring,sk:SecretKey; getMsg(sign(msg,sk))=msg (*just get msg*).
(* END digital signature *)



(*DEFS*)
fun ch(bitstring): channel.
fun chSymK(SymmetricKey): channel.

const tag1:bitstring.
const tag2:bitstring.
const tag3:bitstring.
const tag4:bitstring.
const tag5:bitstring.
const tag6:bitstring.
const tag7:bitstring.
const tag8:bitstring.
const tag9:bitstring.
const tag10:bitstring.
const tag11:bitstring.
const tag12:bitstring.

(*Const*)
(* const password:bitstring. *)
const attr:bitstring.
const uri:bitstring.
const scope:bitstring.
const solid:bitstring.

(* SECRECY *)

free check_reach_issuer:bitstring [private].
free check_reach_user:bitstring [private].
free check_reach_user_to_pod:bitstring [private].
free check_reach_pod:bitstring [private].

free symmetric_key_IU:bitstring [private].
free symmetric_key_UP:bitstring [private].

(* AUTHENTICATION *)

(* Issuer *)
event userSendsLastMessageToIssuer(bitstring, bitstring, bitstring, bitstring).
event issuerCompletesProtocol(bitstring, bitstring, bitstring, bitstring).

(* User *)
event issuerSendsLastMessageToUser(bitstring, bitstring, bitstring, bitstring, bitstring).
event podSendsLastMessageToUser(bitstring, bitstring, bitstring, bitstring, bitstring, bitstring, bitstring).
event userCompletesProtocol(bitstring, bitstring, bitstring, bitstring, bitstring).
event userCompletesProtocolFull(bitstring, bitstring, bitstring, bitstring, bitstring, bitstring, bitstring, bitstring, bitstring, bitstring, bitstring, bitstring).

(* Pod *)
event userSendsLastMessageToPod(bitstring, bitstring, bitstring, bitstring, bitstring, bitstring).
event podCompletesProtocol(bitstring, bitstring, bitstring, bitstring, bitstring, bitstring).

(* --------------------------------------------------------------------------------------------------------- *)
(* End Definitions *)
(* Start Agent Macros *)
(* --------------------------------------------------------------------------------------------------------- *)

let pod(talksOnlyToHonest:bool, c:channel, p:bitstring, skp:SecretKey, u:bitstring, pku:PublicKey, i:bitstring, pki:PublicKey) = 

    (* !Connecting to User *)

    (* Message 6 *)
    in(c, m_6:bitstring);
    let (tag6':bitstring, bitgx:bitstring) = m_6 in
    if (tag6 = tag6') then
    let gx = unbitG(bitgx) in

    (* Message 7 *)
    new y: exponent;
    let gy = g(y) in
    let k_UP = GtoSymK(exp(gx, y)) in
    let m_7 = (bitG(gy), enc((tag7, sign((gy, gx), skp)), k_UP)) in
    out(c, m_7);

    (* Message 8 *)
    in(c, m_8:bitstring);
    let (tag8':bitstring, signature:bitstring) = dec(m_8, k_UP) in
    if (tag8 = tag8') then
    if (gx, gy) = check(signature, pku) then

    (* !Talking to User *)

    (* Message 9 *)
    in(c, m_9:bitstring);
    let (tag9':bitstring, uri':bitstring) = dec(m_9, k_UP) in
    if (tag9 = tag9') then
    if (uri' = uri) then

    (* Message 10 *)
    new nc:bitstring;
    let rule = (u, i, attr) in
    let m_10 = enc((tag10, rule, nc), k_UP) in
    out(c, m_10);

    (* Message 11 *)
    in(c, m_11:bitstring);
    let (tag11':bitstring, PT:bitstring, nc':bitstring) = dec(m_11, k_UP) in
    if (tag11 = tag11') then
    if (nc = nc') then
    let (VC:bitstring, scope':bitstring, solid':bitstring) = check(PT, pku) in
    let (claims:bitstring, signed_claims:bitstring) = VC in
    let (u':bitstring, i':bitstring, attr':bitstring) = check(signed_claims, pki) in

    (* 
    reduc forall msg:bitstring,sk:SecretKey; check(msg,sig(msg,sk),pk(sk))=true (*check(msg,sigVal,pk)*).

    let (((gx':G,gy':G),n'_c:bitstring,DID'_V:DID,((DID'_P:DID,attr':bitstring,DID'_I:DID), sigVal_I:bitstring)), sigVal_P:bitstring) = dec(m_8,K) in
    if check(((gx',gy'),n'_c,DID'_V,((DID'_P,attr',DID'_I), sigVal_I)), sigVal_P ,pk_P) then
    if check((DID'_P,attr',DID'_I), sigVal_I,pk_I) then
    if ((gx',gy'),n'_c,DID'_V,(DID'_P,attr',DID'_I)) = ((gx,gy),n_c,DID_V,(DID_P,attr,DID_I)) then 
    *)

    if (i = i') then
    if (u = u') then
    if (scope = scope') then
    if (solid = solid') then
    if (attr = attr') then

    (* Message 12 *)
    new accesstoken:bitstring;
    let m_12 = enc((tag12, sign((accesstoken), skp)), k_UP) in
    event podSendsLastMessageToUser(m_6, m_7, m_8, m_9, m_10, m_11, m_12);
    out (c, m_12);

    (* --------------------------------------------------------------------------------------- *)
    (* Query Preparations *)

    if talksOnlyToHonest then

    out(c, check_reach_pod);

    event podCompletesProtocol(m_6, m_7, m_8, m_9, m_10, m_11);

    out(chSymK(k_UP), symmetric_key_UP);

    0.

let user_to_pod(talksOnlyToHonest:bool, c:channel, u:bitstring, sku:SecretKey, pku:PublicKey, i:bitstring, pki:PublicKey, p:bitstring, pkp:PublicKey, PT:bitstring, m_1:bitstring, m_2:bitstring, m_3:bitstring, m_4:bitstring, m_5:bitstring) =

    (* !Connecting to Pod *)

    (* Message 6 *)
    new x:exponent;
    let gx = g(x) in
    let m_6 = (tag6, bitG(gx)) in
    out(c, m_6);

    (* Message 7 *)
    in(c, m_7:bitstring);
    let (bitgy:bitstring, encryption:bitstring) = m_7 in
    let gy = unbitG(bitgy) in
    let k_UP = GtoSymK(exp(gy, x)) in
    let (tag7':bitstring, signature:bitstring) = dec(encryption, k_UP) in
    if (tag7 = tag7') then
    if (gy, gx) = check(signature, pkp) then

    (* Message 8 *)
    let m_8 = enc((tag8, sign((gx, gy), sku)), k_UP) in
    out(c, m_8);

    (* !Talking to Pod *)

    (* Message 9 *)
    let m_9 = enc((tag9, uri), k_UP) in
    out(c, m_9);

    (* Message 10 *)
    in(c, m_10:bitstring);
    let (tag10':bitstring, rule':bitstring, nc:bitstring) = dec(m_10, k_UP) in
    if (tag10 = tag10') then
    let N = check(PT, pku) in
    let (VC:bitstring, scope:bitstring, solid:bitstring) = N in
    let (claims:bitstring, signed_claims:bitstring) = VC in
    let (u':bitstring, i':bitstring, attr':bitstring) = check(signed_claims, pki) in
    let (u'':bitstring, i'':bitstring, attr'':bitstring) = rule' in

    (* if (rule = claims) then *)
    if (u' = u'') then
    if (i' = i'') then
    if (attr' = attr'') then

    (* Message 11 *)
    let m_11 = enc((tag11, PT, nc), k_UP) in
    event userSendsLastMessageToPod(m_6, m_7, m_8, m_9, m_10, m_11);
    out(c, m_11);

    (* Message 12 *)
    in(c, m_12:bitstring);
    let (tag12':bitstring, signed_accesstoken:bitstring) = dec(m_12, k_UP) in
    if (tag12 = tag12') then
    let (accesstoken:bitstring) = check(signed_accesstoken, pkp) in

    (* --------------------------------------------------------------------------------------- *)
    (* Query Preparations *)

    if talksOnlyToHonest then

    out(c, check_reach_user_to_pod);

    event userCompletesProtocolFull(m_1, m_2, m_3, m_4, m_5, m_6, m_7, m_8, m_9, m_10, m_11, m_12);

    out(chSymK(k_UP), symmetric_key_UP);

    0.

let open_user_to_pod(c:channel, u:bitstring, sku:SecretKey, pku:PublicKey, i:bitstring, pki:PublicKey, p:bitstring, pkp:PublicKey, PT:bitstring, m_1:bitstring, m_2:bitstring, m_3:bitstring, m_4:bitstring, m_5:bitstring) =
  in(c, e:bitstring);
  if (e = p) then
    user_to_pod(true, c, u, sku, pku, i, pki, p, pkp, PT, m_1, m_2, m_3, m_4, m_5)
  else
    in(c, pke:PublicKey);
    user_to_pod(false, c, u, sku, pku, i, pki, e, pke, PT, m_1, m_2, m_3, m_4, m_5)
  .

let user(talksOnlyToHonest:bool, c:channel, u:bitstring, sku:SecretKey, pku:PublicKey, i:bitstring, pki:PublicKey, p:bitstring, pkp:PublicKey, password:bitstring) =

    (* !Connecting to Issuer *)

    (* Message 1 *)
    new x:exponent;
    let gx = g(x) in
    let m_1 = (tag1, bitG(gx)) in
    out(c, m_1);

    (* Message 2 *)
    in(c, m_2:bitstring);
    let (bitgy:bitstring, encryption:bitstring) = m_2 in
    let gy = unbitG(bitgy) in
    let k_IU = GtoSymK(exp(gy, x)) in
    let (tag2':bitstring, signature:bitstring) = dec(encryption, k_IU) in
    if (tag2 = tag2') then
    if (gy, gx) = check(signature, pki) then

    (* Message 3 *)
    let m_3 = enc((tag3, sign((gx, gy), sku)), k_IU) in
    out(c, m_3);

    (* !Talking to Issuer *)

    (* Message 4 *)
    let m_4 = enc((tag4, u, attr, password),k_IU) in
    event userSendsLastMessageToIssuer(m_1, m_2, m_3, m_4);
    out(c, m_4);

    (* Message 5 *)
    in(c, m_5:bitstring);
    let (tag5':bitstring, signed_VC:bitstring) = dec(m_5, k_IU) in
    if (tag5 = tag5') then
    let (VC:bitstring, u':bitstring) = check(signed_VC, pki) in
    let (claims:bitstring, signed_claims:bitstring) = VC in
    let (u':bitstring, i':bitstring, attr':bitstring) = check(signed_claims, pki) in
    if (u = u') then
    if (i = i') then
    if (attr = attr') then

    let N = (VC, scope, solid) in
    let PT = sign(N, sku) in

    (* !Communication with App *)

    !open_user_to_pod(c, u, sku, pku, i, pki, p, pkp, PT, m_1, m_2, m_3, m_4, m_5) |

    (* --------------------------------------------------------------------------------------- *)
    (* Query Preparations *)

    if talksOnlyToHonest then

    out(c, check_reach_user);

    event userCompletesProtocol(m_1, m_2, m_3, m_4, m_5);

    out(chSymK(k_IU), symmetric_key_IU);

    0.

let issuer(talksOnlyToHonest:bool, c:channel, i:bitstring, ski:SecretKey, pki:PublicKey, u:bitstring, pku:PublicKey, password:bitstring) =

    (* !Connecting to User *)

    (* Message 1 *)
    in(c, m_1:bitstring);
    let (tag1':bitstring, bitgx:bitstring) = m_1 in
    if (tag1 = tag1') then
    let gx = unbitG(bitgx) in

    (* Message 2 *)
    new y: exponent;
    let gy = g(y) in
    let k_IU = GtoSymK(exp(gx, y)) in
    let m_2 = (bitG(gy), enc((tag2, sign((gy, gx), ski)), k_IU)) in
    out(c, m_2);

    (* Message 3 *)
    in(c, m_3:bitstring);
    let (tag3':bitstring, signature:bitstring) = dec(m_3, k_IU) in
    if (tag3 = tag3') then
    if (gx, gy) = check(signature, pku) then

    (* !Talking to User *)

    (* Message 4 *)
    in (c, m_4:bitstring);
    let (tag4':bitstring, u':bitstring, attr':bitstring, password':bitstring) = dec(m_4, k_IU) in

    if (tag4 = tag4') then
    if (u = u') then
    if (attr' = attr) then
    if (password' = password) then

    (* Message 5 *)
    let claims = (u, i, attr) in
    let VC = (claims, sign(claims, ski)) in
    let m_5 = enc((tag5, sign((VC, u), ski)), k_IU) in
    event issuerSendsLastMessageToUser(m_1, m_2, m_3, m_4, m_5);
    out(c, m_5);

    (* --------------------------------------------------------------------------------------- *)
    (* Query Preparations *)

    if talksOnlyToHonest then

    out(c, check_reach_issuer);

    event issuerCompletesProtocol(m_1, m_2, m_3, m_4);

    out(chSymK(k_IU), symmetric_key_IU);

    0.


(* --------------------------------------------------------------------------------------------------------- *)
(* End Agent Macros *)
(* Start Open Network *)
(* --------------------------------------------------------------------------------------------------------- *)

let open_issuer(c:channel, i:bitstring, ski:SecretKey, pki:PublicKey, u:bitstring, pku:PublicKey, password:bitstring) =
  in(c, e:bitstring);
  if (e = u) then
    issuer(true, c, i, ski, pki, u, pku, password)
  else
    in(c, pke:PublicKey);
    in(c, wrong_pw:bitstring);
    issuer(false, c, i, ski, pki, e, pke, wrong_pw)
  .

let open_user(c:channel, u:bitstring, sku:SecretKey, pku:PublicKey, i:bitstring, pki:PublicKey, p:bitstring, pkp:PublicKey, password:bitstring) =
  in(c, e:bitstring);
  if (e = i) then
    user(true, c, u, sku, pku, i, pki, p, pkp, password)
  else
    in(c, pke:PublicKey);
    in(c, wrong_pw:bitstring);
    user(false, c, u, sku, pku, e, pke, p, pkp, wrong_pw)
  .

let open_pod(c:channel, p:bitstring, skp:SecretKey, u:bitstring, pku:PublicKey, i:bitstring, pki:PublicKey) =
  in(c, e:bitstring);
  if (e = u) then
    pod(true, c, p, skp, u, pku, i, pki)
  else
    in(c, pke:PublicKey);
    pod(false, c, p, skp, e, pke, i, pki)
  .

(* --------------------------------------------------------------------------------------------------------- *)
(* End Open Network *)
(* Start Assumptions *)
(* --------------------------------------------------------------------------------------------------------- *)

(* SECRECY *)

query attacker(check_reach_issuer).
query attacker(check_reach_user).
query attacker(check_reach_user_to_pod).
query attacker(check_reach_pod).
 
query attacker(symmetric_key_IU).
query attacker(symmetric_key_UP).

(* AUTHENTICATION *)

(* Issuer Completes Protocol *)
query m_1:bitstring, m_2:bitstring, m_3:bitstring, m_4:bitstring; 
    inj-event(issuerCompletesProtocol(m_1, m_2, m_3, m_4))
    ==>
    inj-event(userSendsLastMessageToIssuer(m_1, m_2, m_3, m_4))
    .

(* User Completes Protocol*)
query m_1:bitstring, m_2:bitstring, m_3:bitstring, m_4:bitstring, m_5:bitstring; 
    inj-event(userCompletesProtocol(m_1, m_2, m_3, m_4, m_5))
    ==>
    inj-event(issuerSendsLastMessageToUser(m_1, m_2, m_3, m_4, m_5))
    .

(* User Completes Protocol Full*)
query m_1:bitstring, m_2:bitstring, m_3:bitstring, m_4:bitstring, m_5:bitstring, m_6:bitstring, m_7:bitstring, m_8:bitstring, m_9:bitstring, m_10:bitstring, m_11:bitstring, m_12:bitstring; 
    event(userCompletesProtocolFull(m_1, m_2, m_3, m_4, m_5, m_6, m_7, m_8, m_9, m_10, m_11, m_12))
    ==>
    event(issuerSendsLastMessageToUser(m_1, m_2, m_3, m_4, m_5))
    &&
    event(podSendsLastMessageToUser(m_6, m_7, m_8, m_9, m_10, m_11, m_12))
    .

(* Pod Completes Protocol *)
query m_6:bitstring, m_7:bitstring, m_8:bitstring, m_9:bitstring, m_10:bitstring, m_11:bitstring; 
    inj-event(podCompletesProtocol(m_6, m_7, m_8, m_9, m_10, m_11))
    ==>
    inj-event(userSendsLastMessageToPod(m_6, m_7, m_8, m_9, m_10, m_11))
    .

(* --------------------------------------------------------------------------------------------------------- *)
(* End Assumptions *)
(* Start Main *)
(* --------------------------------------------------------------------------------------------------------- *)

free c:channel.
process (*use root process for setup *)

    (* create identities *)
    new i:bitstring;
    new u:bitstring;
    new p:bitstring;

    (*advertise identities*)
    out(c,i);
    out(c,u);
    out(c,p);

    (*declare secret keys*)
    new ski:SecretKey;
    new sku:SecretKey;
    new skp:SecretKey;

    (*advertise public keys*)
    out(c,pk(ski));
    out(c,pk(sku));
    out(c,pk(skp));

    (*declare secret password*)
    new password:bitstring;

    (*let agents dance*)
    (
        ! open_issuer (c, i, ski, pk(ski), u, pk(sku), password)
      | ! open_user   (c, u, sku, pk(sku), i, pk(ski), p, pk(skp), password)
      | ! open_pod    (c, p, skp, u, pk(sku), i, pk(ski))
    )

(* --------------------------------------------------------------------------------------------------------- *)
(* End Main *)
(* --------------------------------------------------------------------------------------------------------- *)