File "soidc.pv", line 200, characters 9-12:
Warning: identifier sskI rebound.
Process 0 (that is, the initial process):
{1}new a: bitstring;
{2}new u: bitstring;
{3}new i: bitstring;
{4}out(c, a);
{5}out(c, u);
{6}out(c, i);
{7}new ska: SecretKey;
{8}new sku: SecretKey;
{9}new ski: SecretKey;
{10}out(c, pk(ska));
{11}out(c, pk(sku));
{12}out(c, pk(ski));
{13}new password: bitstring;
(
    {14}!
    {15}let c_1: channel = c in
    {16}let a_1: bitstring = a in
    {17}let ska_1: SecretKey = ska in
    {18}let u_1: bitstring = u in
    {19}let pku: PublicKey = pk(sku) in
    {20}let i_1: bitstring = i in
    {21}let pki: PublicKey = pk(ski) in
    {22}in(c_1, e1: bitstring);
    {23}in(c_1, e2: bitstring);
    {24}if ((e1 = u_1) && (e2 = i_1)) then
    (
        {25}let talksOnlyToHonest: bool = true in
        {26}in(c_1, m_1: bitstring);
        {27}let (tag1': bitstring,n: bitstring,spkI: PublicKey) = adec(m_1,ska_1) in
        {28}if (tag1 = tag1') then
        {29}new k1: SymmetricKey;
        {30}let m_2: bitstring = aenc((tag2,n,k1),spkI) in
        {31}out(c_1, m_2);
        {32}new pkce: bitstring;
        {33}new scope: bitstring;
        {34}let m_3: bitstring = enc((tag3,a_1,hash(pkce),scope),k1) in
        {35}event appSendsLastMessageToBrowser(m_1,m_2,m_3);
        {36}out(c_1, m_3);
        {37}in(c_1, m_8: bitstring);
        {38}let (tag8': bitstring,code: bitstring) = dec(m_8,k1) in
        {39}if (tag8 = tag8') then
        {40}new n2: bitstring;
        {41}new sskI2: SecretKey;
        {42}let m_9: bitstring = aenc((tag9,n2,pk(sskI2)),pki) in
        {43}out(c_1, m_9);
        {44}in(c_1, m_10: bitstring);
        {45}let (tag10': bitstring,n2': bitstring,k3: SymmetricKey) = adec(m_10,sskI2) in
        {46}if (tag10 = tag10') then
        {47}if (n2 = n2') then
        {48}new sks: SecretKey;
        {49}new jti: bitstring;
        {50}let T2: bitstring = (a_1,jti,code,pkce) in
        {51}let m_11: bitstring = enc((tag11,pk(sks),sign(T2,sks)),k3) in
        {52}event appSendsLastMessageToIssuer(m_9,m_10,m_11);
        {53}out(c_1, m_11);
        {54}in(c_1, m_12: bitstring);
        {55}out(c_1, check_reach_app);
        {56}let (tag12': bitstring,signed_M: bitstring) = dec(m_12,k3) in
        {57}if (tag12 = tag12') then
        {58}let M: bitstring = check(signed_M,pki) in
        {59}let (jtk: bitstring,jti': bitstring,scope': bitstring,a': bitstring,i': bitstring,u': bitstring) = M in
        {60}if (jtk = hash_pk(pk(sks))) then
        {61}if (jti = jti') then
        {62}if (scope = scope') then
        {63}if (a_1 = a') then
        {64}if (i_1 = i') then
        {65}if (u_1 = u') then
        {66}if talksOnlyToHonest then
        {67}out(c_1, check_reach_app);
        {68}event appCompletesProtocol(m_1,m_2,m_3,m_8,m_9,m_10,m_11,m_12);
        {69}out(ch(code), free_code)
    )
    else
        {70}if ((e1 Ôëá u_1) && (e2 = i_1)) then
        (
            {71}in(c_1, pke1: PublicKey);
            {72}let talksOnlyToHonest_1: bool = false in
            {73}in(c_1, m: bitstring);
            {74}let (tag1'_1: bitstring,n_1: bitstring,spkI_1: PublicKey) = adec(m,ska_1) in
            {75}if (tag1 = tag1'_1) then
            {76}new k1_1: SymmetricKey;
            {77}let m_4: bitstring = aenc((tag2,n_1,k1_1),spkI_1) in
            {78}out(c_1, m_4);
            {79}new pkce_1: bitstring;
            {80}new scope_1: bitstring;
            {81}let m_5: bitstring = enc((tag3,a_1,hash(pkce_1),scope_1),k1_1) in
            {82}event appSendsLastMessageToBrowser(m,m_4,m_5);
            {83}out(c_1, m_5);
            {84}in(c_1, m_6: bitstring);
            {85}let (tag8'_1: bitstring,code_1: bitstring) = dec(m_6,k1_1) in
            {86}if (tag8 = tag8'_1) then
            {87}new n2_1: bitstring;
            {88}new sskI2_1: SecretKey;
            {89}let m_7: bitstring = aenc((tag9,n2_1,pk(sskI2_1)),pki) in
            {90}out(c_1, m_7);
            {91}in(c_1, m_13: bitstring);
            {92}let (tag10'_1: bitstring,n2'_1: bitstring,k3_1: SymmetricKey) = adec(m_13,sskI2_1) in
            {93}if (tag10 = tag10'_1) then
            {94}if (n2_1 = n2'_1) then
            {95}new sks_1: SecretKey;
            {96}new jti_1: bitstring;
            {97}let T2_1: bitstring = (a_1,jti_1,code_1,pkce_1) in
            {98}let m_14: bitstring = enc((tag11,pk(sks_1),sign(T2_1,sks_1)),k3_1) in
            {99}event appSendsLastMessageToIssuer(m_7,m_13,m_14);
            {100}out(c_1, m_14);
            {101}in(c_1, m_15: bitstring);
            {102}out(c_1, check_reach_app);
            {103}let (tag12'_1: bitstring,signed_M_1: bitstring) = dec(m_15,k3_1) in
            {104}if (tag12 = tag12'_1) then
            {105}let M_1: bitstring = check(signed_M_1,pki) in
            {106}let (jtk_1: bitstring,jti'_1: bitstring,scope'_1: bitstring,a'_1: bitstring,i'_1: bitstring,u'_1: bitstring) = M_1 in
            {107}if (jtk_1 = hash_pk(pk(sks_1))) then
            {108}if (jti_1 = jti'_1) then
            {109}if (scope_1 = scope'_1) then
            {110}if (a_1 = a'_1) then
            {111}if (i_1 = i'_1) then
            {112}if (e1 = u'_1) then
            {113}if talksOnlyToHonest_1 then
            {114}out(c_1, check_reach_app);
            {115}event appCompletesProtocol(m,m_4,m_5,m_6,m_7,m_13,m_14,m_15);
            {116}out(ch(code_1), free_code)
        )
        else
            {117}if ((e1 = u_1) && (e2 Ôëá i_1)) then
            (
                {118}in(c_1, pke2: PublicKey);
                {119}let talksOnlyToHonest_2: bool = false in
                {120}in(c_1, m_16: bitstring);
                {121}let (tag1'_2: bitstring,n_2: bitstring,spkI_2: PublicKey) = adec(m_16,ska_1) in
                {122}if (tag1 = tag1'_2) then
                {123}new k1_2: SymmetricKey;
                {124}let m_17: bitstring = aenc((tag2,n_2,k1_2),spkI_2) in
                {125}out(c_1, m_17);
                {126}new pkce_2: bitstring;
                {127}new scope_2: bitstring;
                {128}let m_18: bitstring = enc((tag3,a_1,hash(pkce_2),scope_2),k1_2) in
                {129}event appSendsLastMessageToBrowser(m_16,m_17,m_18);
                {130}out(c_1, m_18);
                {131}in(c_1, m_19: bitstring);
                {132}let (tag8'_2: bitstring,code_2: bitstring) = dec(m_19,k1_2) in
                {133}if (tag8 = tag8'_2) then
                {134}new n2_2: bitstring;
                {135}new sskI2_2: SecretKey;
                {136}let m_20: bitstring = aenc((tag9,n2_2,pk(sskI2_2)),pke2) in
                {137}out(c_1, m_20);
                {138}in(c_1, m_21: bitstring);
                {139}let (tag10'_2: bitstring,n2'_2: bitstring,k3_2: SymmetricKey) = adec(m_21,sskI2_2) in
                {140}if (tag10 = tag10'_2) then
                {141}if (n2_2 = n2'_2) then
                {142}new sks_2: SecretKey;
                {143}new jti_2: bitstring;
                {144}let T2_2: bitstring = (a_1,jti_2,code_2,pkce_2) in
                {145}let m_22: bitstring = enc((tag11,pk(sks_2),sign(T2_2,sks_2)),k3_2) in
                {146}event appSendsLastMessageToIssuer(m_20,m_21,m_22);
                {147}out(c_1, m_22);
                {148}in(c_1, m_23: bitstring);
                {149}out(c_1, check_reach_app);
                {150}let (tag12'_2: bitstring,signed_M_2: bitstring) = dec(m_23,k3_2) in
                {151}if (tag12 = tag12'_2) then
                {152}let M_2: bitstring = check(signed_M_2,pke2) in
                {153}let (jtk_2: bitstring,jti'_2: bitstring,scope'_2: bitstring,a'_2: bitstring,i'_2: bitstring,u'_2: bitstring) = M_2 in
                {154}if (jtk_2 = hash_pk(pk(sks_2))) then
                {155}if (jti_2 = jti'_2) then
                {156}if (scope_2 = scope'_2) then
                {157}if (a_1 = a'_2) then
                {158}if (e2 = i'_2) then
                {159}if (u_1 = u'_2) then
                {160}if talksOnlyToHonest_2 then
                {161}out(c_1, check_reach_app);
                {162}event appCompletesProtocol(m_16,m_17,m_18,m_19,m_20,m_21,m_22,m_23);
                {163}out(ch(code_2), free_code)
            )
            else
                {164}if ((e1 Ôëá u_1) && (e2 Ôëá i_1)) then
                {165}in(c_1, pke1_1: PublicKey);
                {166}in(c_1, pke2_1: PublicKey);
                {167}let talksOnlyToHonest_3: bool = false in
                {168}in(c_1, m_24: bitstring);
                {169}let (tag1'_3: bitstring,n_3: bitstring,spkI_3: PublicKey) = adec(m_24,ska_1) in
                {170}if (tag1 = tag1'_3) then
                {171}new k1_3: SymmetricKey;
                {172}let m_25: bitstring = aenc((tag2,n_3,k1_3),spkI_3) in
                {173}out(c_1, m_25);
                {174}new pkce_3: bitstring;
                {175}new scope_3: bitstring;
                {176}let m_26: bitstring = enc((tag3,a_1,hash(pkce_3),scope_3),k1_3) in
                {177}event appSendsLastMessageToBrowser(m_24,m_25,m_26);
                {178}out(c_1, m_26);
                {179}in(c_1, m_27: bitstring);
                {180}let (tag8'_3: bitstring,code_3: bitstring) = dec(m_27,k1_3) in
                {181}if (tag8 = tag8'_3) then
                {182}new n2_3: bitstring;
                {183}new sskI2_3: SecretKey;
                {184}let m_28: bitstring = aenc((tag9,n2_3,pk(sskI2_3)),pke2_1) in
                {185}out(c_1, m_28);
                {186}in(c_1, m_29: bitstring);
                {187}let (tag10'_3: bitstring,n2'_3: bitstring,k3_3: SymmetricKey) = adec(m_29,sskI2_3) in
                {188}if (tag10 = tag10'_3) then
                {189}if (n2_3 = n2'_3) then
                {190}new sks_3: SecretKey;
                {191}new jti_3: bitstring;
                {192}let T2_3: bitstring = (a_1,jti_3,code_3,pkce_3) in
                {193}let m_30: bitstring = enc((tag11,pk(sks_3),sign(T2_3,sks_3)),k3_3) in
                {194}event appSendsLastMessageToIssuer(m_28,m_29,m_30);
                {195}out(c_1, m_30);
                {196}in(c_1, m_31: bitstring);
                {197}out(c_1, check_reach_app);
                {198}let (tag12'_3: bitstring,signed_M_3: bitstring) = dec(m_31,k3_3) in
                {199}if (tag12 = tag12'_3) then
                {200}let M_3: bitstring = check(signed_M_3,pke2_1) in
                {201}let (jtk_3: bitstring,jti'_3: bitstring,scope'_3: bitstring,a'_3: bitstring,i'_3: bitstring,u'_3: bitstring) = M_3 in
                {202}if (jtk_3 = hash_pk(pk(sks_3))) then
                {203}if (jti_3 = jti'_3) then
                {204}if (scope_3 = scope'_3) then
                {205}if (a_1 = a'_3) then
                {206}if (e2 = i'_3) then
                {207}if (e1 = u'_3) then
                {208}if talksOnlyToHonest_3 then
                {209}out(c_1, check_reach_app);
                {210}event appCompletesProtocol(m_24,m_25,m_26,m_27,m_28,m_29,m_30,m_31);
                {211}out(ch(code_3), free_code)
) | (
    {212}!
    {213}let c_2: channel = c in
    {214}let u_2: bitstring = u in
    {215}let sku_1: SecretKey = sku in
    {216}let a_2: bitstring = a in
    {217}let pka: PublicKey = pk(ska) in
    {218}let i_2: bitstring = i in
    {219}let pki_1: PublicKey = pk(ski) in
    {220}let password_1: bitstring = password in
    {221}in(c_2, e1_1: bitstring);
    {222}in(c_2, e2_1: bitstring);
    {223}if ((e1_1 = a_2) && (e2_1 = i_2)) then
    (
        {224}let talksOnlyToHonest_4: bool = true in
        {225}new n_4: bitstring;
        {226}new sskI: SecretKey;
        {227}let m_32: bitstring = aenc((tag1,n_4,pk(sskI)),pka) in
        {228}out(c_2, m_32);
        {229}in(c_2, m_33: bitstring);
        {230}let (tag2': bitstring,n': bitstring,k1_4: SymmetricKey) = adec(m_33,sskI) in
        {231}if (tag2 = tag2') then
        {232}if (n_4 = n') then
        {233}in(c_2, m_34: bitstring);
        {234}let (tag3': bitstring,a'_4: bitstring,h_pkce: bitstring,scope_4: bitstring) = dec(m_34,k1_4) in
        {235}if (tag3 = tag3') then
        {236}if (a_2 = a'_4) then
        {237}new n2_4: bitstring;
        {238}new sskI_1: SecretKey;
        {239}let m_35: bitstring = aenc((tag4,n2_4,pk(sskI_1)),pki_1) in
        {240}out(c_2, m_35);
        {241}in(c_2, m_36: bitstring);
        {242}let (tag5': bitstring,n2'_4: bitstring,k2: SymmetricKey) = adec(m_36,sskI_1) in
        {243}if (tag5 = tag5') then
        {244}if (n2_4 = n2'_4) then
        {245}let m_37: bitstring = enc((tag6,a_2,h_pkce,scope_4,u_2,password_1),k2) in
        {246}event browserSendsLastMessageToIssuer(m_35,m_36,m_37);
        {247}out(c_2, m_37);
        {248}in(c_2, m_38: bitstring);
        {249}let (tag7': bitstring,code_4: bitstring) = dec(m_38,k2) in
        {250}if (tag7 = tag7') then
        {251}let m_39: bitstring = enc((tag8,code_4),k1_4) in
        {252}event browserSendsLastMessageToApp(m_32,m_33,m_34,m_39);
        {253}out(c_2, m_39);
        {254}if talksOnlyToHonest_4 then
        {255}out(c_2, check_reach_browser);
        {256}event browserCompletesProtocol(m_32,m_33,m_34,m_35,m_36,m_37,m_38);
        {257}out(ch(code_4), free_code);
        {258}out(ch(password_1), free_password)
    )
    else
        {259}if ((e1_1 Ôëá a_2) && (e2_1 = i_2)) then
        (
            {260}in(c_2, pke1_2: PublicKey);
            {261}let talksOnlyToHonest_5: bool = false in
            {262}new n_5: bitstring;
            {263}new sskI_2: SecretKey;
            {264}let m_40: bitstring = aenc((tag1,n_5,pk(sskI_2)),pke1_2) in
            {265}out(c_2, m_40);
            {266}in(c_2, m_41: bitstring);
            {267}let (tag2'_1: bitstring,n'_1: bitstring,k1_5: SymmetricKey) = adec(m_41,sskI_2) in
            {268}if (tag2 = tag2'_1) then
            {269}if (n_5 = n'_1) then
            {270}in(c_2, m_42: bitstring);
            {271}let (tag3'_1: bitstring,a'_5: bitstring,h_pkce_1: bitstring,scope_5: bitstring) = dec(m_42,k1_5) in
            {272}if (tag3 = tag3'_1) then
            {273}if (e1_1 = a'_5) then
            {274}new n2_5: bitstring;
            {275}new sskI_3: SecretKey;
            {276}let m_43: bitstring = aenc((tag4,n2_5,pk(sskI_3)),pki_1) in
            {277}out(c_2, m_43);
            {278}in(c_2, m_44: bitstring);
            {279}let (tag5'_1: bitstring,n2'_5: bitstring,k2_1: SymmetricKey) = adec(m_44,sskI_3) in
            {280}if (tag5 = tag5'_1) then
            {281}if (n2_5 = n2'_5) then
            {282}let m_45: bitstring = enc((tag6,e1_1,h_pkce_1,scope_5,u_2,password_1),k2_1) in
            {283}event browserSendsLastMessageToIssuer(m_43,m_44,m_45);
            {284}out(c_2, m_45);
            {285}in(c_2, m_46: bitstring);
            {286}let (tag7'_1: bitstring,code_5: bitstring) = dec(m_46,k2_1) in
            {287}if (tag7 = tag7'_1) then
            {288}let m_47: bitstring = enc((tag8,code_5),k1_5) in
            {289}event browserSendsLastMessageToApp(m_40,m_41,m_42,m_47);
            {290}out(c_2, m_47);
            {291}if talksOnlyToHonest_5 then
            {292}out(c_2, check_reach_browser);
            {293}event browserCompletesProtocol(m_40,m_41,m_42,m_43,m_44,m_45,m_46);
            {294}out(ch(code_5), free_code);
            {295}out(ch(password_1), free_password)
        )
        else
            {296}if ((e1_1 = a_2) && (e2_1 Ôëá i_2)) then
            (
                {297}in(c_2, pke2_2: PublicKey);
                {298}in(c_2, wrong_pw: bitstring);
                {299}let talksOnlyToHonest_6: bool = false in
                {300}new n_6: bitstring;
                {301}new sskI_4: SecretKey;
                {302}let m_48: bitstring = aenc((tag1,n_6,pk(sskI_4)),pka) in
                {303}out(c_2, m_48);
                {304}in(c_2, m_49: bitstring);
                {305}let (tag2'_2: bitstring,n'_2: bitstring,k1_6: SymmetricKey) = adec(m_49,sskI_4) in
                {306}if (tag2 = tag2'_2) then
                {307}if (n_6 = n'_2) then
                {308}in(c_2, m_50: bitstring);
                {309}let (tag3'_2: bitstring,a'_6: bitstring,h_pkce_2: bitstring,scope_6: bitstring) = dec(m_50,k1_6) in
                {310}if (tag3 = tag3'_2) then
                {311}if (a_2 = a'_6) then
                {312}new n2_6: bitstring;
                {313}new sskI_5: SecretKey;
                {314}let m_51: bitstring = aenc((tag4,n2_6,pk(sskI_5)),pke2_2) in
                {315}out(c_2, m_51);
                {316}in(c_2, m_52: bitstring);
                {317}let (tag5'_2: bitstring,n2'_6: bitstring,k2_2: SymmetricKey) = adec(m_52,sskI_5) in
                {318}if (tag5 = tag5'_2) then
                {319}if (n2_6 = n2'_6) then
                {320}let m_53: bitstring = enc((tag6,a_2,h_pkce_2,scope_6,u_2,wrong_pw),k2_2) in
                {321}event browserSendsLastMessageToIssuer(m_51,m_52,m_53);
                {322}out(c_2, m_53);
                {323}in(c_2, m_54: bitstring);
                {324}let (tag7'_2: bitstring,code_6: bitstring) = dec(m_54,k2_2) in
                {325}if (tag7 = tag7'_2) then
                {326}let m_55: bitstring = enc((tag8,code_6),k1_6) in
                {327}event browserSendsLastMessageToApp(m_48,m_49,m_50,m_55);
                {328}out(c_2, m_55);
                {329}if talksOnlyToHonest_6 then
                {330}out(c_2, check_reach_browser);
                {331}event browserCompletesProtocol(m_48,m_49,m_50,m_51,m_52,m_53,m_54);
                {332}out(ch(code_6), free_code);
                {333}out(ch(wrong_pw), free_password)
            )
            else
                {334}if ((e1_1 Ôëá a_2) && (e2_1 Ôëá i_2)) then
                {335}in(c_2, pke1_3: PublicKey);
                {336}in(c_2, pke2_3: PublicKey);
                {337}in(c_2, wrong_pw_1: bitstring);
                {338}let talksOnlyToHonest_7: bool = false in
                {339}new n_7: bitstring;
                {340}new sskI_6: SecretKey;
                {341}let m_56: bitstring = aenc((tag1,n_7,pk(sskI_6)),pke1_3) in
                {342}out(c_2, m_56);
                {343}in(c_2, m_57: bitstring);
                {344}let (tag2'_3: bitstring,n'_3: bitstring,k1_7: SymmetricKey) = adec(m_57,sskI_6) in
                {345}if (tag2 = tag2'_3) then
                {346}if (n_7 = n'_3) then
                {347}in(c_2, m_58: bitstring);
                {348}let (tag3'_3: bitstring,a'_7: bitstring,h_pkce_3: bitstring,scope_7: bitstring) = dec(m_58,k1_7) in
                {349}if (tag3 = tag3'_3) then
                {350}if (e1_1 = a'_7) then
                {351}new n2_7: bitstring;
                {352}new sskI_7: SecretKey;
                {353}let m_59: bitstring = aenc((tag4,n2_7,pk(sskI_7)),pke2_3) in
                {354}out(c_2, m_59);
                {355}in(c_2, m_60: bitstring);
                {356}let (tag5'_3: bitstring,n2'_7: bitstring,k2_3: SymmetricKey) = adec(m_60,sskI_7) in
                {357}if (tag5 = tag5'_3) then
                {358}if (n2_7 = n2'_7) then
                {359}let m_61: bitstring = enc((tag6,e1_1,h_pkce_3,scope_7,u_2,wrong_pw_1),k2_3) in
                {360}event browserSendsLastMessageToIssuer(m_59,m_60,m_61);
                {361}out(c_2, m_61);
                {362}in(c_2, m_62: bitstring);
                {363}let (tag7'_3: bitstring,code_7: bitstring) = dec(m_62,k2_3) in
                {364}if (tag7 = tag7'_3) then
                {365}let m_63: bitstring = enc((tag8,code_7),k1_7) in
                {366}event browserSendsLastMessageToApp(m_56,m_57,m_58,m_63);
                {367}out(c_2, m_63);
                {368}if talksOnlyToHonest_7 then
                {369}out(c_2, check_reach_browser);
                {370}event browserCompletesProtocol(m_56,m_57,m_58,m_59,m_60,m_61,m_62);
                {371}out(ch(code_7), free_code);
                {372}out(ch(wrong_pw_1), free_password)
) | (
    {373}!
    {374}let c_3: channel = c in
    {375}let i_3: bitstring = i in
    {376}let ski_1: SecretKey = ski in
    {377}let a_3: bitstring = a in
    {378}let pka_1: PublicKey = pk(ska) in
    {379}let u_3: bitstring = u in
    {380}let pku_1: PublicKey = pk(sku) in
    {381}let password_2: bitstring = password in
    {382}in(c_3, e1_2: bitstring);
    {383}in(c_3, e2_2: bitstring);
    {384}if ((e1_2 = a_3) && (e2_2 = u_3)) then
    (
        {385}let talksOnlyToHonest_8: bool = true in
        {386}in(c_3, m_64: bitstring);
        {387}let (tag4': bitstring,n_8: bitstring,spkI_4: PublicKey) = adec(m_64,ski_1) in
        {388}if (tag4 = tag4') then
        {389}new k2_4: SymmetricKey;
        {390}let m_65: bitstring = aenc((tag5,n_8,k2_4),spkI_4) in
        {391}out(c_3, m_65);
        {392}in(c_3, m_66: bitstring);
        {393}let (tag6': bitstring,a'_8: bitstring,h_pkce_4: bitstring,scope_8: bitstring,u'_4: bitstring,password': bitstring) = dec(m_66,k2_4) in
        {394}if (tag6 = tag6') then
        {395}if (a_3 = a'_8) then
        {396}if (u_3 = u'_4) then
        {397}if (password_2 = password') then
        {398}new code_8: bitstring;
        {399}let m_67: bitstring = enc((tag7,code_8),k2_4) in
        {400}event issuerSendsLastMessageToBrowser(m_64,m_65,m_66,m_67);
        {401}out(c_3, m_67);
        {402}in(c_3, m_68: bitstring);
        {403}let (tag9': bitstring,n2_8: bitstring,spkI2: PublicKey) = adec(m_68,ski_1) in
        {404}if (tag9 = tag9') then
        {405}new k3_4: SymmetricKey;
        {406}let m_69: bitstring = aenc((tag10,n2_8,k3_4),spkI2) in
        {407}out(c_3, m_69);
        {408}in(c_3, m_70: bitstring);
        {409}let (tag11': bitstring,pksks: PublicKey,signature: bitstring) = dec(m_70,k3_4) in
        {410}if (tag11 = tag11') then
        {411}let (a'': bitstring,jti_4: bitstring,code': bitstring,pkce_4: bitstring) = check(signature,pksks) in
        {412}if (a_3 = a'') then
        {413}if (code_8 = code') then
        {414}if (h_pkce_4 = hash(pkce_4)) then
        {415}let jtk_4: bitstring = hash_pk(pksks) in
        {416}let M_4: bitstring = (jtk_4,jti_4,scope_8,a_3,i_3,u_3) in
        {417}let m_71: bitstring = enc((tag12,sign(M_4,ski_1)),k3_4) in
        {418}event issuerSendsLastMessageToApp(m_68,m_69,m_70,m_71);
        {419}out(c_3, m_71);
        {420}if talksOnlyToHonest_8 then
        {421}out(c_3, check_reach_issuer);
        {422}event issuerCompletesProtocol(m_64,m_65,m_66,m_68,m_69,m_70);
        {423}out(ch(code_8), free_code);
        {424}out(ch(password_2), free_password)
    )
    else
        {425}if ((e1_2 Ôëá a_3) && (e2_2 = u_3)) then
        (
            {426}in(c_3, pke1_4: PublicKey);
            {427}let talksOnlyToHonest_9: bool = false in
            {428}in(c_3, m_72: bitstring);
            {429}let (tag4'_1: bitstring,n_9: bitstring,spkI_5: PublicKey) = adec(m_72,ski_1) in
            {430}if (tag4 = tag4'_1) then
            {431}new k2_5: SymmetricKey;
            {432}let m_73: bitstring = aenc((tag5,n_9,k2_5),spkI_5) in
            {433}out(c_3, m_73);
            {434}in(c_3, m_74: bitstring);
            {435}let (tag6'_1: bitstring,a'_9: bitstring,h_pkce_5: bitstring,scope_9: bitstring,u'_5: bitstring,password'_1: bitstring) = dec(m_74,k2_5) in
            {436}if (tag6 = tag6'_1) then
            {437}if (e1_2 = a'_9) then
            {438}if (u_3 = u'_5) then
            {439}if (password_2 = password'_1) then
            {440}new code_9: bitstring;
            {441}let m_75: bitstring = enc((tag7,code_9),k2_5) in
            {442}event issuerSendsLastMessageToBrowser(m_72,m_73,m_74,m_75);
            {443}out(c_3, m_75);
            {444}in(c_3, m_76: bitstring);
            {445}let (tag9'_1: bitstring,n2_9: bitstring,spkI2_1: PublicKey) = adec(m_76,ski_1) in
            {446}if (tag9 = tag9'_1) then
            {447}new k3_5: SymmetricKey;
            {448}let m_77: bitstring = aenc((tag10,n2_9,k3_5),spkI2_1) in
            {449}out(c_3, m_77);
            {450}in(c_3, m_78: bitstring);
            {451}let (tag11'_1: bitstring,pksks_1: PublicKey,signature_1: bitstring) = dec(m_78,k3_5) in
            {452}if (tag11 = tag11'_1) then
            {453}let (a''_1: bitstring,jti_5: bitstring,code'_1: bitstring,pkce_5: bitstring) = check(signature_1,pksks_1) in
            {454}if (e1_2 = a''_1) then
            {455}if (code_9 = code'_1) then
            {456}if (h_pkce_5 = hash(pkce_5)) then
            {457}let jtk_5: bitstring = hash_pk(pksks_1) in
            {458}let M_5: bitstring = (jtk_5,jti_5,scope_9,e1_2,i_3,u_3) in
            {459}let m_79: bitstring = enc((tag12,sign(M_5,ski_1)),k3_5) in
            {460}event issuerSendsLastMessageToApp(m_76,m_77,m_78,m_79);
            {461}out(c_3, m_79);
            {462}if talksOnlyToHonest_9 then
            {463}out(c_3, check_reach_issuer);
            {464}event issuerCompletesProtocol(m_72,m_73,m_74,m_76,m_77,m_78);
            {465}out(ch(code_9), free_code);
            {466}out(ch(password_2), free_password)
        )
        else
            {467}if ((e1_2 = a_3) && (e2_2 Ôëá u_3)) then
            (
                {468}in(c_3, pke2_4: PublicKey);
                {469}in(c_3, wrong_pw_2: bitstring);
                {470}let talksOnlyToHonest_10: bool = false in
                {471}in(c_3, m_80: bitstring);
                {472}let (tag4'_2: bitstring,n_10: bitstring,spkI_6: PublicKey) = adec(m_80,ski_1) in
                {473}if (tag4 = tag4'_2) then
                {474}new k2_6: SymmetricKey;
                {475}let m_81: bitstring = aenc((tag5,n_10,k2_6),spkI_6) in
                {476}out(c_3, m_81);
                {477}in(c_3, m_82: bitstring);
                {478}let (tag6'_2: bitstring,a'_10: bitstring,h_pkce_6: bitstring,scope_10: bitstring,u'_6: bitstring,password'_2: bitstring) = dec(m_82,k2_6) in
                {479}if (tag6 = tag6'_2) then
                {480}if (a_3 = a'_10) then
                {481}if (e2_2 = u'_6) then
                {482}if (wrong_pw_2 = password'_2) then
                {483}new code_10: bitstring;
                {484}let m_83: bitstring = enc((tag7,code_10),k2_6) in
                {485}event issuerSendsLastMessageToBrowser(m_80,m_81,m_82,m_83);
                {486}out(c_3, m_83);
                {487}in(c_3, m_84: bitstring);
                {488}let (tag9'_2: bitstring,n2_10: bitstring,spkI2_2: PublicKey) = adec(m_84,ski_1) in
                {489}if (tag9 = tag9'_2) then
                {490}new k3_6: SymmetricKey;
                {491}let m_85: bitstring = aenc((tag10,n2_10,k3_6),spkI2_2) in
                {492}out(c_3, m_85);
                {493}in(c_3, m_86: bitstring);
                {494}let (tag11'_2: bitstring,pksks_2: PublicKey,signature_2: bitstring) = dec(m_86,k3_6) in
                {495}if (tag11 = tag11'_2) then
                {496}let (a''_2: bitstring,jti_6: bitstring,code'_2: bitstring,pkce_6: bitstring) = check(signature_2,pksks_2) in
                {497}if (a_3 = a''_2) then
                {498}if (code_10 = code'_2) then
                {499}if (h_pkce_6 = hash(pkce_6)) then
                {500}let jtk_6: bitstring = hash_pk(pksks_2) in
                {501}let M_6: bitstring = (jtk_6,jti_6,scope_10,a_3,i_3,e2_2) in
                {502}let m_87: bitstring = enc((tag12,sign(M_6,ski_1)),k3_6) in
                {503}event issuerSendsLastMessageToApp(m_84,m_85,m_86,m_87);
                {504}out(c_3, m_87);
                {505}if talksOnlyToHonest_10 then
                {506}out(c_3, check_reach_issuer);
                {507}event issuerCompletesProtocol(m_80,m_81,m_82,m_84,m_85,m_86);
                {508}out(ch(code_10), free_code);
                {509}out(ch(wrong_pw_2), free_password)
            )
            else
                {510}if ((e1_2 Ôëá a_3) && (e2_2 Ôëá u_3)) then
                {511}in(c_3, pke1_5: PublicKey);
                {512}in(c_3, pke2_5: PublicKey);
                {513}in(c_3, wrong_pw_3: bitstring);
                {514}let talksOnlyToHonest_11: bool = false in
                {515}in(c_3, m_88: bitstring);
                {516}let (tag4'_3: bitstring,n_11: bitstring,spkI_7: PublicKey) = adec(m_88,ski_1) in
                {517}if (tag4 = tag4'_3) then
                {518}new k2_7: SymmetricKey;
                {519}let m_89: bitstring = aenc((tag5,n_11,k2_7),spkI_7) in
                {520}out(c_3, m_89);
                {521}in(c_3, m_90: bitstring);
                {522}let (tag6'_3: bitstring,a'_11: bitstring,h_pkce_7: bitstring,scope_11: bitstring,u'_7: bitstring,password'_3: bitstring) = dec(m_90,k2_7) in
                {523}if (tag6 = tag6'_3) then
                {524}if (e1_2 = a'_11) then
                {525}if (e2_2 = u'_7) then
                {526}if (wrong_pw_3 = password'_3) then
                {527}new code_11: bitstring;
                {528}let m_91: bitstring = enc((tag7,code_11),k2_7) in
                {529}event issuerSendsLastMessageToBrowser(m_88,m_89,m_90,m_91);
                {530}out(c_3, m_91);
                {531}in(c_3, m_92: bitstring);
                {532}let (tag9'_3: bitstring,n2_11: bitstring,spkI2_3: PublicKey) = adec(m_92,ski_1) in
                {533}if (tag9 = tag9'_3) then
                {534}new k3_7: SymmetricKey;
                {535}let m_93: bitstring = aenc((tag10,n2_11,k3_7),spkI2_3) in
                {536}out(c_3, m_93);
                {537}in(c_3, m_94: bitstring);
                {538}let (tag11'_3: bitstring,pksks_3: PublicKey,signature_3: bitstring) = dec(m_94,k3_7) in
                {539}if (tag11 = tag11'_3) then
                {540}let (a''_3: bitstring,jti_7: bitstring,code'_3: bitstring,pkce_7: bitstring) = check(signature_3,pksks_3) in
                {541}if (e1_2 = a''_3) then
                {542}if (code_11 = code'_3) then
                {543}if (h_pkce_7 = hash(pkce_7)) then
                {544}let jtk_7: bitstring = hash_pk(pksks_3) in
                {545}let M_7: bitstring = (jtk_7,jti_7,scope_11,e1_2,i_3,e2_2) in
                {546}let m_95: bitstring = enc((tag12,sign(M_7,ski_1)),k3_7) in
                {547}event issuerSendsLastMessageToApp(m_92,m_93,m_94,m_95);
                {548}out(c_3, m_95);
                {549}if talksOnlyToHonest_11 then
                {550}out(c_3, check_reach_issuer);
                {551}event issuerCompletesProtocol(m_88,m_89,m_90,m_92,m_93,m_94);
                {552}out(ch(code_11), free_code);
                {553}out(ch(wrong_pw_3), free_password)
)

--  Process 1 (that is, process 0, with let moved downwards):
{1}new a: bitstring;
{2}new u: bitstring;
{3}new i: bitstring;
{4}out(c, a);
{5}out(c, u);
{6}out(c, i);
{7}new ska: SecretKey;
{8}new sku: SecretKey;
{9}new ski: SecretKey;
{10}out(c, pk(ska));
{11}out(c, pk(sku));
{12}out(c, pk(ski));
{13}new password: bitstring;
(
    {14}!
    {15}let c_1: channel = c in
    {22}in(c_1, e1: bitstring);
    {23}in(c_1, e2: bitstring);
    {21}let pki: PublicKey = pk(ski) in
    {20}let i_1: bitstring = i in
    {18}let u_1: bitstring = u in
    {17}let ska_1: SecretKey = ska in
    {16}let a_1: bitstring = a in
    {24}if ((e1 = u_1) && (e2 = i_1)) then
    (
        {26}in(c_1, m_1: bitstring);
        {27}let (tag1': bitstring,n: bitstring,spkI: PublicKey) = adec(m_1,ska_1) in
        {28}if (tag1 = tag1') then
        {29}new k1: SymmetricKey;
        {30}let m_2: bitstring = aenc((tag2,n,k1),spkI) in
        {31}out(c_1, m_2);
        {32}new pkce: bitstring;
        {33}new scope: bitstring;
        {34}let m_3: bitstring = enc((tag3,a_1,hash(pkce),scope),k1) in
        {35}event appSendsLastMessageToBrowser(m_1,m_2,m_3);
        {36}out(c_1, m_3);
        {37}in(c_1, m_8: bitstring);
        {38}let (tag8': bitstring,code: bitstring) = dec(m_8,k1) in
        {39}if (tag8 = tag8') then
        {40}new n2: bitstring;
        {41}new sskI2: SecretKey;
        {42}let m_9: bitstring = aenc((tag9,n2,pk(sskI2)),pki) in
        {43}out(c_1, m_9);
        {44}in(c_1, m_10: bitstring);
        {45}let (tag10': bitstring,n2': bitstring,k3: SymmetricKey) = adec(m_10,sskI2) in
        {46}if (tag10 = tag10') then
        {47}if (n2 = n2') then
        {48}new sks: SecretKey;
        {49}new jti: bitstring;
        {50}let T2: bitstring = (a_1,jti,code,pkce) in
        {51}let m_11: bitstring = enc((tag11,pk(sks),sign(T2,sks)),k3) in
        {52}event appSendsLastMessageToIssuer(m_9,m_10,m_11);
        {53}out(c_1, m_11);
        {54}in(c_1, m_12: bitstring);
        {55}out(c_1, check_reach_app);
        {56}let (tag12': bitstring,signed_M: bitstring) = dec(m_12,k3) in
        {57}if (tag12 = tag12') then
        {58}let M: bitstring = check(signed_M,pki) in
        {59}let (jtk: bitstring,jti': bitstring,scope': bitstring,a': bitstring,i': bitstring,u': bitstring) = M in
        {60}if (jtk = hash_pk(pk(sks))) then
        {61}if (jti = jti') then
        {62}if (scope = scope') then
        {63}if (a_1 = a') then
        {64}if (i_1 = i') then
        {65}if (u_1 = u') then
        {25}let talksOnlyToHonest: bool = true in
        {66}if talksOnlyToHonest then
        {67}out(c_1, check_reach_app);
        {68}event appCompletesProtocol(m_1,m_2,m_3,m_8,m_9,m_10,m_11,m_12);
        {69}out(ch(code), free_code)
    )
    else
        {70}if ((e1 Ôëá u_1) && (e2 = i_1)) then
        (
            {71}in(c_1, pke1: PublicKey);
            {73}in(c_1, m: bitstring);
            {74}let (tag1'_1: bitstring,n_1: bitstring,spkI_1: PublicKey) = adec(m,ska_1) in
            {75}if (tag1 = tag1'_1) then
            {76}new k1_1: SymmetricKey;
            {77}let m_4: bitstring = aenc((tag2,n_1,k1_1),spkI_1) in
            {78}out(c_1, m_4);
            {79}new pkce_1: bitstring;
            {80}new scope_1: bitstring;
            {81}let m_5: bitstring = enc((tag3,a_1,hash(pkce_1),scope_1),k1_1) in
            {82}event appSendsLastMessageToBrowser(m,m_4,m_5);
            {83}out(c_1, m_5);
            {84}in(c_1, m_6: bitstring);
            {85}let (tag8'_1: bitstring,code_1: bitstring) = dec(m_6,k1_1) in
            {86}if (tag8 = tag8'_1) then
            {87}new n2_1: bitstring;
            {88}new sskI2_1: SecretKey;
            {89}let m_7: bitstring = aenc((tag9,n2_1,pk(sskI2_1)),pki) in
            {90}out(c_1, m_7);
            {91}in(c_1, m_13: bitstring);
            {92}let (tag10'_1: bitstring,n2'_1: bitstring,k3_1: SymmetricKey) = adec(m_13,sskI2_1) in
            {93}if (tag10 = tag10'_1) then
            {94}if (n2_1 = n2'_1) then
            {95}new sks_1: SecretKey;
            {96}new jti_1: bitstring;
            {97}let T2_1: bitstring = (a_1,jti_1,code_1,pkce_1) in
            {98}let m_14: bitstring = enc((tag11,pk(sks_1),sign(T2_1,sks_1)),k3_1) in
            {99}event appSendsLastMessageToIssuer(m_7,m_13,m_14);
            {100}out(c_1, m_14);
            {101}in(c_1, m_15: bitstring);
            {102}out(c_1, check_reach_app);
            {103}let (tag12'_1: bitstring,signed_M_1: bitstring) = dec(m_15,k3_1) in
            {104}if (tag12 = tag12'_1) then
            {105}let M_1: bitstring = check(signed_M_1,pki) in
            {106}let (jtk_1: bitstring,jti'_1: bitstring,scope'_1: bitstring,a'_1: bitstring,i'_1: bitstring,u'_1: bitstring) = M_1 in
            {107}if (jtk_1 = hash_pk(pk(sks_1))) then
            {108}if (jti_1 = jti'_1) then
            {109}if (scope_1 = scope'_1) then
            {110}if (a_1 = a'_1) then
            {111}if (i_1 = i'_1) then
            {112}if (e1 = u'_1) then
            {72}let talksOnlyToHonest_1: bool = false in
            {113}if talksOnlyToHonest_1 then
            {114}out(c_1, check_reach_app);
            {115}event appCompletesProtocol(m,m_4,m_5,m_6,m_7,m_13,m_14,m_15);
            {116}out(ch(code_1), free_code)
        )
        else
            {117}if ((e1 = u_1) && (e2 Ôëá i_1)) then
            (
                {118}in(c_1, pke2: PublicKey);
                {120}in(c_1, m_16: bitstring);
                {121}let (tag1'_2: bitstring,n_2: bitstring,spkI_2: PublicKey) = adec(m_16,ska_1) in
                {122}if (tag1 = tag1'_2) then
                {123}new k1_2: SymmetricKey;
                {124}let m_17: bitstring = aenc((tag2,n_2,k1_2),spkI_2) in
                {125}out(c_1, m_17);
                {126}new pkce_2: bitstring;
                {127}new scope_2: bitstring;
                {128}let m_18: bitstring = enc((tag3,a_1,hash(pkce_2),scope_2),k1_2) in
                {129}event appSendsLastMessageToBrowser(m_16,m_17,m_18);
                {130}out(c_1, m_18);
                {131}in(c_1, m_19: bitstring);
                {132}let (tag8'_2: bitstring,code_2: bitstring) = dec(m_19,k1_2) in
                {133}if (tag8 = tag8'_2) then
                {134}new n2_2: bitstring;
                {135}new sskI2_2: SecretKey;
                {136}let m_20: bitstring = aenc((tag9,n2_2,pk(sskI2_2)),pke2) in
                {137}out(c_1, m_20);
                {138}in(c_1, m_21: bitstring);
                {139}let (tag10'_2: bitstring,n2'_2: bitstring,k3_2: SymmetricKey) = adec(m_21,sskI2_2) in
                {140}if (tag10 = tag10'_2) then
                {141}if (n2_2 = n2'_2) then
                {142}new sks_2: SecretKey;
                {143}new jti_2: bitstring;
                {144}let T2_2: bitstring = (a_1,jti_2,code_2,pkce_2) in
                {145}let m_22: bitstring = enc((tag11,pk(sks_2),sign(T2_2,sks_2)),k3_2) in
                {146}event appSendsLastMessageToIssuer(m_20,m_21,m_22);
                {147}out(c_1, m_22);
                {148}in(c_1, m_23: bitstring);
                {149}out(c_1, check_reach_app);
                {150}let (tag12'_2: bitstring,signed_M_2: bitstring) = dec(m_23,k3_2) in
                {151}if (tag12 = tag12'_2) then
                {152}let M_2: bitstring = check(signed_M_2,pke2) in
                {153}let (jtk_2: bitstring,jti'_2: bitstring,scope'_2: bitstring,a'_2: bitstring,i'_2: bitstring,u'_2: bitstring) = M_2 in
                {154}if (jtk_2 = hash_pk(pk(sks_2))) then
                {155}if (jti_2 = jti'_2) then
                {156}if (scope_2 = scope'_2) then
                {157}if (a_1 = a'_2) then
                {158}if (e2 = i'_2) then
                {159}if (u_1 = u'_2) then
                {119}let talksOnlyToHonest_2: bool = false in
                {160}if talksOnlyToHonest_2 then
                {161}out(c_1, check_reach_app);
                {162}event appCompletesProtocol(m_16,m_17,m_18,m_19,m_20,m_21,m_22,m_23);
                {163}out(ch(code_2), free_code)
            )
            else
                {164}if ((e1 Ôëá u_1) && (e2 Ôëá i_1)) then
                {165}in(c_1, pke1_1: PublicKey);
                {166}in(c_1, pke2_1: PublicKey);
                {168}in(c_1, m_24: bitstring);
                {169}let (tag1'_3: bitstring,n_3: bitstring,spkI_3: PublicKey) = adec(m_24,ska_1) in
                {170}if (tag1 = tag1'_3) then
                {171}new k1_3: SymmetricKey;
                {172}let m_25: bitstring = aenc((tag2,n_3,k1_3),spkI_3) in
                {173}out(c_1, m_25);
                {174}new pkce_3: bitstring;
                {175}new scope_3: bitstring;
                {176}let m_26: bitstring = enc((tag3,a_1,hash(pkce_3),scope_3),k1_3) in
                {177}event appSendsLastMessageToBrowser(m_24,m_25,m_26);
                {178}out(c_1, m_26);
                {179}in(c_1, m_27: bitstring);
                {180}let (tag8'_3: bitstring,code_3: bitstring) = dec(m_27,k1_3) in
                {181}if (tag8 = tag8'_3) then
                {182}new n2_3: bitstring;
                {183}new sskI2_3: SecretKey;
                {184}let m_28: bitstring = aenc((tag9,n2_3,pk(sskI2_3)),pke2_1) in
                {185}out(c_1, m_28);
                {186}in(c_1, m_29: bitstring);
                {187}let (tag10'_3: bitstring,n2'_3: bitstring,k3_3: SymmetricKey) = adec(m_29,sskI2_3) in
                {188}if (tag10 = tag10'_3) then
                {189}if (n2_3 = n2'_3) then
                {190}new sks_3: SecretKey;
                {191}new jti_3: bitstring;
                {192}let T2_3: bitstring = (a_1,jti_3,code_3,pkce_3) in
                {193}let m_30: bitstring = enc((tag11,pk(sks_3),sign(T2_3,sks_3)),k3_3) in
                {194}event appSendsLastMessageToIssuer(m_28,m_29,m_30);
                {195}out(c_1, m_30);
                {196}in(c_1, m_31: bitstring);
                {197}out(c_1, check_reach_app);
                {198}let (tag12'_3: bitstring,signed_M_3: bitstring) = dec(m_31,k3_3) in
                {199}if (tag12 = tag12'_3) then
                {200}let M_3: bitstring = check(signed_M_3,pke2_1) in
                {201}let (jtk_3: bitstring,jti'_3: bitstring,scope'_3: bitstring,a'_3: bitstring,i'_3: bitstring,u'_3: bitstring) = M_3 in
                {202}if (jtk_3 = hash_pk(pk(sks_3))) then
                {203}if (jti_3 = jti'_3) then
                {204}if (scope_3 = scope'_3) then
                {205}if (a_1 = a'_3) then
                {206}if (e2 = i'_3) then
                {207}if (e1 = u'_3) then
                {167}let talksOnlyToHonest_3: bool = false in
                {208}if talksOnlyToHonest_3 then
                {209}out(c_1, check_reach_app);
                {210}event appCompletesProtocol(m_24,m_25,m_26,m_27,m_28,m_29,m_30,m_31);
                {211}out(ch(code_3), free_code)
) | (
    {212}!
    {213}let c_2: channel = c in
    {221}in(c_2, e1_1: bitstring);
    {222}in(c_2, e2_1: bitstring);
    {220}let password_1: bitstring = password in
    {219}let pki_1: PublicKey = pk(ski) in
    {218}let i_2: bitstring = i in
    {217}let pka: PublicKey = pk(ska) in
    {216}let a_2: bitstring = a in
    {214}let u_2: bitstring = u in
    {223}if ((e1_1 = a_2) && (e2_1 = i_2)) then
    (
        {225}new n_4: bitstring;
        {226}new sskI: SecretKey;
        {227}let m_32: bitstring = aenc((tag1,n_4,pk(sskI)),pka) in
        {228}out(c_2, m_32);
        {229}in(c_2, m_33: bitstring);
        {230}let (tag2': bitstring,n': bitstring,k1_4: SymmetricKey) = adec(m_33,sskI) in
        {231}if (tag2 = tag2') then
        {232}if (n_4 = n') then
        {233}in(c_2, m_34: bitstring);
        {234}let (tag3': bitstring,a'_4: bitstring,h_pkce: bitstring,scope_4: bitstring) = dec(m_34,k1_4) in
        {235}if (tag3 = tag3') then
        {236}if (a_2 = a'_4) then
        {237}new n2_4: bitstring;
        {238}new sskI_1: SecretKey;
        {239}let m_35: bitstring = aenc((tag4,n2_4,pk(sskI_1)),pki_1) in
        {240}out(c_2, m_35);
        {241}in(c_2, m_36: bitstring);
        {242}let (tag5': bitstring,n2'_4: bitstring,k2: SymmetricKey) = adec(m_36,sskI_1) in
        {243}if (tag5 = tag5') then
        {244}if (n2_4 = n2'_4) then
        {245}let m_37: bitstring = enc((tag6,a_2,h_pkce,scope_4,u_2,password_1),k2) in
        {246}event browserSendsLastMessageToIssuer(m_35,m_36,m_37);
        {247}out(c_2, m_37);
        {248}in(c_2, m_38: bitstring);
        {249}let (tag7': bitstring,code_4: bitstring) = dec(m_38,k2) in
        {250}if (tag7 = tag7') then
        {251}let m_39: bitstring = enc((tag8,code_4),k1_4) in
        {252}event browserSendsLastMessageToApp(m_32,m_33,m_34,m_39);
        {253}out(c_2, m_39);
        {224}let talksOnlyToHonest_4: bool = true in
        {254}if talksOnlyToHonest_4 then
        {255}out(c_2, check_reach_browser);
        {256}event browserCompletesProtocol(m_32,m_33,m_34,m_35,m_36,m_37,m_38);
        {257}out(ch(code_4), free_code);
        {258}out(ch(password_1), free_password)
    )
    else
        {259}if ((e1_1 Ôëá a_2) && (e2_1 = i_2)) then
        (
            {260}in(c_2, pke1_2: PublicKey);
            {262}new n_5: bitstring;
            {263}new sskI_2: SecretKey;
            {264}let m_40: bitstring = aenc((tag1,n_5,pk(sskI_2)),pke1_2) in
            {265}out(c_2, m_40);
            {266}in(c_2, m_41: bitstring);
            {267}let (tag2'_1: bitstring,n'_1: bitstring,k1_5: SymmetricKey) = adec(m_41,sskI_2) in
            {268}if (tag2 = tag2'_1) then
            {269}if (n_5 = n'_1) then
            {270}in(c_2, m_42: bitstring);
            {271}let (tag3'_1: bitstring,a'_5: bitstring,h_pkce_1: bitstring,scope_5: bitstring) = dec(m_42,k1_5) in
            {272}if (tag3 = tag3'_1) then
            {273}if (e1_1 = a'_5) then
            {274}new n2_5: bitstring;
            {275}new sskI_3: SecretKey;
            {276}let m_43: bitstring = aenc((tag4,n2_5,pk(sskI_3)),pki_1) in
            {277}out(c_2, m_43);
            {278}in(c_2, m_44: bitstring);
            {279}let (tag5'_1: bitstring,n2'_5: bitstring,k2_1: SymmetricKey) = adec(m_44,sskI_3) in
            {280}if (tag5 = tag5'_1) then
            {281}if (n2_5 = n2'_5) then
            {282}let m_45: bitstring = enc((tag6,e1_1,h_pkce_1,scope_5,u_2,password_1),k2_1) in
            {283}event browserSendsLastMessageToIssuer(m_43,m_44,m_45);
            {284}out(c_2, m_45);
            {285}in(c_2, m_46: bitstring);
            {286}let (tag7'_1: bitstring,code_5: bitstring) = dec(m_46,k2_1) in
            {287}if (tag7 = tag7'_1) then
            {288}let m_47: bitstring = enc((tag8,code_5),k1_5) in
            {289}event browserSendsLastMessageToApp(m_40,m_41,m_42,m_47);
            {290}out(c_2, m_47);
            {261}let talksOnlyToHonest_5: bool = false in
            {291}if talksOnlyToHonest_5 then
            {292}out(c_2, check_reach_browser);
            {293}event browserCompletesProtocol(m_40,m_41,m_42,m_43,m_44,m_45,m_46);
            {294}out(ch(code_5), free_code);
            {295}out(ch(password_1), free_password)
        )
        else
            {296}if ((e1_1 = a_2) && (e2_1 Ôëá i_2)) then
            (
                {297}in(c_2, pke2_2: PublicKey);
                {298}in(c_2, wrong_pw: bitstring);
                {300}new n_6: bitstring;
                {301}new sskI_4: SecretKey;
                {302}let m_48: bitstring = aenc((tag1,n_6,pk(sskI_4)),pka) in
                {303}out(c_2, m_48);
                {304}in(c_2, m_49: bitstring);
                {305}let (tag2'_2: bitstring,n'_2: bitstring,k1_6: SymmetricKey) = adec(m_49,sskI_4) in
                {306}if (tag2 = tag2'_2) then
                {307}if (n_6 = n'_2) then
                {308}in(c_2, m_50: bitstring);
                {309}let (tag3'_2: bitstring,a'_6: bitstring,h_pkce_2: bitstring,scope_6: bitstring) = dec(m_50,k1_6) in
                {310}if (tag3 = tag3'_2) then
                {311}if (a_2 = a'_6) then
                {312}new n2_6: bitstring;
                {313}new sskI_5: SecretKey;
                {314}let m_51: bitstring = aenc((tag4,n2_6,pk(sskI_5)),pke2_2) in
                {315}out(c_2, m_51);
                {316}in(c_2, m_52: bitstring);
                {317}let (tag5'_2: bitstring,n2'_6: bitstring,k2_2: SymmetricKey) = adec(m_52,sskI_5) in
                {318}if (tag5 = tag5'_2) then
                {319}if (n2_6 = n2'_6) then
                {320}let m_53: bitstring = enc((tag6,a_2,h_pkce_2,scope_6,u_2,wrong_pw),k2_2) in
                {321}event browserSendsLastMessageToIssuer(m_51,m_52,m_53);
                {322}out(c_2, m_53);
                {323}in(c_2, m_54: bitstring);
                {324}let (tag7'_2: bitstring,code_6: bitstring) = dec(m_54,k2_2) in
                {325}if (tag7 = tag7'_2) then
                {326}let m_55: bitstring = enc((tag8,code_6),k1_6) in
                {327}event browserSendsLastMessageToApp(m_48,m_49,m_50,m_55);
                {328}out(c_2, m_55);
                {299}let talksOnlyToHonest_6: bool = false in
                {329}if talksOnlyToHonest_6 then
                {330}out(c_2, check_reach_browser);
                {331}event browserCompletesProtocol(m_48,m_49,m_50,m_51,m_52,m_53,m_54);
                {332}out(ch(code_6), free_code);
                {333}out(ch(wrong_pw), free_password)
            )
            else
                {334}if ((e1_1 Ôëá a_2) && (e2_1 Ôëá i_2)) then
                {335}in(c_2, pke1_3: PublicKey);
                {336}in(c_2, pke2_3: PublicKey);
                {337}in(c_2, wrong_pw_1: bitstring);
                {339}new n_7: bitstring;
                {340}new sskI_6: SecretKey;
                {341}let m_56: bitstring = aenc((tag1,n_7,pk(sskI_6)),pke1_3) in
                {342}out(c_2, m_56);
                {343}in(c_2, m_57: bitstring);
                {344}let (tag2'_3: bitstring,n'_3: bitstring,k1_7: SymmetricKey) = adec(m_57,sskI_6) in
                {345}if (tag2 = tag2'_3) then
                {346}if (n_7 = n'_3) then
                {347}in(c_2, m_58: bitstring);
                {348}let (tag3'_3: bitstring,a'_7: bitstring,h_pkce_3: bitstring,scope_7: bitstring) = dec(m_58,k1_7) in
                {349}if (tag3 = tag3'_3) then
                {350}if (e1_1 = a'_7) then
                {351}new n2_7: bitstring;
                {352}new sskI_7: SecretKey;
                {353}let m_59: bitstring = aenc((tag4,n2_7,pk(sskI_7)),pke2_3) in
                {354}out(c_2, m_59);
                {355}in(c_2, m_60: bitstring);
                {356}let (tag5'_3: bitstring,n2'_7: bitstring,k2_3: SymmetricKey) = adec(m_60,sskI_7) in
                {357}if (tag5 = tag5'_3) then
                {358}if (n2_7 = n2'_7) then
                {359}let m_61: bitstring = enc((tag6,e1_1,h_pkce_3,scope_7,u_2,wrong_pw_1),k2_3) in
                {360}event browserSendsLastMessageToIssuer(m_59,m_60,m_61);
                {361}out(c_2, m_61);
                {362}in(c_2, m_62: bitstring);
                {363}let (tag7'_3: bitstring,code_7: bitstring) = dec(m_62,k2_3) in
                {364}if (tag7 = tag7'_3) then
                {365}let m_63: bitstring = enc((tag8,code_7),k1_7) in
                {366}event browserSendsLastMessageToApp(m_56,m_57,m_58,m_63);
                {367}out(c_2, m_63);
                {338}let talksOnlyToHonest_7: bool = false in
                {368}if talksOnlyToHonest_7 then
                {369}out(c_2, check_reach_browser);
                {370}event browserCompletesProtocol(m_56,m_57,m_58,m_59,m_60,m_61,m_62);
                {371}out(ch(code_7), free_code);
                {372}out(ch(wrong_pw_1), free_password)
) | (
    {373}!
    {374}let c_3: channel = c in
    {382}in(c_3, e1_2: bitstring);
    {383}in(c_3, e2_2: bitstring);
    {381}let password_2: bitstring = password in
    {379}let u_3: bitstring = u in
    {377}let a_3: bitstring = a in
    {376}let ski_1: SecretKey = ski in
    {375}let i_3: bitstring = i in
    {384}if ((e1_2 = a_3) && (e2_2 = u_3)) then
    (
        {386}in(c_3, m_64: bitstring);
        {387}let (tag4': bitstring,n_8: bitstring,spkI_4: PublicKey) = adec(m_64,ski_1) in
        {388}if (tag4 = tag4') then
        {389}new k2_4: SymmetricKey;
        {390}let m_65: bitstring = aenc((tag5,n_8,k2_4),spkI_4) in
        {391}out(c_3, m_65);
        {392}in(c_3, m_66: bitstring);
        {393}let (tag6': bitstring,a'_8: bitstring,h_pkce_4: bitstring,scope_8: bitstring,u'_4: bitstring,password': bitstring) = dec(m_66,k2_4) in
        {394}if (tag6 = tag6') then
        {395}if (a_3 = a'_8) then
        {396}if (u_3 = u'_4) then
        {397}if (password_2 = password') then
        {398}new code_8: bitstring;
        {399}let m_67: bitstring = enc((tag7,code_8),k2_4) in
        {400}event issuerSendsLastMessageToBrowser(m_64,m_65,m_66,m_67);
        {401}out(c_3, m_67);
        {402}in(c_3, m_68: bitstring);
        {403}let (tag9': bitstring,n2_8: bitstring,spkI2: PublicKey) = adec(m_68,ski_1) in
        {404}if (tag9 = tag9') then
        {405}new k3_4: SymmetricKey;
        {406}let m_69: bitstring = aenc((tag10,n2_8,k3_4),spkI2) in
        {407}out(c_3, m_69);
        {408}in(c_3, m_70: bitstring);
        {409}let (tag11': bitstring,pksks: PublicKey,signature: bitstring) = dec(m_70,k3_4) in
        {410}if (tag11 = tag11') then
        {411}let (a'': bitstring,jti_4: bitstring,code': bitstring,pkce_4: bitstring) = check(signature,pksks) in
        {412}if (a_3 = a'') then
        {413}if (code_8 = code') then
        {414}if (h_pkce_4 = hash(pkce_4)) then
        {415}let jtk_4: bitstring = hash_pk(pksks) in
        {416}let M_4: bitstring = (jtk_4,jti_4,scope_8,a_3,i_3,u_3) in
        {417}let m_71: bitstring = enc((tag12,sign(M_4,ski_1)),k3_4) in
        {418}event issuerSendsLastMessageToApp(m_68,m_69,m_70,m_71);
        {419}out(c_3, m_71);
        {385}let talksOnlyToHonest_8: bool = true in
        {420}if talksOnlyToHonest_8 then
        {421}out(c_3, check_reach_issuer);
        {422}event issuerCompletesProtocol(m_64,m_65,m_66,m_68,m_69,m_70);
        {423}out(ch(code_8), free_code);
        {424}out(ch(password_2), free_password)
    )
    else
        {425}if ((e1_2 Ôëá a_3) && (e2_2 = u_3)) then
        (
            {426}in(c_3, pke1_4: PublicKey);
            {428}in(c_3, m_72: bitstring);
            {429}let (tag4'_1: bitstring,n_9: bitstring,spkI_5: PublicKey) = adec(m_72,ski_1) in
            {430}if (tag4 = tag4'_1) then
            {431}new k2_5: SymmetricKey;
            {432}let m_73: bitstring = aenc((tag5,n_9,k2_5),spkI_5) in
            {433}out(c_3, m_73);
            {434}in(c_3, m_74: bitstring);
            {435}let (tag6'_1: bitstring,a'_9: bitstring,h_pkce_5: bitstring,scope_9: bitstring,u'_5: bitstring,password'_1: bitstring) = dec(m_74,k2_5) in
            {436}if (tag6 = tag6'_1) then
            {437}if (e1_2 = a'_9) then
            {438}if (u_3 = u'_5) then
            {439}if (password_2 = password'_1) then
            {440}new code_9: bitstring;
            {441}let m_75: bitstring = enc((tag7,code_9),k2_5) in
            {442}event issuerSendsLastMessageToBrowser(m_72,m_73,m_74,m_75);
            {443}out(c_3, m_75);
            {444}in(c_3, m_76: bitstring);
            {445}let (tag9'_1: bitstring,n2_9: bitstring,spkI2_1: PublicKey) = adec(m_76,ski_1) in
            {446}if (tag9 = tag9'_1) then
            {447}new k3_5: SymmetricKey;
            {448}let m_77: bitstring = aenc((tag10,n2_9,k3_5),spkI2_1) in
            {449}out(c_3, m_77);
            {450}in(c_3, m_78: bitstring);
            {451}let (tag11'_1: bitstring,pksks_1: PublicKey,signature_1: bitstring) = dec(m_78,k3_5) in
            {452}if (tag11 = tag11'_1) then
            {453}let (a''_1: bitstring,jti_5: bitstring,code'_1: bitstring,pkce_5: bitstring) = check(signature_1,pksks_1) in
            {454}if (e1_2 = a''_1) then
            {455}if (code_9 = code'_1) then
            {456}if (h_pkce_5 = hash(pkce_5)) then
            {457}let jtk_5: bitstring = hash_pk(pksks_1) in
            {458}let M_5: bitstring = (jtk_5,jti_5,scope_9,e1_2,i_3,u_3) in
            {459}let m_79: bitstring = enc((tag12,sign(M_5,ski_1)),k3_5) in
            {460}event issuerSendsLastMessageToApp(m_76,m_77,m_78,m_79);
            {461}out(c_3, m_79);
            {427}let talksOnlyToHonest_9: bool = false in
            {462}if talksOnlyToHonest_9 then
            {463}out(c_3, check_reach_issuer);
            {464}event issuerCompletesProtocol(m_72,m_73,m_74,m_76,m_77,m_78);
            {465}out(ch(code_9), free_code);
            {466}out(ch(password_2), free_password)
        )
        else
            {467}if ((e1_2 = a_3) && (e2_2 Ôëá u_3)) then
            (
                {468}in(c_3, pke2_4: PublicKey);
                {469}in(c_3, wrong_pw_2: bitstring);
                {471}in(c_3, m_80: bitstring);
                {472}let (tag4'_2: bitstring,n_10: bitstring,spkI_6: PublicKey) = adec(m_80,ski_1) in
                {473}if (tag4 = tag4'_2) then
                {474}new k2_6: SymmetricKey;
                {475}let m_81: bitstring = aenc((tag5,n_10,k2_6),spkI_6) in
                {476}out(c_3, m_81);
                {477}in(c_3, m_82: bitstring);
                {478}let (tag6'_2: bitstring,a'_10: bitstring,h_pkce_6: bitstring,scope_10: bitstring,u'_6: bitstring,password'_2: bitstring) = dec(m_82,k2_6) in
                {479}if (tag6 = tag6'_2) then
                {480}if (a_3 = a'_10) then
                {481}if (e2_2 = u'_6) then
                {482}if (wrong_pw_2 = password'_2) then
                {483}new code_10: bitstring;
                {484}let m_83: bitstring = enc((tag7,code_10),k2_6) in
                {485}event issuerSendsLastMessageToBrowser(m_80,m_81,m_82,m_83);
                {486}out(c_3, m_83);
                {487}in(c_3, m_84: bitstring);
                {488}let (tag9'_2: bitstring,n2_10: bitstring,spkI2_2: PublicKey) = adec(m_84,ski_1) in
                {489}if (tag9 = tag9'_2) then
                {490}new k3_6: SymmetricKey;
                {491}let m_85: bitstring = aenc((tag10,n2_10,k3_6),spkI2_2) in
                {492}out(c_3, m_85);
                {493}in(c_3, m_86: bitstring);
                {494}let (tag11'_2: bitstring,pksks_2: PublicKey,signature_2: bitstring) = dec(m_86,k3_6) in
                {495}if (tag11 = tag11'_2) then
                {496}let (a''_2: bitstring,jti_6: bitstring,code'_2: bitstring,pkce_6: bitstring) = check(signature_2,pksks_2) in
                {497}if (a_3 = a''_2) then
                {498}if (code_10 = code'_2) then
                {499}if (h_pkce_6 = hash(pkce_6)) then
                {500}let jtk_6: bitstring = hash_pk(pksks_2) in
                {501}let M_6: bitstring = (jtk_6,jti_6,scope_10,a_3,i_3,e2_2) in
                {502}let m_87: bitstring = enc((tag12,sign(M_6,ski_1)),k3_6) in
                {503}event issuerSendsLastMessageToApp(m_84,m_85,m_86,m_87);
                {504}out(c_3, m_87);
                {470}let talksOnlyToHonest_10: bool = false in
                {505}if talksOnlyToHonest_10 then
                {506}out(c_3, check_reach_issuer);
                {507}event issuerCompletesProtocol(m_80,m_81,m_82,m_84,m_85,m_86);
                {508}out(ch(code_10), free_code);
                {509}out(ch(wrong_pw_2), free_password)
            )
            else
                {510}if ((e1_2 Ôëá a_3) && (e2_2 Ôëá u_3)) then
                {511}in(c_3, pke1_5: PublicKey);
                {512}in(c_3, pke2_5: PublicKey);
                {513}in(c_3, wrong_pw_3: bitstring);
                {515}in(c_3, m_88: bitstring);
                {516}let (tag4'_3: bitstring,n_11: bitstring,spkI_7: PublicKey) = adec(m_88,ski_1) in
                {517}if (tag4 = tag4'_3) then
                {518}new k2_7: SymmetricKey;
                {519}let m_89: bitstring = aenc((tag5,n_11,k2_7),spkI_7) in
                {520}out(c_3, m_89);
                {521}in(c_3, m_90: bitstring);
                {522}let (tag6'_3: bitstring,a'_11: bitstring,h_pkce_7: bitstring,scope_11: bitstring,u'_7: bitstring,password'_3: bitstring) = dec(m_90,k2_7) in
                {523}if (tag6 = tag6'_3) then
                {524}if (e1_2 = a'_11) then
                {525}if (e2_2 = u'_7) then
                {526}if (wrong_pw_3 = password'_3) then
                {527}new code_11: bitstring;
                {528}let m_91: bitstring = enc((tag7,code_11),k2_7) in
                {529}event issuerSendsLastMessageToBrowser(m_88,m_89,m_90,m_91);
                {530}out(c_3, m_91);
                {531}in(c_3, m_92: bitstring);
                {532}let (tag9'_3: bitstring,n2_11: bitstring,spkI2_3: PublicKey) = adec(m_92,ski_1) in
                {533}if (tag9 = tag9'_3) then
                {534}new k3_7: SymmetricKey;
                {535}let m_93: bitstring = aenc((tag10,n2_11,k3_7),spkI2_3) in
                {536}out(c_3, m_93);
                {537}in(c_3, m_94: bitstring);
                {538}let (tag11'_3: bitstring,pksks_3: PublicKey,signature_3: bitstring) = dec(m_94,k3_7) in
                {539}if (tag11 = tag11'_3) then
                {540}let (a''_3: bitstring,jti_7: bitstring,code'_3: bitstring,pkce_7: bitstring) = check(signature_3,pksks_3) in
                {541}if (e1_2 = a''_3) then
                {542}if (code_11 = code'_3) then
                {543}if (h_pkce_7 = hash(pkce_7)) then
                {544}let jtk_7: bitstring = hash_pk(pksks_3) in
                {545}let M_7: bitstring = (jtk_7,jti_7,scope_11,e1_2,i_3,e2_2) in
                {546}let m_95: bitstring = enc((tag12,sign(M_7,ski_1)),k3_7) in
                {547}event issuerSendsLastMessageToApp(m_92,m_93,m_94,m_95);
                {548}out(c_3, m_95);
                {514}let talksOnlyToHonest_11: bool = false in
                {549}if talksOnlyToHonest_11 then
                {550}out(c_3, check_reach_issuer);
                {551}event issuerCompletesProtocol(m_88,m_89,m_90,m_92,m_93,m_94);
                {552}out(ch(code_11), free_code);
                {553}out(ch(wrong_pw_3), free_password)
)

-- Query not attacker(check_reach_app[]) in process 1.
Translating the process into Horn clauses...
Completing...
select attacker(pk(sk))/-5000
200 rules inserted. Base: 169 rules (45 with conclusion selected). Queue: 67 rules.
400 rules inserted. Base: 321 rules (89 with conclusion selected). Queue: 121 rules.
600 rules inserted. Base: 480 rules (111 with conclusion selected). Queue: 107 rules.
800 rules inserted. Base: 585 rules (135 with conclusion selected). Queue: 165 rules.
1000 rules inserted. Base: 665 rules (153 with conclusion selected). Queue: 207 rules.
1200 rules inserted. Base: 764 rules (169 with conclusion selected). Queue: 217 rules.
1400 rules inserted. Base: 829 rules (183 with conclusion selected). Queue: 229 rules.
1600 rules inserted. Base: 902 rules (196 with conclusion selected). Queue: 210 rules.
1800 rules inserted. Base: 995 rules (215 with conclusion selected). Queue: 156 rules.
2000 rules inserted. Base: 1102 rules (245 with conclusion selected). Queue: 161 rules.
2200 rules inserted. Base: 1208 rules (273 with conclusion selected). Queue: 233 rules.
2400 rules inserted. Base: 1260 rules (290 with conclusion selected). Queue: 277 rules.
2600 rules inserted. Base: 1357 rules (302 with conclusion selected). Queue: 282 rules.
2800 rules inserted. Base: 1454 rules (316 with conclusion selected). Queue: 363 rules.
3000 rules inserted. Base: 1535 rules (338 with conclusion selected). Queue: 457 rules.
3200 rules inserted. Base: 1605 rules (349 with conclusion selected). Queue: 442 rules.
3400 rules inserted. Base: 1679 rules (359 with conclusion selected). Queue: 477 rules.
3600 rules inserted. Base: 1796 rules (373 with conclusion selected). Queue: 453 rules.
3800 rules inserted. Base: 1876 rules (383 with conclusion selected). Queue: 421 rules.
4000 rules inserted. Base: 1955 rules (393 with conclusion selected). Queue: 371 rules.
4200 rules inserted. Base: 1995 rules (416 with conclusion selected). Queue: 371 rules.
4400 rules inserted. Base: 2105 rules (438 with conclusion selected). Queue: 320 rules.
4600 rules inserted. Base: 2170 rules (477 with conclusion selected). Queue: 372 rules.
4800 rules inserted. Base: 2275 rules (535 with conclusion selected). Queue: 401 rules.
5000 rules inserted. Base: 2366 rules (542 with conclusion selected). Queue: 420 rules.
5200 rules inserted. Base: 2487 rules (571 with conclusion selected). Queue: 415 rules.
5400 rules inserted. Base: 2526 rules (583 with conclusion selected). Queue: 409 rules.
5600 rules inserted. Base: 2612 rules (596 with conclusion selected). Queue: 431 rules.
5800 rules inserted. Base: 2708 rules (615 with conclusion selected). Queue: 394 rules.
6000 rules inserted. Base: 2788 rules (628 with conclusion selected). Queue: 431 rules.
6200 rules inserted. Base: 2862 rules (659 with conclusion selected). Queue: 428 rules.
6400 rules inserted. Base: 2933 rules (674 with conclusion selected). Queue: 443 rules.
6600 rules inserted. Base: 3034 rules (701 with conclusion selected). Queue: 442 rules.
6800 rules inserted. Base: 3110 rules (719 with conclusion selected). Queue: 482 rules.
7000 rules inserted. Base: 3211 rules (752 with conclusion selected). Queue: 498 rules.
7200 rules inserted. Base: 3301 rules (763 with conclusion selected). Queue: 506 rules.
7400 rules inserted. Base: 3401 rules (788 with conclusion selected). Queue: 532 rules.
7600 rules inserted. Base: 3524 rules (809 with conclusion selected). Queue: 467 rules.
7800 rules inserted. Base: 3605 rules (824 with conclusion selected). Queue: 453 rules.
8000 rules inserted. Base: 3713 rules (843 with conclusion selected). Queue: 413 rules.
8200 rules inserted. Base: 3833 rules (863 with conclusion selected). Queue: 364 rules.
8400 rules inserted. Base: 3966 rules (882 with conclusion selected). Queue: 301 rules.
8600 rules inserted. Base: 4071 rules (894 with conclusion selected). Queue: 261 rules.
8800 rules inserted. Base: 4168 rules (910 with conclusion selected). Queue: 229 rules.
9000 rules inserted. Base: 4271 rules (929 with conclusion selected). Queue: 175 rules.
9200 rules inserted. Base: 4331 rules (948 with conclusion selected). Queue: 160 rules.
9400 rules inserted. Base: 4416 rules (990 with conclusion selected). Queue: 121 rules.
9600 rules inserted. Base: 4502 rules (1013 with conclusion selected). Queue: 156 rules.
9800 rules inserted. Base: 4619 rules (1038 with conclusion selected). Queue: 144 rules.
10000 rules inserted. Base: 4705 rules (1039 with conclusion selected). Queue: 99 rules.
10200 rules inserted. Base: 4824 rules (1047 with conclusion selected). Queue: 22 rules.
Starting query not attacker(check_reach_app[])
goal reachable: attacker(check_reach_app[])

Derivation:
Abbreviations:
n_12 = n_4[e2_1 = i[],e1_1 = a[],!1 = @sid]
sskI_8 = sskI[e2_1 = i[],e1_1 = a[],!1 = @sid]
pkce_8 = pkce_3[m_24 = aenc((tag1,n_12,pk(sskI_8)),pk(ska[])),pke2_1 = pk(ski[]),pke1_1 = pke1_6,e2 = e2_3,e1 = e1_3,!1 = @sid_1]
scope_12 = scope_3[m_24 = aenc((tag1,n_12,pk(sskI_8)),pk(ska[])),pke2_1 = pk(ski[]),pke1_1 = pke1_6,e2 = e2_3,e1 = e1_3,!1 = @sid_1]
k1_8 = k1_3[m_24 = aenc((tag1,n_12,pk(sskI_8)),pk(ska[])),pke2_1 = pk(ski[]),pke1_1 = pke1_6,e2 = e2_3,e1 = e1_3,!1 = @sid_1]
n2_12 = n2_4[m_34 = enc((tag3,a[],hash(pkce_8),scope_12),k1_8),m_33 = aenc((tag2,n_12,k1_8),pk(sskI_8)),e2_1 = i[],e1_1 = a[],!1 = @sid]
sskI_9 = sskI_1[m_34 = enc((tag3,a[],hash(pkce_8),scope_12),k1_8),m_33 = aenc((tag2,n_12,k1_8),pk(sskI_8)),e2_1 = i[],e1_1 = a[],!1 = @sid]
k2_8 = k2_4[m_64 = aenc((tag4,n2_12,pk(sskI_9)),pk(ski[])),e2_2 = u[],e1_2 = a[],!1 = @sid_2]
code_12 = code_8[m_66 = enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8),m_64 = aenc((tag4,n2_12,pk(sskI_9)),pk(ski[])),e2_2 = u[],e1_2 = a[],!1 = @sid_2]
n2_13 = n2_3[m_27 = enc((tag8,code_12),k1_8),m_24 = aenc((tag1,n_12,pk(sskI_8)),pk(ska[])),pke2_1 = pk(ski[]),pke1_1 = pke1_6,e2 = e2_3,e1 = e1_3,!1 = @sid_1]
sskI2_4 = sskI2_3[m_27 = enc((tag8,code_12),k1_8),m_24 = aenc((tag1,n_12,pk(sskI_8)),pk(ska[])),pke2_1 = pk(ski[]),pke1_1 = pke1_6,e2 = e2_3,e1 = e1_3,!1 = @sid_1]
n_13 = n_4[e2_1 = i[],e1_1 = a[],!1 = @sid_3]
sskI_10 = sskI[e2_1 = i[],e1_1 = a[],!1 = @sid_3]
pkce_9 = pkce[m_1 = aenc((tag1,n_13,pk(sskI_10)),pk(ska[])),e2 = i[],e1 = u[],!1 = @sid_4]
scope_13 = scope[m_1 = aenc((tag1,n_13,pk(sskI_10)),pk(ska[])),e2 = i[],e1 = u[],!1 = @sid_4]
k1_9 = k1[m_1 = aenc((tag1,n_13,pk(sskI_10)),pk(ska[])),e2 = i[],e1 = u[],!1 = @sid_4]
n2_14 = n2_4[m_34 = enc((tag3,a[],hash(pkce_9),scope_13),k1_9),m_33 = aenc((tag2,n_13,k1_9),pk(sskI_10)),e2_1 = i[],e1_1 = a[],!1 = @sid_3]
sskI_11 = sskI_1[m_34 = enc((tag3,a[],hash(pkce_9),scope_13),k1_9),m_33 = aenc((tag2,n_13,k1_9),pk(sskI_10)),e2_1 = i[],e1_1 = a[],!1 = @sid_3]
k2_9 = k2_4[m_64 = aenc((tag4,n2_14,pk(sskI_11)),pk(ski[])),e2_2 = u[],e1_2 = a[],!1 = @sid_5]
k3_8 = k3_4[m_68 = aenc((tag9,n2_13,pk(sskI2_4)),pk(ski[])),m_66 = enc((tag6,a[],hash(pkce_9),scope_13,u[],password[]),k2_9),m_64 = aenc((tag4,n2_14,pk(sskI_11)),pk(ski[])),e2_2 = u[],e1_2 = a[],!1 = @sid_5]

1. The attacker has some term e1_3.
attacker(e1_3).

2. The attacker has some term e2_3.
attacker(e2_3).

3. The attacker has some term pke1_6.
attacker(pke1_6).

4. The message pk(ski[]) may be sent to the attacker at output {12}.
attacker(pk(ski[])).

5. The message a[] may be sent to the attacker at output {4}.
attacker(a[]).

6. The message i[] may be sent to the attacker at output {6}.
attacker(i[]).

7. The message a[] that the attacker may have by 5 may be received at input {221}.
The message i[] that the attacker may have by 6 may be received at input {222}.
So the message aenc((tag1,n_12,pk(sskI_8)),pk(ska[])) may be sent to the attacker at output {228}.
attacker(aenc((tag1,n_12,pk(sskI_8)),pk(ska[]))).

8. The message e1_3 that the attacker may have by 1 may be received at input {22}.
The message e2_3 that the attacker may have by 2 may be received at input {23}.
The message pke1_6 that the attacker may have by 3 may be received at input {165}.
The message pk(ski[]) that the attacker may have by 4 may be received at input {166}.
The message aenc((tag1,n_12,pk(sskI_8)),pk(ska[])) that the attacker may have by 7 may be received at input {168}.
We have e2_3 Ôëá i[] && e1_3 Ôëá u[].
So the message aenc((tag2,n_12,k1_8),pk(sskI_8)) may be sent to the attacker at output {173}.
attacker(aenc((tag2,n_12,k1_8),pk(sskI_8))).

9. The message e1_3 that the attacker may have by 1 may be received at input {22}.
The message e2_3 that the attacker may have by 2 may be received at input {23}.
The message pke1_6 that the attacker may have by 3 may be received at input {165}.
The message pk(ski[]) that the attacker may have by 4 may be received at input {166}.
The message aenc((tag1,n_12,pk(sskI_8)),pk(ska[])) that the attacker may have by 7 may be received at input {168}.
We have e2_3 Ôëá i[] && e1_3 Ôëá u[].
So the message enc((tag3,a[],hash(pkce_8),scope_12),k1_8) may be sent to the attacker at output {178}.
attacker(enc((tag3,a[],hash(pkce_8),scope_12),k1_8)).

10. The message u[] may be sent to the attacker at output {5}.
attacker(u[]).

11. The message a[] that the attacker may have by 5 may be received at input {221}.
The message i[] that the attacker may have by 6 may be received at input {222}.
The message aenc((tag2,n_12,k1_8),pk(sskI_8)) that the attacker may have by 8 may be received at input {229}.
The message enc((tag3,a[],hash(pkce_8),scope_12),k1_8) that the attacker may have by 9 may be received at input {233}.
So the message aenc((tag4,n2_12,pk(sskI_9)),pk(ski[])) may be sent to the attacker at output {240}.
attacker(aenc((tag4,n2_12,pk(sskI_9)),pk(ski[]))).

12. The message a[] that the attacker may have by 5 may be received at input {382}.
The message u[] that the attacker may have by 10 may be received at input {383}.
The message aenc((tag4,n2_12,pk(sskI_9)),pk(ski[])) that the attacker may have by 11 may be received at input {386}.
So the message aenc((tag5,n2_12,k2_8),pk(sskI_9)) may be sent to the attacker at output {391}.
attacker(aenc((tag5,n2_12,k2_8),pk(sskI_9))).

13. The message a[] that the attacker may have by 5 may be received at input {221}.
The message i[] that the attacker may have by 6 may be received at input {222}.
The message aenc((tag2,n_12,k1_8),pk(sskI_8)) that the attacker may have by 8 may be received at input {229}.
The message enc((tag3,a[],hash(pkce_8),scope_12),k1_8) that the attacker may have by 9 may be received at input {233}.
The message aenc((tag5,n2_12,k2_8),pk(sskI_9)) that the attacker may have by 12 may be received at input {241}.
So the message enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8) may be sent to the attacker at output {247}.
attacker(enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8)).

14. The message a[] that the attacker may have by 5 may be received at input {382}.
The message u[] that the attacker may have by 10 may be received at input {383}.
The message aenc((tag4,n2_12,pk(sskI_9)),pk(ski[])) that the attacker may have by 11 may be received at input {386}.
The message enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8) that the attacker may have by 13 may be received at input {392}.
So the message enc((tag7,code_12),k2_8) may be sent to the attacker at output {401}.
attacker(enc((tag7,code_12),k2_8)).

15. The message a[] that the attacker may have by 5 may be received at input {221}.
The message i[] that the attacker may have by 6 may be received at input {222}.
The message aenc((tag2,n_12,k1_8),pk(sskI_8)) that the attacker may have by 8 may be received at input {229}.
The message enc((tag3,a[],hash(pkce_8),scope_12),k1_8) that the attacker may have by 9 may be received at input {233}.
The message aenc((tag5,n2_12,k2_8),pk(sskI_9)) that the attacker may have by 12 may be received at input {241}.
The message enc((tag7,code_12),k2_8) that the attacker may have by 14 may be received at input {248}.
So the message enc((tag8,code_12),k1_8) may be sent to the attacker at output {253}.
attacker(enc((tag8,code_12),k1_8)).

16. The message a[] that the attacker may have by 5 may be received at input {221}.
The message i[] that the attacker may have by 6 may be received at input {222}.
So the message aenc((tag1,n_13,pk(sskI_10)),pk(ska[])) may be sent to the attacker at output {228}.
attacker(aenc((tag1,n_13,pk(sskI_10)),pk(ska[]))).

17. The message u[] that the attacker may have by 10 may be received at input {22}.
The message i[] that the attacker may have by 6 may be received at input {23}.
The message aenc((tag1,n_13,pk(sskI_10)),pk(ska[])) that the attacker may have by 16 may be received at input {26}.
So the message aenc((tag2,n_13,k1_9),pk(sskI_10)) may be sent to the attacker at output {31}.
attacker(aenc((tag2,n_13,k1_9),pk(sskI_10))).

18. The message u[] that the attacker may have by 10 may be received at input {22}.
The message i[] that the attacker may have by 6 may be received at input {23}.
The message aenc((tag1,n_13,pk(sskI_10)),pk(ska[])) that the attacker may have by 16 may be received at input {26}.
So the message enc((tag3,a[],hash(pkce_9),scope_13),k1_9) may be sent to the attacker at output {36}.
attacker(enc((tag3,a[],hash(pkce_9),scope_13),k1_9)).

19. The message a[] that the attacker may have by 5 may be received at input {221}.
The message i[] that the attacker may have by 6 may be received at input {222}.
The message aenc((tag2,n_13,k1_9),pk(sskI_10)) that the attacker may have by 17 may be received at input {229}.
The message enc((tag3,a[],hash(pkce_9),scope_13),k1_9) that the attacker may have by 18 may be received at input {233}.
So the message aenc((tag4,n2_14,pk(sskI_11)),pk(ski[])) may be sent to the attacker at output {240}.
attacker(aenc((tag4,n2_14,pk(sskI_11)),pk(ski[]))).

20. The message a[] that the attacker may have by 5 may be received at input {382}.
The message u[] that the attacker may have by 10 may be received at input {383}.
The message aenc((tag4,n2_14,pk(sskI_11)),pk(ski[])) that the attacker may have by 19 may be received at input {386}.
So the message aenc((tag5,n2_14,k2_9),pk(sskI_11)) may be sent to the attacker at output {391}.
attacker(aenc((tag5,n2_14,k2_9),pk(sskI_11))).

21. The message a[] that the attacker may have by 5 may be received at input {221}.
The message i[] that the attacker may have by 6 may be received at input {222}.
The message aenc((tag2,n_13,k1_9),pk(sskI_10)) that the attacker may have by 17 may be received at input {229}.
The message enc((tag3,a[],hash(pkce_9),scope_13),k1_9) that the attacker may have by 18 may be received at input {233}.
The message aenc((tag5,n2_14,k2_9),pk(sskI_11)) that the attacker may have by 20 may be received at input {241}.
So the message enc((tag6,a[],hash(pkce_9),scope_13,u[],password[]),k2_9) may be sent to the attacker at output {247}.
attacker(enc((tag6,a[],hash(pkce_9),scope_13,u[],password[]),k2_9)).

22. The message e1_3 that the attacker may have by 1 may be received at input {22}.
The message e2_3 that the attacker may have by 2 may be received at input {23}.
The message pke1_6 that the attacker may have by 3 may be received at input {165}.
The message pk(ski[]) that the attacker may have by 4 may be received at input {166}.
The message aenc((tag1,n_12,pk(sskI_8)),pk(ska[])) that the attacker may have by 7 may be received at input {168}.
The message enc((tag8,code_12),k1_8) that the attacker may have by 15 may be received at input {179}.
We have e2_3 Ôëá i[] && e1_3 Ôëá u[].
So the message aenc((tag9,n2_13,pk(sskI2_4)),pk(ski[])) may be sent to the attacker at output {185}.
attacker(aenc((tag9,n2_13,pk(sskI2_4)),pk(ski[]))).

23. The message a[] that the attacker may have by 5 may be received at input {382}.
The message u[] that the attacker may have by 10 may be received at input {383}.
The message aenc((tag4,n2_14,pk(sskI_11)),pk(ski[])) that the attacker may have by 19 may be received at input {386}.
The message enc((tag6,a[],hash(pkce_9),scope_13,u[],password[]),k2_9) that the attacker may have by 21 may be received at input {392}.
The message aenc((tag9,n2_13,pk(sskI2_4)),pk(ski[])) that the attacker may have by 22 may be received at input {402}.
So the message aenc((tag10,n2_13,k3_8),pk(sskI2_4)) may be sent to the attacker at output {407}.
attacker(aenc((tag10,n2_13,k3_8),pk(sskI2_4))).

24. The attacker has some term m_96.
attacker(m_96).

25. The message e1_3 that the attacker may have by 1 may be received at input {22}.
The message e2_3 that the attacker may have by 2 may be received at input {23}.
The message pke1_6 that the attacker may have by 3 may be received at input {165}.
The message pk(ski[]) that the attacker may have by 4 may be received at input {166}.
The message aenc((tag1,n_12,pk(sskI_8)),pk(ska[])) that the attacker may have by 7 may be received at input {168}.
The message enc((tag8,code_12),k1_8) that the attacker may have by 15 may be received at input {179}.
The message aenc((tag10,n2_13,k3_8),pk(sskI2_4)) that the attacker may have by 23 may be received at input {186}.
The message m_96 that the attacker may have by 24 may be received at input {196}.
We have e2_3 Ôëá i[] && e1_3 Ôëá u[].
So the message check_reach_app[] may be sent to the attacker at output {197}.
attacker(check_reach_app[]).

26. By 25, attacker(check_reach_app[]).
The goal is reached, represented in the following fact:
attacker(check_reach_app[]).


A more detailed output of the traces is available with
  set traceDisplay = long.

new a: bitstring creating a_4 at {1}

new u: bitstring creating u_4 at {2}

new i: bitstring creating i_4 at {3}

out(c, ~M) with ~M = a_4 at {4}

out(c, ~M_1) with ~M_1 = u_4 at {5}

out(c, ~M_2) with ~M_2 = i_4 at {6}

new ska: SecretKey creating ska_2 at {7}

new sku: SecretKey creating sku_2 at {8}

new ski: SecretKey creating ski_2 at {9}

out(c, ~M_3) with ~M_3 = pk(ska_2) at {10}

out(c, ~M_4) with ~M_4 = pk(sku_2) at {11}

out(c, ~M_5) with ~M_5 = pk(ski_2) at {12}

new password: bitstring creating password_3 at {13}

in(c, ~M_1) with ~M_1 = u_4 at {22} in copy a_5

in(c, ~M_2) with ~M_2 = i_4 at {23} in copy a_5

in(c, a_6) at {22} in copy a_7

in(c, a_8) at {23} in copy a_7

in(c, a_9) at {165} in copy a_7

in(c, ~M_5) with ~M_5 = pk(ski_2) at {166} in copy a_7

in(c, ~M) with ~M = a_4 at {221} in copy a_10

in(c, ~M_2) with ~M_2 = i_4 at {222} in copy a_10

new n_4: bitstring creating n_12 at {225} in copy a_10

new sskI: SecretKey creating sskI_8 at {226} in copy a_10

out(c, ~M_6) with ~M_6 = aenc((tag1,n_12,pk(sskI_8)),pk(ska_2)) at {228} in copy a_10

in(c, ~M_6) with ~M_6 = aenc((tag1,n_12,pk(sskI_8)),pk(ska_2)) at {26} in copy a_5

new k1: SymmetricKey creating k1_8 at {29} in copy a_5

out(c, ~M_7) with ~M_7 = aenc((tag2,n_12,k1_8),pk(sskI_8)) at {31} in copy a_5

new pkce: bitstring creating pkce_8 at {32} in copy a_5

new scope: bitstring creating scope_12 at {33} in copy a_5

event appSendsLastMessageToBrowser(aenc((tag1,n_12,pk(sskI_8)),pk(ska_2)),aenc((tag2,n_12,k1_8),pk(sskI_8)),enc((tag3,a_4,hash(pkce_8),scope_12),k1_8)) at {35} in copy a_5

out(c, ~M_8) with ~M_8 = enc((tag3,a_4,hash(pkce_8),scope_12),k1_8) at {36} in copy a_5

in(c, ~M_7) with ~M_7 = aenc((tag2,n_12,k1_8),pk(sskI_8)) at {229} in copy a_10

in(c, ~M_8) with ~M_8 = enc((tag3,a_4,hash(pkce_8),scope_12),k1_8) at {233} in copy a_10

new n2_4: bitstring creating n2_12 at {237} in copy a_10

new sskI_1: SecretKey creating sskI_9 at {238} in copy a_10

out(c, ~M_9) with ~M_9 = aenc((tag4,n2_12,pk(sskI_9)),pk(ski_2)) at {240} in copy a_10

in(c, ~M) with ~M = a_4 at {221} in copy a_11

in(c, ~M_2) with ~M_2 = i_4 at {222} in copy a_11

new n_4: bitstring creating n_13 at {225} in copy a_11

new sskI: SecretKey creating sskI_10 at {226} in copy a_11

out(c, ~M_10) with ~M_10 = aenc((tag1,n_13,pk(sskI_10)),pk(ska_2)) at {228} in copy a_11

in(c, ~M_10) with ~M_10 = aenc((tag1,n_13,pk(sskI_10)),pk(ska_2)) at {168} in copy a_7

new k1_3: SymmetricKey creating k1_9 at {171} in copy a_7

out(c, ~M_11) with ~M_11 = aenc((tag2,n_13,k1_9),pk(sskI_10)) at {173} in copy a_7

new pkce_3: bitstring creating pkce_9 at {174} in copy a_7

new scope_3: bitstring creating scope_13 at {175} in copy a_7

event appSendsLastMessageToBrowser(aenc((tag1,n_13,pk(sskI_10)),pk(ska_2)),aenc((tag2,n_13,k1_9),pk(sskI_10)),enc((tag3,a_4,hash(pkce_9),scope_13),k1_9)) at {177} in copy a_7

out(c, ~M_12) with ~M_12 = enc((tag3,a_4,hash(pkce_9),scope_13),k1_9) at {178} in copy a_7

in(c, ~M_11) with ~M_11 = aenc((tag2,n_13,k1_9),pk(sskI_10)) at {229} in copy a_11

in(c, ~M_12) with ~M_12 = enc((tag3,a_4,hash(pkce_9),scope_13),k1_9) at {233} in copy a_11

new n2_4: bitstring creating n2_13 at {237} in copy a_11

new sskI_1: SecretKey creating sskI_11 at {238} in copy a_11

out(c, ~M_13) with ~M_13 = aenc((tag4,n2_13,pk(sskI_11)),pk(ski_2)) at {240} in copy a_11

in(c, ~M) with ~M = a_4 at {382} in copy a_12

in(c, ~M_1) with ~M_1 = u_4 at {383} in copy a_12

in(c, ~M_9) with ~M_9 = aenc((tag4,n2_12,pk(sskI_9)),pk(ski_2)) at {386} in copy a_12

new k2_4: SymmetricKey creating k2_8 at {389} in copy a_12

out(c, ~M_14) with ~M_14 = aenc((tag5,n2_12,k2_8),pk(sskI_9)) at {391} in copy a_12

in(c, ~M_14) with ~M_14 = aenc((tag5,n2_12,k2_8),pk(sskI_9)) at {241} in copy a_10

event browserSendsLastMessageToIssuer(aenc((tag4,n2_12,pk(sskI_9)),pk(ski_2)),aenc((tag5,n2_12,k2_8),pk(sskI_9)),enc((tag6,a_4,hash(pkce_8),scope_12,u_4,password_3),k2_8)) at {246} in copy a_10

out(c, ~M_15) with ~M_15 = enc((tag6,a_4,hash(pkce_8),scope_12,u_4,password_3),k2_8) at {247} in copy a_10

in(c, ~M_15) with ~M_15 = enc((tag6,a_4,hash(pkce_8),scope_12,u_4,password_3),k2_8) at {392} in copy a_12

new code_8: bitstring creating code_12 at {398} in copy a_12

event issuerSendsLastMessageToBrowser(aenc((tag4,n2_12,pk(sskI_9)),pk(ski_2)),aenc((tag5,n2_12,k2_8),pk(sskI_9)),enc((tag6,a_4,hash(pkce_8),scope_12,u_4,password_3),k2_8),enc((tag7,code_12),k2_8)) at {400} in copy a_12

out(c, ~M_16) with ~M_16 = enc((tag7,code_12),k2_8) at {401} in copy a_12

in(c, ~M) with ~M = a_4 at {382} in copy a_13

in(c, ~M_1) with ~M_1 = u_4 at {383} in copy a_13

in(c, ~M_13) with ~M_13 = aenc((tag4,n2_13,pk(sskI_11)),pk(ski_2)) at {386} in copy a_13

new k2_4: SymmetricKey creating k2_9 at {389} in copy a_13

out(c, ~M_17) with ~M_17 = aenc((tag5,n2_13,k2_9),pk(sskI_11)) at {391} in copy a_13

in(c, ~M_17) with ~M_17 = aenc((tag5,n2_13,k2_9),pk(sskI_11)) at {241} in copy a_11

event browserSendsLastMessageToIssuer(aenc((tag4,n2_13,pk(sskI_11)),pk(ski_2)),aenc((tag5,n2_13,k2_9),pk(sskI_11)),enc((tag6,a_4,hash(pkce_9),scope_13,u_4,password_3),k2_9)) at {246} in copy a_11

out(c, ~M_18) with ~M_18 = enc((tag6,a_4,hash(pkce_9),scope_13,u_4,password_3),k2_9) at {247} in copy a_11

in(c, ~M_18) with ~M_18 = enc((tag6,a_4,hash(pkce_9),scope_13,u_4,password_3),k2_9) at {392} in copy a_13

new code_8: bitstring creating code_13 at {398} in copy a_13

event issuerSendsLastMessageToBrowser(aenc((tag4,n2_13,pk(sskI_11)),pk(ski_2)),aenc((tag5,n2_13,k2_9),pk(sskI_11)),enc((tag6,a_4,hash(pkce_9),scope_13,u_4,password_3),k2_9),enc((tag7,code_13),k2_9)) at {400} in copy a_13

out(c, ~M_19) with ~M_19 = enc((tag7,code_13),k2_9) at {401} in copy a_13

in(c, ~M_19) with ~M_19 = enc((tag7,code_13),k2_9) at {248} in copy a_11

event browserSendsLastMessageToApp(aenc((tag1,n_13,pk(sskI_10)),pk(ska_2)),aenc((tag2,n_13,k1_9),pk(sskI_10)),enc((tag3,a_4,hash(pkce_9),scope_13),k1_9),enc((tag8,code_13),k1_9)) at {252} in copy a_11

out(c, ~M_20) with ~M_20 = enc((tag8,code_13),k1_9) at {253} in copy a_11

out(c, ~M_21) with ~M_21 = check_reach_browser at {255} in copy a_11

event browserCompletesProtocol(aenc((tag1,n_13,pk(sskI_10)),pk(ska_2)),aenc((tag2,n_13,k1_9),pk(sskI_10)),enc((tag3,a_4,hash(pkce_9),scope_13),k1_9),aenc((tag4,n2_13,pk(sskI_11)),pk(ski_2)),aenc((tag5,n2_13,k2_9),pk(sskI_11)),enc((tag6,a_4,hash(pkce_9),scope_13,u_4,password_3),k2_9),enc((tag7,code_13),k2_9)) at {256} in copy a_11

in(c, ~M_20) with ~M_20 = enc((tag8,code_13),k1_9) at {179} in copy a_7

new n2_3: bitstring creating n2_14 at {182} in copy a_7

new sskI2_3: SecretKey creating sskI2_4 at {183} in copy a_7

out(c, ~M_22) with ~M_22 = aenc((tag9,n2_14,pk(sskI2_4)),pk(ski_2)) at {185} in copy a_7

in(c, ~M_22) with ~M_22 = aenc((tag9,n2_14,pk(sskI2_4)),pk(ski_2)) at {402} in copy a_12

new k3_4: SymmetricKey creating k3_8 at {405} in copy a_12

out(c, ~M_23) with ~M_23 = aenc((tag10,n2_14,k3_8),pk(sskI2_4)) at {407} in copy a_12

in(c, ~M_23) with ~M_23 = aenc((tag10,n2_14,k3_8),pk(sskI2_4)) at {186} in copy a_7

new sks_3: SecretKey creating sks_4 at {190} in copy a_7

new jti_3: bitstring creating jti_8 at {191} in copy a_7

event appSendsLastMessageToIssuer(aenc((tag9,n2_14,pk(sskI2_4)),pk(ski_2)),aenc((tag10,n2_14,k3_8),pk(sskI2_4)),enc((tag11,pk(sks_4),sign((a_4,jti_8,code_13,pkce_9),sks_4)),k3_8)) at {194} in copy a_7

out(c, ~M_24) with ~M_24 = enc((tag11,pk(sks_4),sign((a_4,jti_8,code_13,pkce_9),sks_4)),k3_8) at {195} in copy a_7

in(c, a_14) at {196} in copy a_7

out(c, ~M_25) with ~M_25 = check_reach_app at {197} in copy a_7

The attacker has the message ~M_25 = check_reach_app.
A trace has been found.
RESULT not attacker(check_reach_app[]) is false.
-- Query not attacker(check_reach_browser[]) in process 1.
Translating the process into Horn clauses...
Completing...
select attacker(pk(sk))/-5000
200 rules inserted. Base: 169 rules (45 with conclusion selected). Queue: 67 rules.
400 rules inserted. Base: 321 rules (89 with conclusion selected). Queue: 121 rules.
600 rules inserted. Base: 480 rules (111 with conclusion selected). Queue: 107 rules.
800 rules inserted. Base: 585 rules (135 with conclusion selected). Queue: 165 rules.
1000 rules inserted. Base: 665 rules (153 with conclusion selected). Queue: 207 rules.
1200 rules inserted. Base: 764 rules (169 with conclusion selected). Queue: 217 rules.
1400 rules inserted. Base: 829 rules (183 with conclusion selected). Queue: 229 rules.
1600 rules inserted. Base: 902 rules (196 with conclusion selected). Queue: 210 rules.
1800 rules inserted. Base: 995 rules (215 with conclusion selected). Queue: 156 rules.
2000 rules inserted. Base: 1102 rules (245 with conclusion selected). Queue: 161 rules.
2200 rules inserted. Base: 1208 rules (273 with conclusion selected). Queue: 233 rules.
2400 rules inserted. Base: 1260 rules (290 with conclusion selected). Queue: 277 rules.
2600 rules inserted. Base: 1357 rules (302 with conclusion selected). Queue: 282 rules.
2800 rules inserted. Base: 1454 rules (316 with conclusion selected). Queue: 363 rules.
3000 rules inserted. Base: 1535 rules (338 with conclusion selected). Queue: 457 rules.
3200 rules inserted. Base: 1605 rules (349 with conclusion selected). Queue: 442 rules.
3400 rules inserted. Base: 1679 rules (359 with conclusion selected). Queue: 477 rules.
3600 rules inserted. Base: 1796 rules (373 with conclusion selected). Queue: 453 rules.
3800 rules inserted. Base: 1876 rules (383 with conclusion selected). Queue: 421 rules.
4000 rules inserted. Base: 1955 rules (393 with conclusion selected). Queue: 371 rules.
4200 rules inserted. Base: 1995 rules (416 with conclusion selected). Queue: 371 rules.
4400 rules inserted. Base: 2105 rules (438 with conclusion selected). Queue: 320 rules.
4600 rules inserted. Base: 2170 rules (477 with conclusion selected). Queue: 372 rules.
4800 rules inserted. Base: 2275 rules (535 with conclusion selected). Queue: 401 rules.
5000 rules inserted. Base: 2366 rules (542 with conclusion selected). Queue: 420 rules.
5200 rules inserted. Base: 2487 rules (571 with conclusion selected). Queue: 415 rules.
5400 rules inserted. Base: 2526 rules (583 with conclusion selected). Queue: 409 rules.
5600 rules inserted. Base: 2612 rules (596 with conclusion selected). Queue: 431 rules.
5800 rules inserted. Base: 2708 rules (615 with conclusion selected). Queue: 394 rules.
6000 rules inserted. Base: 2788 rules (628 with conclusion selected). Queue: 431 rules.
6200 rules inserted. Base: 2862 rules (659 with conclusion selected). Queue: 428 rules.
6400 rules inserted. Base: 2933 rules (674 with conclusion selected). Queue: 443 rules.
6600 rules inserted. Base: 3034 rules (701 with conclusion selected). Queue: 442 rules.
6800 rules inserted. Base: 3110 rules (719 with conclusion selected). Queue: 482 rules.
7000 rules inserted. Base: 3211 rules (752 with conclusion selected). Queue: 498 rules.
7200 rules inserted. Base: 3301 rules (763 with conclusion selected). Queue: 506 rules.
7400 rules inserted. Base: 3401 rules (788 with conclusion selected). Queue: 532 rules.
7600 rules inserted. Base: 3524 rules (809 with conclusion selected). Queue: 467 rules.
7800 rules inserted. Base: 3605 rules (824 with conclusion selected). Queue: 453 rules.
8000 rules inserted. Base: 3713 rules (843 with conclusion selected). Queue: 413 rules.
8200 rules inserted. Base: 3833 rules (863 with conclusion selected). Queue: 364 rules.
8400 rules inserted. Base: 3966 rules (882 with conclusion selected). Queue: 301 rules.
8600 rules inserted. Base: 4071 rules (894 with conclusion selected). Queue: 261 rules.
8800 rules inserted. Base: 4168 rules (910 with conclusion selected). Queue: 229 rules.
9000 rules inserted. Base: 4271 rules (929 with conclusion selected). Queue: 175 rules.
9200 rules inserted. Base: 4331 rules (948 with conclusion selected). Queue: 160 rules.
9400 rules inserted. Base: 4416 rules (990 with conclusion selected). Queue: 121 rules.
9600 rules inserted. Base: 4502 rules (1013 with conclusion selected). Queue: 156 rules.
9800 rules inserted. Base: 4619 rules (1038 with conclusion selected). Queue: 144 rules.
10000 rules inserted. Base: 4705 rules (1039 with conclusion selected). Queue: 99 rules.
10200 rules inserted. Base: 4824 rules (1047 with conclusion selected). Queue: 22 rules.
Starting query not attacker(check_reach_browser[])
goal reachable: attacker(check_reach_browser[])

Derivation:
Abbreviations:
n_12 = n_4[e2_1 = i[],e1_1 = a[],!1 = @sid]
sskI_8 = sskI[e2_1 = i[],e1_1 = a[],!1 = @sid]
pkce_8 = pkce_3[m_24 = aenc((tag1,n_12,pk(sskI_8)),pk(ska[])),pke2_1 = pke2_6,pke1_1 = pke1_6,e2 = e2_3,e1 = e1_3,!1 = @sid_1]
scope_12 = scope_3[m_24 = aenc((tag1,n_12,pk(sskI_8)),pk(ska[])),pke2_1 = pke2_6,pke1_1 = pke1_6,e2 = e2_3,e1 = e1_3,!1 = @sid_1]
k1_8 = k1_3[m_24 = aenc((tag1,n_12,pk(sskI_8)),pk(ska[])),pke2_1 = pke2_6,pke1_1 = pke1_6,e2 = e2_3,e1 = e1_3,!1 = @sid_1]
n2_12 = n2_4[m_34 = enc((tag3,a[],hash(pkce_8),scope_12),k1_8),m_33 = aenc((tag2,n_12,k1_8),pk(sskI_8)),e2_1 = i[],e1_1 = a[],!1 = @sid]
sskI_9 = sskI_1[m_34 = enc((tag3,a[],hash(pkce_8),scope_12),k1_8),m_33 = aenc((tag2,n_12,k1_8),pk(sskI_8)),e2_1 = i[],e1_1 = a[],!1 = @sid]
k2_8 = k2_4[m_64 = aenc((tag4,n2_12,pk(sskI_9)),pk(ski[])),e2_2 = u[],e1_2 = a[],!1 = @sid_2]
code_12 = code_8[m_66 = enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8),m_64 = aenc((tag4,n2_12,pk(sskI_9)),pk(ski[])),e2_2 = u[],e1_2 = a[],!1 = @sid_2]

1. The message a[] may be sent to the attacker at output {4}.
attacker(a[]).

2. The message i[] may be sent to the attacker at output {6}.
attacker(i[]).

3. The attacker has some term e1_3.
attacker(e1_3).

4. The attacker has some term e2_3.
attacker(e2_3).

5. The attacker has some term pke1_6.
attacker(pke1_6).

6. The attacker has some term pke2_6.
attacker(pke2_6).

7. The message a[] that the attacker may have by 1 may be received at input {221}.
The message i[] that the attacker may have by 2 may be received at input {222}.
So the message aenc((tag1,n_12,pk(sskI_8)),pk(ska[])) may be sent to the attacker at output {228}.
attacker(aenc((tag1,n_12,pk(sskI_8)),pk(ska[]))).

8. The message e1_3 that the attacker may have by 3 may be received at input {22}.
The message e2_3 that the attacker may have by 4 may be received at input {23}.
The message pke1_6 that the attacker may have by 5 may be received at input {165}.
The message pke2_6 that the attacker may have by 6 may be received at input {166}.
The message aenc((tag1,n_12,pk(sskI_8)),pk(ska[])) that the attacker may have by 7 may be received at input {168}.
We have e2_3 Ôëá i[] && e1_3 Ôëá u[].
So the message aenc((tag2,n_12,k1_8),pk(sskI_8)) may be sent to the attacker at output {173}.
attacker(aenc((tag2,n_12,k1_8),pk(sskI_8))).

9. The message e1_3 that the attacker may have by 3 may be received at input {22}.
The message e2_3 that the attacker may have by 4 may be received at input {23}.
The message pke1_6 that the attacker may have by 5 may be received at input {165}.
The message pke2_6 that the attacker may have by 6 may be received at input {166}.
The message aenc((tag1,n_12,pk(sskI_8)),pk(ska[])) that the attacker may have by 7 may be received at input {168}.
We have e2_3 Ôëá i[] && e1_3 Ôëá u[].
So the message enc((tag3,a[],hash(pkce_8),scope_12),k1_8) may be sent to the attacker at output {178}.
attacker(enc((tag3,a[],hash(pkce_8),scope_12),k1_8)).

10. The message u[] may be sent to the attacker at output {5}.
attacker(u[]).

11. The message a[] that the attacker may have by 1 may be received at input {221}.
The message i[] that the attacker may have by 2 may be received at input {222}.
The message aenc((tag2,n_12,k1_8),pk(sskI_8)) that the attacker may have by 8 may be received at input {229}.
The message enc((tag3,a[],hash(pkce_8),scope_12),k1_8) that the attacker may have by 9 may be received at input {233}.
So the message aenc((tag4,n2_12,pk(sskI_9)),pk(ski[])) may be sent to the attacker at output {240}.
attacker(aenc((tag4,n2_12,pk(sskI_9)),pk(ski[]))).

12. The message a[] that the attacker may have by 1 may be received at input {382}.
The message u[] that the attacker may have by 10 may be received at input {383}.
The message aenc((tag4,n2_12,pk(sskI_9)),pk(ski[])) that the attacker may have by 11 may be received at input {386}.
So the message aenc((tag5,n2_12,k2_8),pk(sskI_9)) may be sent to the attacker at output {391}.
attacker(aenc((tag5,n2_12,k2_8),pk(sskI_9))).

13. The message a[] that the attacker may have by 1 may be received at input {221}.
The message i[] that the attacker may have by 2 may be received at input {222}.
The message aenc((tag2,n_12,k1_8),pk(sskI_8)) that the attacker may have by 8 may be received at input {229}.
The message enc((tag3,a[],hash(pkce_8),scope_12),k1_8) that the attacker may have by 9 may be received at input {233}.
The message aenc((tag5,n2_12,k2_8),pk(sskI_9)) that the attacker may have by 12 may be received at input {241}.
So the message enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8) may be sent to the attacker at output {247}.
attacker(enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8)).

14. The message a[] that the attacker may have by 1 may be received at input {382}.
The message u[] that the attacker may have by 10 may be received at input {383}.
The message aenc((tag4,n2_12,pk(sskI_9)),pk(ski[])) that the attacker may have by 11 may be received at input {386}.
The message enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8) that the attacker may have by 13 may be received at input {392}.
So the message enc((tag7,code_12),k2_8) may be sent to the attacker at output {401}.
attacker(enc((tag7,code_12),k2_8)).

15. The message a[] that the attacker may have by 1 may be received at input {221}.
The message i[] that the attacker may have by 2 may be received at input {222}.
The message aenc((tag2,n_12,k1_8),pk(sskI_8)) that the attacker may have by 8 may be received at input {229}.
The message enc((tag3,a[],hash(pkce_8),scope_12),k1_8) that the attacker may have by 9 may be received at input {233}.
The message aenc((tag5,n2_12,k2_8),pk(sskI_9)) that the attacker may have by 12 may be received at input {241}.
The message enc((tag7,code_12),k2_8) that the attacker may have by 14 may be received at input {248}.
So the message check_reach_browser[] may be sent to the attacker at output {255}.
attacker(check_reach_browser[]).

16. By 15, attacker(check_reach_browser[]).
The goal is reached, represented in the following fact:
attacker(check_reach_browser[]).


A more detailed output of the traces is available with
  set traceDisplay = long.

new a: bitstring creating a_4 at {1}

new u: bitstring creating u_4 at {2}

new i: bitstring creating i_4 at {3}

out(c, ~M) with ~M = a_4 at {4}

out(c, ~M_1) with ~M_1 = u_4 at {5}

out(c, ~M_2) with ~M_2 = i_4 at {6}

new ska: SecretKey creating ska_2 at {7}

new sku: SecretKey creating sku_2 at {8}

new ski: SecretKey creating ski_2 at {9}

out(c, ~M_3) with ~M_3 = pk(ska_2) at {10}

out(c, ~M_4) with ~M_4 = pk(sku_2) at {11}

out(c, ~M_5) with ~M_5 = pk(ski_2) at {12}

new password: bitstring creating password_3 at {13}

in(c, a_5) at {22} in copy a_6

in(c, a_7) at {23} in copy a_6

in(c, a_8) at {165} in copy a_6

in(c, a_9) at {166} in copy a_6

in(c, ~M) with ~M = a_4 at {221} in copy a_10

in(c, ~M_2) with ~M_2 = i_4 at {222} in copy a_10

new n_4: bitstring creating n_12 at {225} in copy a_10

new sskI: SecretKey creating sskI_8 at {226} in copy a_10

out(c, ~M_6) with ~M_6 = aenc((tag1,n_12,pk(sskI_8)),pk(ska_2)) at {228} in copy a_10

in(c, ~M_6) with ~M_6 = aenc((tag1,n_12,pk(sskI_8)),pk(ska_2)) at {168} in copy a_6

new k1_3: SymmetricKey creating k1_8 at {171} in copy a_6

out(c, ~M_7) with ~M_7 = aenc((tag2,n_12,k1_8),pk(sskI_8)) at {173} in copy a_6

new pkce_3: bitstring creating pkce_8 at {174} in copy a_6

new scope_3: bitstring creating scope_12 at {175} in copy a_6

event appSendsLastMessageToBrowser(aenc((tag1,n_12,pk(sskI_8)),pk(ska_2)),aenc((tag2,n_12,k1_8),pk(sskI_8)),enc((tag3,a_4,hash(pkce_8),scope_12),k1_8)) at {177} in copy a_6

out(c, ~M_8) with ~M_8 = enc((tag3,a_4,hash(pkce_8),scope_12),k1_8) at {178} in copy a_6

in(c, ~M_7) with ~M_7 = aenc((tag2,n_12,k1_8),pk(sskI_8)) at {229} in copy a_10

in(c, ~M_8) with ~M_8 = enc((tag3,a_4,hash(pkce_8),scope_12),k1_8) at {233} in copy a_10

new n2_4: bitstring creating n2_12 at {237} in copy a_10

new sskI_1: SecretKey creating sskI_9 at {238} in copy a_10

out(c, ~M_9) with ~M_9 = aenc((tag4,n2_12,pk(sskI_9)),pk(ski_2)) at {240} in copy a_10

in(c, ~M) with ~M = a_4 at {382} in copy a_11

in(c, ~M_1) with ~M_1 = u_4 at {383} in copy a_11

in(c, ~M_9) with ~M_9 = aenc((tag4,n2_12,pk(sskI_9)),pk(ski_2)) at {386} in copy a_11

new k2_4: SymmetricKey creating k2_8 at {389} in copy a_11

out(c, ~M_10) with ~M_10 = aenc((tag5,n2_12,k2_8),pk(sskI_9)) at {391} in copy a_11

in(c, ~M_10) with ~M_10 = aenc((tag5,n2_12,k2_8),pk(sskI_9)) at {241} in copy a_10

event browserSendsLastMessageToIssuer(aenc((tag4,n2_12,pk(sskI_9)),pk(ski_2)),aenc((tag5,n2_12,k2_8),pk(sskI_9)),enc((tag6,a_4,hash(pkce_8),scope_12,u_4,password_3),k2_8)) at {246} in copy a_10

out(c, ~M_11) with ~M_11 = enc((tag6,a_4,hash(pkce_8),scope_12,u_4,password_3),k2_8) at {247} in copy a_10

in(c, ~M_11) with ~M_11 = enc((tag6,a_4,hash(pkce_8),scope_12,u_4,password_3),k2_8) at {392} in copy a_11

new code_8: bitstring creating code_12 at {398} in copy a_11

event issuerSendsLastMessageToBrowser(aenc((tag4,n2_12,pk(sskI_9)),pk(ski_2)),aenc((tag5,n2_12,k2_8),pk(sskI_9)),enc((tag6,a_4,hash(pkce_8),scope_12,u_4,password_3),k2_8),enc((tag7,code_12),k2_8)) at {400} in copy a_11

out(c, ~M_12) with ~M_12 = enc((tag7,code_12),k2_8) at {401} in copy a_11

in(c, ~M_12) with ~M_12 = enc((tag7,code_12),k2_8) at {248} in copy a_10

event browserSendsLastMessageToApp(aenc((tag1,n_12,pk(sskI_8)),pk(ska_2)),aenc((tag2,n_12,k1_8),pk(sskI_8)),enc((tag3,a_4,hash(pkce_8),scope_12),k1_8),enc((tag8,code_12),k1_8)) at {252} in copy a_10

out(c, ~M_13) with ~M_13 = enc((tag8,code_12),k1_8) at {253} in copy a_10

out(c, ~M_14) with ~M_14 = check_reach_browser at {255} in copy a_10

event browserCompletesProtocol(aenc((tag1,n_12,pk(sskI_8)),pk(ska_2)),aenc((tag2,n_12,k1_8),pk(sskI_8)),enc((tag3,a_4,hash(pkce_8),scope_12),k1_8),aenc((tag4,n2_12,pk(sskI_9)),pk(ski_2)),aenc((tag5,n2_12,k2_8),pk(sskI_9)),enc((tag6,a_4,hash(pkce_8),scope_12,u_4,password_3),k2_8),enc((tag7,code_12),k2_8)) at {256} in copy a_10

The attacker has the message ~M_14 = check_reach_browser.
A trace has been found.
RESULT not attacker(check_reach_browser[]) is false.
-- Query not attacker(check_reach_issuer[]) in process 1.
Translating the process into Horn clauses...
Completing...
select attacker(pk(sk))/-5000
200 rules inserted. Base: 169 rules (45 with conclusion selected). Queue: 67 rules.
400 rules inserted. Base: 321 rules (89 with conclusion selected). Queue: 121 rules.
600 rules inserted. Base: 480 rules (111 with conclusion selected). Queue: 107 rules.
800 rules inserted. Base: 585 rules (135 with conclusion selected). Queue: 165 rules.
1000 rules inserted. Base: 665 rules (153 with conclusion selected). Queue: 207 rules.
1200 rules inserted. Base: 764 rules (169 with conclusion selected). Queue: 217 rules.
1400 rules inserted. Base: 829 rules (183 with conclusion selected). Queue: 229 rules.
1600 rules inserted. Base: 902 rules (196 with conclusion selected). Queue: 210 rules.
1800 rules inserted. Base: 995 rules (215 with conclusion selected). Queue: 156 rules.
2000 rules inserted. Base: 1102 rules (245 with conclusion selected). Queue: 161 rules.
2200 rules inserted. Base: 1208 rules (273 with conclusion selected). Queue: 233 rules.
2400 rules inserted. Base: 1260 rules (290 with conclusion selected). Queue: 277 rules.
2600 rules inserted. Base: 1357 rules (302 with conclusion selected). Queue: 282 rules.
2800 rules inserted. Base: 1454 rules (316 with conclusion selected). Queue: 363 rules.
3000 rules inserted. Base: 1535 rules (338 with conclusion selected). Queue: 457 rules.
3200 rules inserted. Base: 1605 rules (349 with conclusion selected). Queue: 442 rules.
3400 rules inserted. Base: 1679 rules (359 with conclusion selected). Queue: 477 rules.
3600 rules inserted. Base: 1796 rules (373 with conclusion selected). Queue: 453 rules.
3800 rules inserted. Base: 1876 rules (383 with conclusion selected). Queue: 421 rules.
4000 rules inserted. Base: 1955 rules (393 with conclusion selected). Queue: 371 rules.
4200 rules inserted. Base: 1995 rules (416 with conclusion selected). Queue: 371 rules.
4400 rules inserted. Base: 2105 rules (438 with conclusion selected). Queue: 320 rules.
4600 rules inserted. Base: 2170 rules (477 with conclusion selected). Queue: 372 rules.
4800 rules inserted. Base: 2275 rules (535 with conclusion selected). Queue: 401 rules.
5000 rules inserted. Base: 2366 rules (542 with conclusion selected). Queue: 420 rules.
5200 rules inserted. Base: 2487 rules (571 with conclusion selected). Queue: 415 rules.
5400 rules inserted. Base: 2526 rules (583 with conclusion selected). Queue: 409 rules.
5600 rules inserted. Base: 2612 rules (596 with conclusion selected). Queue: 431 rules.
5800 rules inserted. Base: 2708 rules (615 with conclusion selected). Queue: 394 rules.
6000 rules inserted. Base: 2788 rules (628 with conclusion selected). Queue: 431 rules.
6200 rules inserted. Base: 2862 rules (659 with conclusion selected). Queue: 428 rules.
6400 rules inserted. Base: 2933 rules (674 with conclusion selected). Queue: 443 rules.
6600 rules inserted. Base: 3034 rules (701 with conclusion selected). Queue: 442 rules.
6800 rules inserted. Base: 3110 rules (719 with conclusion selected). Queue: 482 rules.
7000 rules inserted. Base: 3211 rules (752 with conclusion selected). Queue: 498 rules.
7200 rules inserted. Base: 3301 rules (763 with conclusion selected). Queue: 506 rules.
7400 rules inserted. Base: 3401 rules (788 with conclusion selected). Queue: 532 rules.
7600 rules inserted. Base: 3524 rules (809 with conclusion selected). Queue: 467 rules.
7800 rules inserted. Base: 3605 rules (824 with conclusion selected). Queue: 453 rules.
8000 rules inserted. Base: 3713 rules (843 with conclusion selected). Queue: 413 rules.
8200 rules inserted. Base: 3833 rules (863 with conclusion selected). Queue: 364 rules.
8400 rules inserted. Base: 3966 rules (882 with conclusion selected). Queue: 301 rules.
8600 rules inserted. Base: 4071 rules (894 with conclusion selected). Queue: 261 rules.
8800 rules inserted. Base: 4168 rules (910 with conclusion selected). Queue: 229 rules.
9000 rules inserted. Base: 4271 rules (929 with conclusion selected). Queue: 175 rules.
9200 rules inserted. Base: 4331 rules (948 with conclusion selected). Queue: 160 rules.
9400 rules inserted. Base: 4416 rules (990 with conclusion selected). Queue: 121 rules.
9600 rules inserted. Base: 4502 rules (1013 with conclusion selected). Queue: 156 rules.
9800 rules inserted. Base: 4619 rules (1038 with conclusion selected). Queue: 144 rules.
10000 rules inserted. Base: 4705 rules (1039 with conclusion selected). Queue: 99 rules.
10200 rules inserted. Base: 4824 rules (1047 with conclusion selected). Queue: 22 rules.
Starting query not attacker(check_reach_issuer[])
goal reachable: attacker(check_reach_issuer[])

Derivation:
Abbreviations:
n_12 = n_4[e2_1 = i[],e1_1 = a[],!1 = @sid]
sskI_8 = sskI[e2_1 = i[],e1_1 = a[],!1 = @sid]
pkce_8 = pkce_1[m = aenc((tag1,n_12,pk(sskI_8)),pk(ska[])),pke1 = pke1_6,e2 = i[],e1 = e1_3,!1 = @sid_1]
scope_12 = scope_1[m = aenc((tag1,n_12,pk(sskI_8)),pk(ska[])),pke1 = pke1_6,e2 = i[],e1 = e1_3,!1 = @sid_1]
k1_8 = k1_1[m = aenc((tag1,n_12,pk(sskI_8)),pk(ska[])),pke1 = pke1_6,e2 = i[],e1 = e1_3,!1 = @sid_1]
n2_12 = n2_4[m_34 = enc((tag3,a[],hash(pkce_8),scope_12),k1_8),m_33 = aenc((tag2,n_12,k1_8),pk(sskI_8)),e2_1 = i[],e1_1 = a[],!1 = @sid]
sskI_9 = sskI_1[m_34 = enc((tag3,a[],hash(pkce_8),scope_12),k1_8),m_33 = aenc((tag2,n_12,k1_8),pk(sskI_8)),e2_1 = i[],e1_1 = a[],!1 = @sid]
k2_8 = k2_4[m_64 = aenc((tag4,n2_12,pk(sskI_9)),pk(ski[])),e2_2 = u[],e1_2 = a[],!1 = @sid_2]
code_12 = code_8[m_66 = enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8),m_64 = aenc((tag4,n2_12,pk(sskI_9)),pk(ski[])),e2_2 = u[],e1_2 = a[],!1 = @sid_2]
n2_13 = n2_1[m_6 = enc((tag8,code_12),k1_8),m = aenc((tag1,n_12,pk(sskI_8)),pk(ska[])),pke1 = pke1_6,e2 = i[],e1 = e1_3,!1 = @sid_1]
sskI2_4 = sskI2_1[m_6 = enc((tag8,code_12),k1_8),m = aenc((tag1,n_12,pk(sskI_8)),pk(ska[])),pke1 = pke1_6,e2 = i[],e1 = e1_3,!1 = @sid_1]
k3_8 = k3_4[m_68 = aenc((tag9,n2_13,pk(sskI2_4)),pk(ski[])),m_66 = enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8),m_64 = aenc((tag4,n2_12,pk(sskI_9)),pk(ski[])),e2_2 = u[],e1_2 = a[],!1 = @sid_2]
sks_4 = sks_1[m_13 = aenc((tag10,n2_13,k3_8),pk(sskI2_4)),m_6 = enc((tag8,code_12),k1_8),m = aenc((tag1,n_12,pk(sskI_8)),pk(ska[])),pke1 = pke1_6,e2 = i[],e1 = e1_3,!1 = @sid_1]
jti_8 = jti_1[m_13 = aenc((tag10,n2_13,k3_8),pk(sskI2_4)),m_6 = enc((tag8,code_12),k1_8),m = aenc((tag1,n_12,pk(sskI_8)),pk(ska[])),pke1 = pke1_6,e2 = i[],e1 = e1_3,!1 = @sid_1]

1. The message a[] may be sent to the attacker at output {4}.
attacker(a[]).

2. The message u[] may be sent to the attacker at output {5}.
attacker(u[]).

3. The message i[] may be sent to the attacker at output {6}.
attacker(i[]).

4. The attacker has some term e1_3.
attacker(e1_3).

5. The attacker has some term pke1_6.
attacker(pke1_6).

6. The message a[] that the attacker may have by 1 may be received at input {221}.
The message i[] that the attacker may have by 3 may be received at input {222}.
So the message aenc((tag1,n_12,pk(sskI_8)),pk(ska[])) may be sent to the attacker at output {228}.
attacker(aenc((tag1,n_12,pk(sskI_8)),pk(ska[]))).

7. The message e1_3 that the attacker may have by 4 may be received at input {22}.
The message i[] that the attacker may have by 3 may be received at input {23}.
The message pke1_6 that the attacker may have by 5 may be received at input {71}.
The message aenc((tag1,n_12,pk(sskI_8)),pk(ska[])) that the attacker may have by 6 may be received at input {73}.
We have e1_3 Ôëá u[].
So the message aenc((tag2,n_12,k1_8),pk(sskI_8)) may be sent to the attacker at output {78}.
attacker(aenc((tag2,n_12,k1_8),pk(sskI_8))).

8. The message e1_3 that the attacker may have by 4 may be received at input {22}.
The message i[] that the attacker may have by 3 may be received at input {23}.
The message pke1_6 that the attacker may have by 5 may be received at input {71}.
The message aenc((tag1,n_12,pk(sskI_8)),pk(ska[])) that the attacker may have by 6 may be received at input {73}.
We have e1_3 Ôëá u[].
So the message enc((tag3,a[],hash(pkce_8),scope_12),k1_8) may be sent to the attacker at output {83}.
attacker(enc((tag3,a[],hash(pkce_8),scope_12),k1_8)).

9. The message a[] that the attacker may have by 1 may be received at input {221}.
The message i[] that the attacker may have by 3 may be received at input {222}.
The message aenc((tag2,n_12,k1_8),pk(sskI_8)) that the attacker may have by 7 may be received at input {229}.
The message enc((tag3,a[],hash(pkce_8),scope_12),k1_8) that the attacker may have by 8 may be received at input {233}.
So the message aenc((tag4,n2_12,pk(sskI_9)),pk(ski[])) may be sent to the attacker at output {240}.
attacker(aenc((tag4,n2_12,pk(sskI_9)),pk(ski[]))).

10. The message a[] that the attacker may have by 1 may be received at input {382}.
The message u[] that the attacker may have by 2 may be received at input {383}.
The message aenc((tag4,n2_12,pk(sskI_9)),pk(ski[])) that the attacker may have by 9 may be received at input {386}.
So the message aenc((tag5,n2_12,k2_8),pk(sskI_9)) may be sent to the attacker at output {391}.
attacker(aenc((tag5,n2_12,k2_8),pk(sskI_9))).

11. The message a[] that the attacker may have by 1 may be received at input {221}.
The message i[] that the attacker may have by 3 may be received at input {222}.
The message aenc((tag2,n_12,k1_8),pk(sskI_8)) that the attacker may have by 7 may be received at input {229}.
The message enc((tag3,a[],hash(pkce_8),scope_12),k1_8) that the attacker may have by 8 may be received at input {233}.
The message aenc((tag5,n2_12,k2_8),pk(sskI_9)) that the attacker may have by 10 may be received at input {241}.
So the message enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8) may be sent to the attacker at output {247}.
attacker(enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8)).

12. The message a[] that the attacker may have by 1 may be received at input {382}.
The message u[] that the attacker may have by 2 may be received at input {383}.
The message aenc((tag4,n2_12,pk(sskI_9)),pk(ski[])) that the attacker may have by 9 may be received at input {386}.
The message enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8) that the attacker may have by 11 may be received at input {392}.
So the message enc((tag7,code_12),k2_8) may be sent to the attacker at output {401}.
attacker(enc((tag7,code_12),k2_8)).

13. The message a[] that the attacker may have by 1 may be received at input {221}.
The message i[] that the attacker may have by 3 may be received at input {222}.
The message aenc((tag2,n_12,k1_8),pk(sskI_8)) that the attacker may have by 7 may be received at input {229}.
The message enc((tag3,a[],hash(pkce_8),scope_12),k1_8) that the attacker may have by 8 may be received at input {233}.
The message aenc((tag5,n2_12,k2_8),pk(sskI_9)) that the attacker may have by 10 may be received at input {241}.
The message enc((tag7,code_12),k2_8) that the attacker may have by 12 may be received at input {248}.
So the message enc((tag8,code_12),k1_8) may be sent to the attacker at output {253}.
attacker(enc((tag8,code_12),k1_8)).

14. The message e1_3 that the attacker may have by 4 may be received at input {22}.
The message i[] that the attacker may have by 3 may be received at input {23}.
The message pke1_6 that the attacker may have by 5 may be received at input {71}.
The message aenc((tag1,n_12,pk(sskI_8)),pk(ska[])) that the attacker may have by 6 may be received at input {73}.
The message enc((tag8,code_12),k1_8) that the attacker may have by 13 may be received at input {84}.
We have e1_3 Ôëá u[].
So the message aenc((tag9,n2_13,pk(sskI2_4)),pk(ski[])) may be sent to the attacker at output {90}.
attacker(aenc((tag9,n2_13,pk(sskI2_4)),pk(ski[]))).

15. The message a[] that the attacker may have by 1 may be received at input {382}.
The message u[] that the attacker may have by 2 may be received at input {383}.
The message aenc((tag4,n2_12,pk(sskI_9)),pk(ski[])) that the attacker may have by 9 may be received at input {386}.
The message enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8) that the attacker may have by 11 may be received at input {392}.
The message aenc((tag9,n2_13,pk(sskI2_4)),pk(ski[])) that the attacker may have by 14 may be received at input {402}.
So the message aenc((tag10,n2_13,k3_8),pk(sskI2_4)) may be sent to the attacker at output {407}.
attacker(aenc((tag10,n2_13,k3_8),pk(sskI2_4))).

16. The message e1_3 that the attacker may have by 4 may be received at input {22}.
The message i[] that the attacker may have by 3 may be received at input {23}.
The message pke1_6 that the attacker may have by 5 may be received at input {71}.
The message aenc((tag1,n_12,pk(sskI_8)),pk(ska[])) that the attacker may have by 6 may be received at input {73}.
The message enc((tag8,code_12),k1_8) that the attacker may have by 13 may be received at input {84}.
The message aenc((tag10,n2_13,k3_8),pk(sskI2_4)) that the attacker may have by 15 may be received at input {91}.
We have e1_3 Ôëá u[].
So the message enc((tag11,pk(sks_4),sign((a[],jti_8,code_12,pkce_8),sks_4)),k3_8) may be sent to the attacker at output {100}.
attacker(enc((tag11,pk(sks_4),sign((a[],jti_8,code_12,pkce_8),sks_4)),k3_8)).

17. The message a[] that the attacker may have by 1 may be received at input {382}.
The message u[] that the attacker may have by 2 may be received at input {383}.
The message aenc((tag4,n2_12,pk(sskI_9)),pk(ski[])) that the attacker may have by 9 may be received at input {386}.
The message enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8) that the attacker may have by 11 may be received at input {392}.
The message aenc((tag9,n2_13,pk(sskI2_4)),pk(ski[])) that the attacker may have by 14 may be received at input {402}.
The message enc((tag11,pk(sks_4),sign((a[],jti_8,code_12,pkce_8),sks_4)),k3_8) that the attacker may have by 16 may be received at input {408}.
So the message check_reach_issuer[] may be sent to the attacker at output {421}.
attacker(check_reach_issuer[]).

18. By 17, attacker(check_reach_issuer[]).
The goal is reached, represented in the following fact:
attacker(check_reach_issuer[]).


A more detailed output of the traces is available with
  set traceDisplay = long.

new a: bitstring creating a_4 at {1}

new u: bitstring creating u_4 at {2}

new i: bitstring creating i_4 at {3}

out(c, ~M) with ~M = a_4 at {4}

out(c, ~M_1) with ~M_1 = u_4 at {5}

out(c, ~M_2) with ~M_2 = i_4 at {6}

new ska: SecretKey creating ska_2 at {7}

new sku: SecretKey creating sku_2 at {8}

new ski: SecretKey creating ski_2 at {9}

out(c, ~M_3) with ~M_3 = pk(ska_2) at {10}

out(c, ~M_4) with ~M_4 = pk(sku_2) at {11}

out(c, ~M_5) with ~M_5 = pk(ski_2) at {12}

new password: bitstring creating password_3 at {13}

in(c, a_5) at {22} in copy a_6

in(c, ~M_2) with ~M_2 = i_4 at {23} in copy a_6

in(c, a_7) at {71} in copy a_6

in(c, ~M) with ~M = a_4 at {221} in copy a_8

in(c, ~M_2) with ~M_2 = i_4 at {222} in copy a_8

new n_4: bitstring creating n_12 at {225} in copy a_8

new sskI: SecretKey creating sskI_8 at {226} in copy a_8

out(c, ~M_6) with ~M_6 = aenc((tag1,n_12,pk(sskI_8)),pk(ska_2)) at {228} in copy a_8

in(c, ~M_6) with ~M_6 = aenc((tag1,n_12,pk(sskI_8)),pk(ska_2)) at {73} in copy a_6

new k1_1: SymmetricKey creating k1_8 at {76} in copy a_6

out(c, ~M_7) with ~M_7 = aenc((tag2,n_12,k1_8),pk(sskI_8)) at {78} in copy a_6

new pkce_1: bitstring creating pkce_8 at {79} in copy a_6

new scope_1: bitstring creating scope_12 at {80} in copy a_6

event appSendsLastMessageToBrowser(aenc((tag1,n_12,pk(sskI_8)),pk(ska_2)),aenc((tag2,n_12,k1_8),pk(sskI_8)),enc((tag3,a_4,hash(pkce_8),scope_12),k1_8)) at {82} in copy a_6

out(c, ~M_8) with ~M_8 = enc((tag3,a_4,hash(pkce_8),scope_12),k1_8) at {83} in copy a_6

in(c, ~M_7) with ~M_7 = aenc((tag2,n_12,k1_8),pk(sskI_8)) at {229} in copy a_8

in(c, ~M_8) with ~M_8 = enc((tag3,a_4,hash(pkce_8),scope_12),k1_8) at {233} in copy a_8

new n2_4: bitstring creating n2_12 at {237} in copy a_8

new sskI_1: SecretKey creating sskI_9 at {238} in copy a_8

out(c, ~M_9) with ~M_9 = aenc((tag4,n2_12,pk(sskI_9)),pk(ski_2)) at {240} in copy a_8

in(c, ~M) with ~M = a_4 at {382} in copy a_9

in(c, ~M_1) with ~M_1 = u_4 at {383} in copy a_9

in(c, ~M_9) with ~M_9 = aenc((tag4,n2_12,pk(sskI_9)),pk(ski_2)) at {386} in copy a_9

new k2_4: SymmetricKey creating k2_8 at {389} in copy a_9

out(c, ~M_10) with ~M_10 = aenc((tag5,n2_12,k2_8),pk(sskI_9)) at {391} in copy a_9

in(c, ~M_10) with ~M_10 = aenc((tag5,n2_12,k2_8),pk(sskI_9)) at {241} in copy a_8

event browserSendsLastMessageToIssuer(aenc((tag4,n2_12,pk(sskI_9)),pk(ski_2)),aenc((tag5,n2_12,k2_8),pk(sskI_9)),enc((tag6,a_4,hash(pkce_8),scope_12,u_4,password_3),k2_8)) at {246} in copy a_8

out(c, ~M_11) with ~M_11 = enc((tag6,a_4,hash(pkce_8),scope_12,u_4,password_3),k2_8) at {247} in copy a_8

in(c, ~M_11) with ~M_11 = enc((tag6,a_4,hash(pkce_8),scope_12,u_4,password_3),k2_8) at {392} in copy a_9

new code_8: bitstring creating code_12 at {398} in copy a_9

event issuerSendsLastMessageToBrowser(aenc((tag4,n2_12,pk(sskI_9)),pk(ski_2)),aenc((tag5,n2_12,k2_8),pk(sskI_9)),enc((tag6,a_4,hash(pkce_8),scope_12,u_4,password_3),k2_8),enc((tag7,code_12),k2_8)) at {400} in copy a_9

out(c, ~M_12) with ~M_12 = enc((tag7,code_12),k2_8) at {401} in copy a_9

in(c, ~M_12) with ~M_12 = enc((tag7,code_12),k2_8) at {248} in copy a_8

event browserSendsLastMessageToApp(aenc((tag1,n_12,pk(sskI_8)),pk(ska_2)),aenc((tag2,n_12,k1_8),pk(sskI_8)),enc((tag3,a_4,hash(pkce_8),scope_12),k1_8),enc((tag8,code_12),k1_8)) at {252} in copy a_8

out(c, ~M_13) with ~M_13 = enc((tag8,code_12),k1_8) at {253} in copy a_8

out(c, ~M_14) with ~M_14 = check_reach_browser at {255} in copy a_8

event browserCompletesProtocol(aenc((tag1,n_12,pk(sskI_8)),pk(ska_2)),aenc((tag2,n_12,k1_8),pk(sskI_8)),enc((tag3,a_4,hash(pkce_8),scope_12),k1_8),aenc((tag4,n2_12,pk(sskI_9)),pk(ski_2)),aenc((tag5,n2_12,k2_8),pk(sskI_9)),enc((tag6,a_4,hash(pkce_8),scope_12,u_4,password_3),k2_8),enc((tag7,code_12),k2_8)) at {256} in copy a_8

in(c, ~M_13) with ~M_13 = enc((tag8,code_12),k1_8) at {84} in copy a_6

new n2_1: bitstring creating n2_13 at {87} in copy a_6

new sskI2_1: SecretKey creating sskI2_4 at {88} in copy a_6

out(c, ~M_15) with ~M_15 = aenc((tag9,n2_13,pk(sskI2_4)),pk(ski_2)) at {90} in copy a_6

in(c, ~M_15) with ~M_15 = aenc((tag9,n2_13,pk(sskI2_4)),pk(ski_2)) at {402} in copy a_9

new k3_4: SymmetricKey creating k3_8 at {405} in copy a_9

out(c, ~M_16) with ~M_16 = aenc((tag10,n2_13,k3_8),pk(sskI2_4)) at {407} in copy a_9

in(c, ~M_16) with ~M_16 = aenc((tag10,n2_13,k3_8),pk(sskI2_4)) at {91} in copy a_6

new sks_1: SecretKey creating sks_4 at {95} in copy a_6

new jti_1: bitstring creating jti_8 at {96} in copy a_6

event appSendsLastMessageToIssuer(aenc((tag9,n2_13,pk(sskI2_4)),pk(ski_2)),aenc((tag10,n2_13,k3_8),pk(sskI2_4)),enc((tag11,pk(sks_4),sign((a_4,jti_8,code_12,pkce_8),sks_4)),k3_8)) at {99} in copy a_6

out(c, ~M_17) with ~M_17 = enc((tag11,pk(sks_4),sign((a_4,jti_8,code_12,pkce_8),sks_4)),k3_8) at {100} in copy a_6

in(c, ~M_17) with ~M_17 = enc((tag11,pk(sks_4),sign((a_4,jti_8,code_12,pkce_8),sks_4)),k3_8) at {408} in copy a_9

event issuerSendsLastMessageToApp(aenc((tag9,n2_13,pk(sskI2_4)),pk(ski_2)),aenc((tag10,n2_13,k3_8),pk(sskI2_4)),enc((tag11,pk(sks_4),sign((a_4,jti_8,code_12,pkce_8),sks_4)),k3_8),enc((tag12,sign((hash_pk(pk(sks_4)),jti_8,scope_12,a_4,i_4,u_4),ski_2)),k3_8)) at {418} in copy a_9

out(c, ~M_18) with ~M_18 = enc((tag12,sign((hash_pk(pk(sks_4)),jti_8,scope_12,a_4,i_4,u_4),ski_2)),k3_8) at {419} in copy a_9

out(c, ~M_19) with ~M_19 = check_reach_issuer at {421} in copy a_9

event issuerCompletesProtocol(aenc((tag4,n2_12,pk(sskI_9)),pk(ski_2)),aenc((tag5,n2_12,k2_8),pk(sskI_9)),enc((tag6,a_4,hash(pkce_8),scope_12,u_4,password_3),k2_8),aenc((tag9,n2_13,pk(sskI2_4)),pk(ski_2)),aenc((tag10,n2_13,k3_8),pk(sskI2_4)),enc((tag11,pk(sks_4),sign((a_4,jti_8,code_12,pkce_8),sks_4)),k3_8)) at {422} in copy a_9

The attacker has the message ~M_19 = check_reach_issuer.
A trace has been found.
RESULT not attacker(check_reach_issuer[]) is false.
-- Query not attacker(free_code[]) in process 1.
Translating the process into Horn clauses...
Completing...
select attacker(pk(sk))/-5000
200 rules inserted. Base: 169 rules (45 with conclusion selected). Queue: 67 rules.
400 rules inserted. Base: 321 rules (89 with conclusion selected). Queue: 121 rules.
600 rules inserted. Base: 480 rules (111 with conclusion selected). Queue: 107 rules.
800 rules inserted. Base: 585 rules (135 with conclusion selected). Queue: 165 rules.
1000 rules inserted. Base: 665 rules (153 with conclusion selected). Queue: 207 rules.
1200 rules inserted. Base: 764 rules (169 with conclusion selected). Queue: 217 rules.
1400 rules inserted. Base: 829 rules (183 with conclusion selected). Queue: 229 rules.
1600 rules inserted. Base: 902 rules (196 with conclusion selected). Queue: 210 rules.
1800 rules inserted. Base: 995 rules (215 with conclusion selected). Queue: 156 rules.
2000 rules inserted. Base: 1102 rules (245 with conclusion selected). Queue: 161 rules.
2200 rules inserted. Base: 1208 rules (273 with conclusion selected). Queue: 233 rules.
2400 rules inserted. Base: 1260 rules (290 with conclusion selected). Queue: 277 rules.
2600 rules inserted. Base: 1357 rules (302 with conclusion selected). Queue: 282 rules.
2800 rules inserted. Base: 1454 rules (316 with conclusion selected). Queue: 363 rules.
3000 rules inserted. Base: 1535 rules (338 with conclusion selected). Queue: 457 rules.
3200 rules inserted. Base: 1605 rules (349 with conclusion selected). Queue: 442 rules.
3400 rules inserted. Base: 1679 rules (359 with conclusion selected). Queue: 477 rules.
3600 rules inserted. Base: 1796 rules (373 with conclusion selected). Queue: 453 rules.
3800 rules inserted. Base: 1876 rules (383 with conclusion selected). Queue: 421 rules.
4000 rules inserted. Base: 1955 rules (393 with conclusion selected). Queue: 371 rules.
4200 rules inserted. Base: 1995 rules (416 with conclusion selected). Queue: 371 rules.
4400 rules inserted. Base: 2105 rules (438 with conclusion selected). Queue: 320 rules.
4600 rules inserted. Base: 2170 rules (477 with conclusion selected). Queue: 372 rules.
4800 rules inserted. Base: 2275 rules (535 with conclusion selected). Queue: 401 rules.
5000 rules inserted. Base: 2366 rules (542 with conclusion selected). Queue: 420 rules.
5200 rules inserted. Base: 2487 rules (571 with conclusion selected). Queue: 415 rules.
5400 rules inserted. Base: 2526 rules (583 with conclusion selected). Queue: 409 rules.
5600 rules inserted. Base: 2612 rules (596 with conclusion selected). Queue: 431 rules.
5800 rules inserted. Base: 2708 rules (615 with conclusion selected). Queue: 394 rules.
6000 rules inserted. Base: 2788 rules (628 with conclusion selected). Queue: 431 rules.
6200 rules inserted. Base: 2862 rules (659 with conclusion selected). Queue: 428 rules.
6400 rules inserted. Base: 2933 rules (674 with conclusion selected). Queue: 443 rules.
6600 rules inserted. Base: 3034 rules (701 with conclusion selected). Queue: 442 rules.
6800 rules inserted. Base: 3110 rules (719 with conclusion selected). Queue: 482 rules.
7000 rules inserted. Base: 3211 rules (752 with conclusion selected). Queue: 498 rules.
7200 rules inserted. Base: 3301 rules (763 with conclusion selected). Queue: 506 rules.
7400 rules inserted. Base: 3401 rules (788 with conclusion selected). Queue: 532 rules.
7600 rules inserted. Base: 3524 rules (809 with conclusion selected). Queue: 467 rules.
7800 rules inserted. Base: 3605 rules (824 with conclusion selected). Queue: 453 rules.
8000 rules inserted. Base: 3713 rules (843 with conclusion selected). Queue: 413 rules.
8200 rules inserted. Base: 3833 rules (863 with conclusion selected). Queue: 364 rules.
8400 rules inserted. Base: 3966 rules (882 with conclusion selected). Queue: 301 rules.
8600 rules inserted. Base: 4071 rules (894 with conclusion selected). Queue: 261 rules.
8800 rules inserted. Base: 4168 rules (910 with conclusion selected). Queue: 229 rules.
9000 rules inserted. Base: 4271 rules (929 with conclusion selected). Queue: 175 rules.
9200 rules inserted. Base: 4331 rules (948 with conclusion selected). Queue: 160 rules.
9400 rules inserted. Base: 4416 rules (990 with conclusion selected). Queue: 121 rules.
9600 rules inserted. Base: 4502 rules (1013 with conclusion selected). Queue: 156 rules.
9800 rules inserted. Base: 4619 rules (1038 with conclusion selected). Queue: 144 rules.
10000 rules inserted. Base: 4705 rules (1039 with conclusion selected). Queue: 99 rules.
10200 rules inserted. Base: 4824 rules (1047 with conclusion selected). Queue: 22 rules.
Starting query not attacker(free_code[])
goal reachable: attacker(sk) && attacker(pk(sk)) -> attacker(free_code[])

Derivation:
Abbreviations:
n_12 = n_4[e2_1 = i[],e1_1 = a[],!1 = @sid]
sskI_8 = sskI[e2_1 = i[],e1_1 = a[],!1 = @sid]
pkce_8 = pkce_3[m_24 = aenc((tag1,n_12,pk(sskI_8)),pk(ska[])),pke2_1 = pk(sk),pke1_1 = pke1_6,e2 = e2_3,e1 = e1_3,!1 = @sid_1]
scope_12 = scope_3[m_24 = aenc((tag1,n_12,pk(sskI_8)),pk(ska[])),pke2_1 = pk(sk),pke1_1 = pke1_6,e2 = e2_3,e1 = e1_3,!1 = @sid_1]
k1_8 = k1_3[m_24 = aenc((tag1,n_12,pk(sskI_8)),pk(ska[])),pke2_1 = pk(sk),pke1_1 = pke1_6,e2 = e2_3,e1 = e1_3,!1 = @sid_1]
n2_12 = n2_4[m_34 = enc((tag3,a[],hash(pkce_8),scope_12),k1_8),m_33 = aenc((tag2,n_12,k1_8),pk(sskI_8)),e2_1 = i[],e1_1 = a[],!1 = @sid]
sskI_9 = sskI_1[m_34 = enc((tag3,a[],hash(pkce_8),scope_12),k1_8),m_33 = aenc((tag2,n_12,k1_8),pk(sskI_8)),e2_1 = i[],e1_1 = a[],!1 = @sid]
k2_8 = k2_4[m_64 = aenc((tag4,n2_12,pk(sskI_9)),pk(ski[])),e2_2 = u[],e1_2 = a[],!1 = @sid_2]
code_12 = code_8[m_66 = enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8),m_64 = aenc((tag4,n2_12,pk(sskI_9)),pk(ski[])),e2_2 = u[],e1_2 = a[],!1 = @sid_2]
n2_13 = n2_3[m_27 = enc((tag8,code_12),k1_8),m_24 = aenc((tag1,n_12,pk(sskI_8)),pk(ska[])),pke2_1 = pk(sk),pke1_1 = pke1_6,e2 = e2_3,e1 = e1_3,!1 = @sid_1]
sskI2_4 = sskI2_3[m_27 = enc((tag8,code_12),k1_8),m_24 = aenc((tag1,n_12,pk(sskI_8)),pk(ska[])),pke2_1 = pk(sk),pke1_1 = pke1_6,e2 = e2_3,e1 = e1_3,!1 = @sid_1]
jti_8 = jti_3[m_29 = aenc((tag10,n2_13,symk),pk(sskI2_4)),m_27 = enc((tag8,code_12),k1_8),m_24 = aenc((tag1,n_12,pk(sskI_8)),pk(ska[])),pke2_1 = pk(sk),pke1_1 = pke1_6,e2 = e2_3,e1 = e1_3,!1 = @sid_1]
sks_4 = sks_3[m_29 = aenc((tag10,n2_13,symk),pk(sskI2_4)),m_27 = enc((tag8,code_12),k1_8),m_24 = aenc((tag1,n_12,pk(sskI_8)),pk(ska[])),pke2_1 = pk(sk),pke1_1 = pke1_6,e2 = e2_3,e1 = e1_3,!1 = @sid_1]

1. The attacker has some term symk.
attacker(symk).

2. The attacker has some term e1_3.
attacker(e1_3).

3. The attacker has some term e2_3.
attacker(e2_3).

4. The attacker has some term pke1_6.
attacker(pke1_6).

5. We assume as hypothesis that
attacker(pk(sk)).

6. The message a[] may be sent to the attacker at output {4}.
attacker(a[]).

7. The message i[] may be sent to the attacker at output {6}.
attacker(i[]).

8. The message a[] that the attacker may have by 6 may be received at input {221}.
The message i[] that the attacker may have by 7 may be received at input {222}.
So the message aenc((tag1,n_12,pk(sskI_8)),pk(ska[])) may be sent to the attacker at output {228}.
attacker(aenc((tag1,n_12,pk(sskI_8)),pk(ska[]))).

9. The message e1_3 that the attacker may have by 2 may be received at input {22}.
The message e2_3 that the attacker may have by 3 may be received at input {23}.
The message pke1_6 that the attacker may have by 4 may be received at input {165}.
The message pk(sk) that the attacker may have by 5 may be received at input {166}.
The message aenc((tag1,n_12,pk(sskI_8)),pk(ska[])) that the attacker may have by 8 may be received at input {168}.
We have e2_3 Ôëá i[] && e1_3 Ôëá u[].
So the message aenc((tag2,n_12,k1_8),pk(sskI_8)) may be sent to the attacker at output {173}.
attacker(aenc((tag2,n_12,k1_8),pk(sskI_8))).

10. The message e1_3 that the attacker may have by 2 may be received at input {22}.
The message e2_3 that the attacker may have by 3 may be received at input {23}.
The message pke1_6 that the attacker may have by 4 may be received at input {165}.
The message pk(sk) that the attacker may have by 5 may be received at input {166}.
The message aenc((tag1,n_12,pk(sskI_8)),pk(ska[])) that the attacker may have by 8 may be received at input {168}.
We have e2_3 Ôëá i[] && e1_3 Ôëá u[].
So the message enc((tag3,a[],hash(pkce_8),scope_12),k1_8) may be sent to the attacker at output {178}.
attacker(enc((tag3,a[],hash(pkce_8),scope_12),k1_8)).

11. The message u[] may be sent to the attacker at output {5}.
attacker(u[]).

12. The message a[] that the attacker may have by 6 may be received at input {221}.
The message i[] that the attacker may have by 7 may be received at input {222}.
The message aenc((tag2,n_12,k1_8),pk(sskI_8)) that the attacker may have by 9 may be received at input {229}.
The message enc((tag3,a[],hash(pkce_8),scope_12),k1_8) that the attacker may have by 10 may be received at input {233}.
So the message aenc((tag4,n2_12,pk(sskI_9)),pk(ski[])) may be sent to the attacker at output {240}.
attacker(aenc((tag4,n2_12,pk(sskI_9)),pk(ski[]))).

13. The message a[] that the attacker may have by 6 may be received at input {382}.
The message u[] that the attacker may have by 11 may be received at input {383}.
The message aenc((tag4,n2_12,pk(sskI_9)),pk(ski[])) that the attacker may have by 12 may be received at input {386}.
So the message aenc((tag5,n2_12,k2_8),pk(sskI_9)) may be sent to the attacker at output {391}.
attacker(aenc((tag5,n2_12,k2_8),pk(sskI_9))).

14. The message a[] that the attacker may have by 6 may be received at input {221}.
The message i[] that the attacker may have by 7 may be received at input {222}.
The message aenc((tag2,n_12,k1_8),pk(sskI_8)) that the attacker may have by 9 may be received at input {229}.
The message enc((tag3,a[],hash(pkce_8),scope_12),k1_8) that the attacker may have by 10 may be received at input {233}.
The message aenc((tag5,n2_12,k2_8),pk(sskI_9)) that the attacker may have by 13 may be received at input {241}.
So the message enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8) may be sent to the attacker at output {247}.
attacker(enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8)).

15. The message a[] that the attacker may have by 6 may be received at input {382}.
The message u[] that the attacker may have by 11 may be received at input {383}.
The message aenc((tag4,n2_12,pk(sskI_9)),pk(ski[])) that the attacker may have by 12 may be received at input {386}.
The message enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8) that the attacker may have by 14 may be received at input {392}.
So the message enc((tag7,code_12),k2_8) may be sent to the attacker at output {401}.
attacker(enc((tag7,code_12),k2_8)).

16. The message a[] that the attacker may have by 6 may be received at input {221}.
The message i[] that the attacker may have by 7 may be received at input {222}.
The message aenc((tag2,n_12,k1_8),pk(sskI_8)) that the attacker may have by 9 may be received at input {229}.
The message enc((tag3,a[],hash(pkce_8),scope_12),k1_8) that the attacker may have by 10 may be received at input {233}.
The message aenc((tag5,n2_12,k2_8),pk(sskI_9)) that the attacker may have by 13 may be received at input {241}.
The message enc((tag7,code_12),k2_8) that the attacker may have by 15 may be received at input {248}.
So the message enc((tag8,code_12),k1_8) may be sent to the attacker at output {253}.
attacker(enc((tag8,code_12),k1_8)).

17. We assume as hypothesis that
attacker(sk).

18. The message e1_3 that the attacker may have by 2 may be received at input {22}.
The message e2_3 that the attacker may have by 3 may be received at input {23}.
The message pke1_6 that the attacker may have by 4 may be received at input {165}.
The message pk(sk) that the attacker may have by 5 may be received at input {166}.
The message aenc((tag1,n_12,pk(sskI_8)),pk(ska[])) that the attacker may have by 8 may be received at input {168}.
The message enc((tag8,code_12),k1_8) that the attacker may have by 16 may be received at input {179}.
We have e2_3 Ôëá i[] && e1_3 Ôëá u[].
So the message aenc((tag9,n2_13,pk(sskI2_4)),pk(sk)) may be sent to the attacker at output {185}.
attacker(aenc((tag9,n2_13,pk(sskI2_4)),pk(sk))).

19. By 18, the attacker may know aenc((tag9,n2_13,pk(sskI2_4)),pk(sk)).
By 17, the attacker may know sk.
Using the function adec the attacker may obtain (tag9,n2_13,pk(sskI2_4)).
attacker((tag9,n2_13,pk(sskI2_4))).

20. By 19, the attacker may know (tag9,n2_13,pk(sskI2_4)).
Using the function 3-proj-3-tuple the attacker may obtain pk(sskI2_4).
attacker(pk(sskI2_4)).

21. By 19, the attacker may know (tag9,n2_13,pk(sskI2_4)).
Using the function 2-proj-3-tuple the attacker may obtain n2_13.
attacker(n2_13).

22. Using the function tag10 the attacker may obtain tag10.
attacker(tag10).

23. By 22, the attacker may know tag10.
By 21, the attacker may know n2_13.
By 1, the attacker may know symk.
Using the function 3-tuple the attacker may obtain (tag10,n2_13,symk).
attacker((tag10,n2_13,symk)).

24. By 23, the attacker may know (tag10,n2_13,symk).
By 20, the attacker may know pk(sskI2_4).
Using the function aenc the attacker may obtain aenc((tag10,n2_13,symk),pk(sskI2_4)).
attacker(aenc((tag10,n2_13,symk),pk(sskI2_4))).

25. The message e1_3 that the attacker may have by 2 may be received at input {22}.
The message e2_3 that the attacker may have by 3 may be received at input {23}.
The message pke1_6 that the attacker may have by 4 may be received at input {165}.
The message pk(sk) that the attacker may have by 5 may be received at input {166}.
The message aenc((tag1,n_12,pk(sskI_8)),pk(ska[])) that the attacker may have by 8 may be received at input {168}.
The message enc((tag8,code_12),k1_8) that the attacker may have by 16 may be received at input {179}.
The message aenc((tag10,n2_13,symk),pk(sskI2_4)) that the attacker may have by 24 may be received at input {186}.
We have e2_3 Ôëá i[] && e1_3 Ôëá u[].
So the message enc((tag11,pk(sks_4),sign((a[],jti_8,code_12,pkce_8),sks_4)),symk) may be sent to the attacker at output {195}.
attacker(enc((tag11,pk(sks_4),sign((a[],jti_8,code_12,pkce_8),sks_4)),symk)).

26. By 25, the attacker may know enc((tag11,pk(sks_4),sign((a[],jti_8,code_12,pkce_8),sks_4)),symk).
By 1, the attacker may know symk.
Using the function dec the attacker may obtain (tag11,pk(sks_4),sign((a[],jti_8,code_12,pkce_8),sks_4)).
attacker((tag11,pk(sks_4),sign((a[],jti_8,code_12,pkce_8),sks_4))).

27. By 26, the attacker may know (tag11,pk(sks_4),sign((a[],jti_8,code_12,pkce_8),sks_4)).
Using the function 3-proj-3-tuple the attacker may obtain sign((a[],jti_8,code_12,pkce_8),sks_4).
attacker(sign((a[],jti_8,code_12,pkce_8),sks_4)).

28. By 27, the attacker may know sign((a[],jti_8,code_12,pkce_8),sks_4).
Using the function getMsg the attacker may obtain (a[],jti_8,code_12,pkce_8).
attacker((a[],jti_8,code_12,pkce_8)).

29. By 28, the attacker may know (a[],jti_8,code_12,pkce_8).
Using the function 3-proj-4-tuple the attacker may obtain code_12.
attacker(code_12).

30. By 29, the attacker may know code_12.
Using the function ch the attacker may obtain ch(code_12).
attacker(ch(code_12)).

31. The message a[] that the attacker may have by 6 may be received at input {221}.
The message i[] that the attacker may have by 7 may be received at input {222}.
The message aenc((tag2,n_12,k1_8),pk(sskI_8)) that the attacker may have by 9 may be received at input {229}.
The message enc((tag3,a[],hash(pkce_8),scope_12),k1_8) that the attacker may have by 10 may be received at input {233}.
The message aenc((tag5,n2_12,k2_8),pk(sskI_9)) that the attacker may have by 13 may be received at input {241}.
The message enc((tag7,code_12),k2_8) that the attacker may have by 15 may be received at input {248}.
So the message free_code[] may be sent on channel ch(code_12) at output {257}.
mess(ch(code_12),free_code[]).

32. By 30, the attacker may have the channel ch(code_12).
By 31, the message free_code[] may be sent on this channel.
So the attacker may obtain the message free_code[] by listening on this channel.
attacker(free_code[]).

33. By 32, attacker(free_code[]).
The goal is reached, represented in the following fact:
attacker(free_code[]).


A more detailed output of the traces is available with
  set traceDisplay = long.

new a: bitstring creating a_4 at {1}

new u: bitstring creating u_4 at {2}

new i: bitstring creating i_4 at {3}

out(c, ~M) with ~M = a_4 at {4}

out(c, ~M_1) with ~M_1 = u_4 at {5}

out(c, ~M_2) with ~M_2 = i_4 at {6}

new ska: SecretKey creating ska_2 at {7}

new sku: SecretKey creating sku_2 at {8}

new ski: SecretKey creating ski_2 at {9}

out(c, ~M_3) with ~M_3 = pk(ska_2) at {10}

out(c, ~M_4) with ~M_4 = pk(sku_2) at {11}

out(c, ~M_5) with ~M_5 = pk(ski_2) at {12}

new password: bitstring creating password_3 at {13}

in(c, a_5) at {22} in copy a_6

in(c, a_7) at {23} in copy a_6

in(c, a_8) at {165} in copy a_6

in(c, pk(a_9)) at {166} in copy a_6

in(c, ~M) with ~M = a_4 at {221} in copy a_10

in(c, ~M_2) with ~M_2 = i_4 at {222} in copy a_10

new n_4: bitstring creating n_12 at {225} in copy a_10

new sskI: SecretKey creating sskI_8 at {226} in copy a_10

out(c, ~M_6) with ~M_6 = aenc((tag1,n_12,pk(sskI_8)),pk(ska_2)) at {228} in copy a_10

in(c, ~M_6) with ~M_6 = aenc((tag1,n_12,pk(sskI_8)),pk(ska_2)) at {168} in copy a_6

new k1_3: SymmetricKey creating k1_8 at {171} in copy a_6

out(c, ~M_7) with ~M_7 = aenc((tag2,n_12,k1_8),pk(sskI_8)) at {173} in copy a_6

new pkce_3: bitstring creating pkce_8 at {174} in copy a_6

new scope_3: bitstring creating scope_12 at {175} in copy a_6

event appSendsLastMessageToBrowser(aenc((tag1,n_12,pk(sskI_8)),pk(ska_2)),aenc((tag2,n_12,k1_8),pk(sskI_8)),enc((tag3,a_4,hash(pkce_8),scope_12),k1_8)) at {177} in copy a_6

out(c, ~M_8) with ~M_8 = enc((tag3,a_4,hash(pkce_8),scope_12),k1_8) at {178} in copy a_6

in(c, ~M_7) with ~M_7 = aenc((tag2,n_12,k1_8),pk(sskI_8)) at {229} in copy a_10

in(c, ~M_8) with ~M_8 = enc((tag3,a_4,hash(pkce_8),scope_12),k1_8) at {233} in copy a_10

new n2_4: bitstring creating n2_12 at {237} in copy a_10

new sskI_1: SecretKey creating sskI_9 at {238} in copy a_10

out(c, ~M_9) with ~M_9 = aenc((tag4,n2_12,pk(sskI_9)),pk(ski_2)) at {240} in copy a_10

in(c, ~M) with ~M = a_4 at {382} in copy a_11

in(c, ~M_1) with ~M_1 = u_4 at {383} in copy a_11

in(c, ~M_9) with ~M_9 = aenc((tag4,n2_12,pk(sskI_9)),pk(ski_2)) at {386} in copy a_11

new k2_4: SymmetricKey creating k2_8 at {389} in copy a_11

out(c, ~M_10) with ~M_10 = aenc((tag5,n2_12,k2_8),pk(sskI_9)) at {391} in copy a_11

in(c, ~M_10) with ~M_10 = aenc((tag5,n2_12,k2_8),pk(sskI_9)) at {241} in copy a_10

event browserSendsLastMessageToIssuer(aenc((tag4,n2_12,pk(sskI_9)),pk(ski_2)),aenc((tag5,n2_12,k2_8),pk(sskI_9)),enc((tag6,a_4,hash(pkce_8),scope_12,u_4,password_3),k2_8)) at {246} in copy a_10

out(c, ~M_11) with ~M_11 = enc((tag6,a_4,hash(pkce_8),scope_12,u_4,password_3),k2_8) at {247} in copy a_10

in(c, ~M_11) with ~M_11 = enc((tag6,a_4,hash(pkce_8),scope_12,u_4,password_3),k2_8) at {392} in copy a_11

new code_8: bitstring creating code_12 at {398} in copy a_11

event issuerSendsLastMessageToBrowser(aenc((tag4,n2_12,pk(sskI_9)),pk(ski_2)),aenc((tag5,n2_12,k2_8),pk(sskI_9)),enc((tag6,a_4,hash(pkce_8),scope_12,u_4,password_3),k2_8),enc((tag7,code_12),k2_8)) at {400} in copy a_11

out(c, ~M_12) with ~M_12 = enc((tag7,code_12),k2_8) at {401} in copy a_11

in(c, ~M_12) with ~M_12 = enc((tag7,code_12),k2_8) at {248} in copy a_10

event browserSendsLastMessageToApp(aenc((tag1,n_12,pk(sskI_8)),pk(ska_2)),aenc((tag2,n_12,k1_8),pk(sskI_8)),enc((tag3,a_4,hash(pkce_8),scope_12),k1_8),enc((tag8,code_12),k1_8)) at {252} in copy a_10

out(c, ~M_13) with ~M_13 = enc((tag8,code_12),k1_8) at {253} in copy a_10

out(c, ~M_14) with ~M_14 = check_reach_browser at {255} in copy a_10

event browserCompletesProtocol(aenc((tag1,n_12,pk(sskI_8)),pk(ska_2)),aenc((tag2,n_12,k1_8),pk(sskI_8)),enc((tag3,a_4,hash(pkce_8),scope_12),k1_8),aenc((tag4,n2_12,pk(sskI_9)),pk(ski_2)),aenc((tag5,n2_12,k2_8),pk(sskI_9)),enc((tag6,a_4,hash(pkce_8),scope_12,u_4,password_3),k2_8),enc((tag7,code_12),k2_8)) at {256} in copy a_10

in(c, ~M_13) with ~M_13 = enc((tag8,code_12),k1_8) at {179} in copy a_6

new n2_3: bitstring creating n2_13 at {182} in copy a_6

new sskI2_3: SecretKey creating sskI2_4 at {183} in copy a_6

out(c, ~M_15) with ~M_15 = aenc((tag9,n2_13,pk(sskI2_4)),pk(a_9)) at {185} in copy a_6

in(c, aenc((tag10,2-proj-3-tuple(adec(~M_15,a_9)),a_12),3-proj-3-tuple(adec(~M_15,a_9)))) with aenc((tag10,2-proj-3-tuple(adec(~M_15,a_9)),a_12),3-proj-3-tuple(adec(~M_15,a_9))) = aenc((tag10,n2_13,a_12),pk(sskI2_4)) at {186} in copy a_6

new sks_3: SecretKey creating sks_4 at {190} in copy a_6

new jti_3: bitstring creating jti_8 at {191} in copy a_6

event appSendsLastMessageToIssuer(aenc((tag9,n2_13,pk(sskI2_4)),pk(a_9)),aenc((tag10,n2_13,a_12),pk(sskI2_4)),enc((tag11,pk(sks_4),sign((a_4,jti_8,code_12,pkce_8),sks_4)),a_12)) at {194} in copy a_6

out(c, ~M_16) with ~M_16 = enc((tag11,pk(sks_4),sign((a_4,jti_8,code_12,pkce_8),sks_4)),a_12) at {195} in copy a_6

out(ch(code_12), ~M_17) with ~M_17 = free_code at {257} in copy a_10

The attacker has the message ~M_17 = free_code.
A trace has been found.
RESULT not attacker(free_code[]) is false.
-- Query not attacker(free_password[]) in process 1.
Translating the process into Horn clauses...
Completing...
select attacker(pk(sk))/-5000
200 rules inserted. Base: 169 rules (45 with conclusion selected). Queue: 67 rules.
400 rules inserted. Base: 321 rules (89 with conclusion selected). Queue: 121 rules.
600 rules inserted. Base: 480 rules (111 with conclusion selected). Queue: 107 rules.
800 rules inserted. Base: 585 rules (135 with conclusion selected). Queue: 165 rules.
1000 rules inserted. Base: 665 rules (153 with conclusion selected). Queue: 207 rules.
1200 rules inserted. Base: 764 rules (169 with conclusion selected). Queue: 217 rules.
1400 rules inserted. Base: 829 rules (183 with conclusion selected). Queue: 229 rules.
1600 rules inserted. Base: 902 rules (196 with conclusion selected). Queue: 210 rules.
1800 rules inserted. Base: 995 rules (215 with conclusion selected). Queue: 156 rules.
2000 rules inserted. Base: 1102 rules (245 with conclusion selected). Queue: 161 rules.
2200 rules inserted. Base: 1208 rules (273 with conclusion selected). Queue: 233 rules.
2400 rules inserted. Base: 1260 rules (290 with conclusion selected). Queue: 277 rules.
2600 rules inserted. Base: 1357 rules (302 with conclusion selected). Queue: 282 rules.
2800 rules inserted. Base: 1454 rules (316 with conclusion selected). Queue: 363 rules.
3000 rules inserted. Base: 1535 rules (338 with conclusion selected). Queue: 457 rules.
3200 rules inserted. Base: 1605 rules (349 with conclusion selected). Queue: 442 rules.
3400 rules inserted. Base: 1679 rules (359 with conclusion selected). Queue: 477 rules.
3600 rules inserted. Base: 1796 rules (373 with conclusion selected). Queue: 453 rules.
3800 rules inserted. Base: 1876 rules (383 with conclusion selected). Queue: 421 rules.
4000 rules inserted. Base: 1955 rules (393 with conclusion selected). Queue: 371 rules.
4200 rules inserted. Base: 1995 rules (416 with conclusion selected). Queue: 371 rules.
4400 rules inserted. Base: 2105 rules (438 with conclusion selected). Queue: 320 rules.
4600 rules inserted. Base: 2170 rules (477 with conclusion selected). Queue: 372 rules.
4800 rules inserted. Base: 2275 rules (535 with conclusion selected). Queue: 401 rules.
5000 rules inserted. Base: 2366 rules (542 with conclusion selected). Queue: 420 rules.
5200 rules inserted. Base: 2487 rules (571 with conclusion selected). Queue: 415 rules.
5400 rules inserted. Base: 2526 rules (583 with conclusion selected). Queue: 409 rules.
5600 rules inserted. Base: 2612 rules (596 with conclusion selected). Queue: 431 rules.
5800 rules inserted. Base: 2708 rules (615 with conclusion selected). Queue: 394 rules.
6000 rules inserted. Base: 2788 rules (628 with conclusion selected). Queue: 431 rules.
6200 rules inserted. Base: 2862 rules (659 with conclusion selected). Queue: 428 rules.
6400 rules inserted. Base: 2933 rules (674 with conclusion selected). Queue: 443 rules.
6600 rules inserted. Base: 3034 rules (701 with conclusion selected). Queue: 442 rules.
6800 rules inserted. Base: 3110 rules (719 with conclusion selected). Queue: 482 rules.
7000 rules inserted. Base: 3211 rules (752 with conclusion selected). Queue: 498 rules.
7200 rules inserted. Base: 3301 rules (763 with conclusion selected). Queue: 506 rules.
7400 rules inserted. Base: 3401 rules (788 with conclusion selected). Queue: 532 rules.
7600 rules inserted. Base: 3524 rules (809 with conclusion selected). Queue: 467 rules.
7800 rules inserted. Base: 3605 rules (824 with conclusion selected). Queue: 453 rules.
8000 rules inserted. Base: 3713 rules (843 with conclusion selected). Queue: 413 rules.
8200 rules inserted. Base: 3833 rules (863 with conclusion selected). Queue: 364 rules.
8400 rules inserted. Base: 3966 rules (882 with conclusion selected). Queue: 301 rules.
8600 rules inserted. Base: 4071 rules (894 with conclusion selected). Queue: 261 rules.
8800 rules inserted. Base: 4168 rules (910 with conclusion selected). Queue: 229 rules.
9000 rules inserted. Base: 4271 rules (929 with conclusion selected). Queue: 175 rules.
9200 rules inserted. Base: 4331 rules (948 with conclusion selected). Queue: 160 rules.
9400 rules inserted. Base: 4416 rules (990 with conclusion selected). Queue: 121 rules.
9600 rules inserted. Base: 4502 rules (1013 with conclusion selected). Queue: 156 rules.
9800 rules inserted. Base: 4619 rules (1038 with conclusion selected). Queue: 144 rules.
10000 rules inserted. Base: 4705 rules (1039 with conclusion selected). Queue: 99 rules.
10200 rules inserted. Base: 4824 rules (1047 with conclusion selected). Queue: 22 rules.
Starting query not attacker(free_password[])
RESULT not attacker(free_password[]) is true.
-- Query inj-event(appCompletesProtocol(m_96,m_97,m_98,m_99,m_100,m_101,m_102,m_103)) ==> inj-event(browserSendsLastMessageToApp(m_96,m_97,m_98,m_99)) && inj-event(issuerSendsLastMessageToApp(m_100,m_101,m_102,m_103)) in process 1.
Translating the process into Horn clauses...
Completing...
select attacker(pk(sk))/-5000
200 rules inserted. Base: 171 rules (45 with conclusion selected). Queue: 68 rules.
400 rules inserted. Base: 321 rules (89 with conclusion selected). Queue: 124 rules.
600 rules inserted. Base: 484 rules (111 with conclusion selected). Queue: 121 rules.
800 rules inserted. Base: 583 rules (134 with conclusion selected). Queue: 188 rules.
1000 rules inserted. Base: 672 rules (150 with conclusion selected). Queue: 215 rules.
1200 rules inserted. Base: 772 rules (164 with conclusion selected). Queue: 232 rules.
1400 rules inserted. Base: 826 rules (176 with conclusion selected). Queue: 224 rules.
1600 rules inserted. Base: 900 rules (194 with conclusion selected). Queue: 228 rules.
1800 rules inserted. Base: 993 rules (209 with conclusion selected). Queue: 183 rules.
2000 rules inserted. Base: 1129 rules (241 with conclusion selected). Queue: 178 rules.
2200 rules inserted. Base: 1221 rules (266 with conclusion selected). Queue: 197 rules.
2400 rules inserted. Base: 1313 rules (285 with conclusion selected). Queue: 265 rules.
2600 rules inserted. Base: 1362 rules (294 with conclusion selected). Queue: 300 rules.
2800 rules inserted. Base: 1487 rules (312 with conclusion selected). Queue: 329 rules.
3000 rules inserted. Base: 1571 rules (329 with conclusion selected). Queue: 376 rules.
3200 rules inserted. Base: 1613 rules (343 with conclusion selected). Queue: 437 rules.
3400 rules inserted. Base: 1702 rules (355 with conclusion selected). Queue: 454 rules.
3600 rules inserted. Base: 1785 rules (365 with conclusion selected). Queue: 470 rules.
3800 rules inserted. Base: 1875 rules (378 with conclusion selected). Queue: 462 rules.
4000 rules inserted. Base: 1956 rules (385 with conclusion selected). Queue: 399 rules.
4200 rules inserted. Base: 2018 rules (410 with conclusion selected). Queue: 402 rules.
4400 rules inserted. Base: 2132 rules (426 with conclusion selected). Queue: 343 rules.
4600 rules inserted. Base: 2222 rules (467 with conclusion selected). Queue: 364 rules.
4800 rules inserted. Base: 2307 rules (501 with conclusion selected). Queue: 371 rules.
5000 rules inserted. Base: 2409 rules (541 with conclusion selected). Queue: 422 rules.
5200 rules inserted. Base: 2506 rules (573 with conclusion selected). Queue: 443 rules.
5400 rules inserted. Base: 2589 rules (578 with conclusion selected). Queue: 426 rules.
5600 rules inserted. Base: 2633 rules (601 with conclusion selected). Queue: 449 rules.
5800 rules inserted. Base: 2693 rules (606 with conclusion selected). Queue: 464 rules.
6000 rules inserted. Base: 2780 rules (629 with conclusion selected). Queue: 422 rules.
6200 rules inserted. Base: 2850 rules (641 with conclusion selected). Queue: 472 rules.
6400 rules inserted. Base: 2921 rules (670 with conclusion selected). Queue: 471 rules.
6600 rules inserted. Base: 2980 rules (683 with conclusion selected). Queue: 488 rules.
6800 rules inserted. Base: 3078 rules (711 with conclusion selected). Queue: 484 rules.
7000 rules inserted. Base: 3148 rules (726 with conclusion selected). Queue: 520 rules.
7200 rules inserted. Base: 3251 rules (754 with conclusion selected). Queue: 518 rules.
7400 rules inserted. Base: 3331 rules (773 with conclusion selected). Queue: 534 rules.
7600 rules inserted. Base: 3436 rules (786 with conclusion selected). Queue: 523 rules.
7800 rules inserted. Base: 3547 rules (812 with conclusion selected). Queue: 525 rules.
8000 rules inserted. Base: 3634 rules (821 with conclusion selected). Queue: 479 rules.
8200 rules inserted. Base: 3733 rules (846 with conclusion selected). Queue: 492 rules.
8400 rules inserted. Base: 3843 rules (865 with conclusion selected). Queue: 454 rules.
8600 rules inserted. Base: 3961 rules (881 with conclusion selected). Queue: 404 rules.
8800 rules inserted. Base: 4081 rules (896 with conclusion selected). Queue: 328 rules.
9000 rules inserted. Base: 4190 rules (908 with conclusion selected). Queue: 273 rules.
9200 rules inserted. Base: 4290 rules (923 with conclusion selected). Queue: 247 rules.
9400 rules inserted. Base: 4404 rules (946 with conclusion selected). Queue: 194 rules.
9600 rules inserted. Base: 4476 rules (972 with conclusion selected). Queue: 182 rules.
9800 rules inserted. Base: 4573 rules (1006 with conclusion selected). Queue: 125 rules.
10000 rules inserted. Base: 4669 rules (1042 with conclusion selected). Queue: 159 rules.
10200 rules inserted. Base: 4767 rules (1060 with conclusion selected). Queue: 149 rules.
10400 rules inserted. Base: 4868 rules (1075 with conclusion selected). Queue: 168 rules.
10600 rules inserted. Base: 4968 rules (1077 with conclusion selected). Queue: 141 rules.
10800 rules inserted. Base: 5082 rules (1081 with conclusion selected). Queue: 77 rules.
Starting query inj-event(appCompletesProtocol(m_96,m_97,m_98,m_99,m_100,m_101,m_102,m_103)) ==> inj-event(browserSendsLastMessageToApp(m_96,m_97,m_98,m_99)) && inj-event(issuerSendsLastMessageToApp(m_100,m_101,m_102,m_103))
goal reachable: begin(issuerSendsLastMessageToApp(aenc((tag9,n2_12,pk(sskI2_4)),pk(ski[])),aenc((tag10,n2_12,k3_8),pk(sskI2_4)),enc((tag11,pk(sks_4),sign((a[],jti_8,code_12,pkce_8),sks_4)),k3_8),enc((tag12,sign((hash_pk(pk(sks_4)),jti_8,scope_12,a[],i[],u[]),ski[])),k3_8)),@occ418_1) && begin(browserSendsLastMessageToApp(aenc((tag1,n_12,pk(sskI_8)),pk(ska[])),aenc((tag2,n_12,k1_8),pk(sskI_8)),enc((tag3,a[],hash(pkce_8),scope_12),k1_8),enc((tag8,code_12),k1_8)),@occ252_1) -> end(@occ68_1,appCompletesProtocol(aenc((tag1,n_12,pk(sskI_8)),pk(ska[])),aenc((tag2,n_12,k1_8),pk(sskI_8)),enc((tag3,a[],hash(pkce_8),scope_12),k1_8),enc((tag8,code_12),k1_8),aenc((tag9,n2_12,pk(sskI2_4)),pk(ski[])),aenc((tag10,n2_12,k3_8),pk(sskI2_4)),enc((tag11,pk(sks_4),sign((a[],jti_8,code_12,pkce_8),sks_4)),k3_8),enc((tag12,sign((hash_pk(pk(sks_4)),jti_8,scope_12,a[],i[],u[]),ski[])),k3_8)))
The 1st, 2nd hypotheses occur strictly before the conclusion.
Abbreviations:
n_12 = n_4[e2_1 = i[],e1_1 = a[],!1 = @sid]
sskI_8 = sskI[e2_1 = i[],e1_1 = a[],!1 = @sid]
pkce_8 = pkce[m_1 = aenc((tag1,n_12,pk(sskI_8)),pk(ska[])),e2 = i[],e1 = u[],!1 = @sid_1]
scope_12 = scope[m_1 = aenc((tag1,n_12,pk(sskI_8)),pk(ska[])),e2 = i[],e1 = u[],!1 = @sid_1]
k1_8 = k1[m_1 = aenc((tag1,n_12,pk(sskI_8)),pk(ska[])),e2 = i[],e1 = u[],!1 = @sid_1]
n2_13 = n2_4[m_34 = enc((tag3,a[],hash(pkce_8),scope_12),k1_8),m_33 = aenc((tag2,n_12,k1_8),pk(sskI_8)),e2_1 = i[],e1_1 = a[],!1 = @sid]
sskI_9 = sskI_1[m_34 = enc((tag3,a[],hash(pkce_8),scope_12),k1_8),m_33 = aenc((tag2,n_12,k1_8),pk(sskI_8)),e2_1 = i[],e1_1 = a[],!1 = @sid]
k2_8 = k2_4[m_64 = aenc((tag4,n2_13,pk(sskI_9)),pk(ski[])),e2_2 = u[],e1_2 = a[],!1 = @sid_2]
code_12 = code_8[m_66 = enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8),m_64 = aenc((tag4,n2_13,pk(sskI_9)),pk(ski[])),e2_2 = u[],e1_2 = a[],!1 = @sid_2]
n2_12 = n2[m_8 = enc((tag8,code_12),k1_8),m_1 = aenc((tag1,n_12,pk(sskI_8)),pk(ska[])),e2 = i[],e1 = u[],!1 = @sid_1]
sskI2_4 = sskI2[m_8 = enc((tag8,code_12),k1_8),m_1 = aenc((tag1,n_12,pk(sskI_8)),pk(ska[])),e2 = i[],e1 = u[],!1 = @sid_1]
k3_8 = k3_4[m_68 = aenc((tag9,n2_12,pk(sskI2_4)),pk(ski[])),m_66 = enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8),m_64 = aenc((tag4,n2_13,pk(sskI_9)),pk(ski[])),e2_2 = u[],e1_2 = a[],!1 = @sid_2]
sks_4 = sks[m_10 = aenc((tag10,n2_12,k3_8),pk(sskI2_4)),m_8 = enc((tag8,code_12),k1_8),m_1 = aenc((tag1,n_12,pk(sskI_8)),pk(ska[])),e2 = i[],e1 = u[],!1 = @sid_1]
jti_8 = jti[m_10 = aenc((tag10,n2_12,k3_8),pk(sskI2_4)),m_8 = enc((tag8,code_12),k1_8),m_1 = aenc((tag1,n_12,pk(sskI_8)),pk(ska[])),e2 = i[],e1 = u[],!1 = @sid_1]
@occ68_1 = @occ68[m_12 = enc((tag12,sign((hash_pk(pk(sks_4)),jti_8,scope_12,a[],i[],u[]),ski[])),k3_8),m_10 = aenc((tag10,n2_12,k3_8),pk(sskI2_4)),m_8 = enc((tag8,code_12),k1_8),m_1 = aenc((tag1,n_12,pk(sskI_8)),pk(ska[])),e2 = i[],e1 = u[],!1 = @sid_1]
@occ418_1 = @occ418[m_70 = enc((tag11,pk(sks_4),sign((a[],jti_8,code_12,pkce_8),sks_4)),k3_8),m_68 = aenc((tag9,n2_12,pk(sskI2_4)),pk(ski[])),m_66 = enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8),m_64 = aenc((tag4,n2_13,pk(sskI_9)),pk(ski[])),e2_2 = u[],e1_2 = a[],!1 = @sid_2]
@occ252_1 = @occ252[m_38 = enc((tag7,code_12),k2_8),m_36 = aenc((tag5,n2_13,k2_8),pk(sskI_9)),m_34 = enc((tag3,a[],hash(pkce_8),scope_12),k1_8),m_33 = aenc((tag2,n_12,k1_8),pk(sskI_8)),e2_1 = i[],e1_1 = a[],!1 = @sid]
RESULT inj-event(appCompletesProtocol(m_96,m_97,m_98,m_99,m_100,m_101,m_102,m_103)) ==> inj-event(browserSendsLastMessageToApp(m_96,m_97,m_98,m_99)) && inj-event(issuerSendsLastMessageToApp(m_100,m_101,m_102,m_103)) is true.
-- Query inj-event(browserCompletesProtocol(m_96,m_97,m_98,m_99,m_100,m_101,m_102)) ==> inj-event(appSendsLastMessageToBrowser(m_96,m_97,m_98)) && inj-event(issuerSendsLastMessageToBrowser(m_99,m_100,m_101,m_102)) in process 1.
Translating the process into Horn clauses...
Completing...
select attacker(pk(sk))/-5000
200 rules inserted. Base: 171 rules (45 with conclusion selected). Queue: 68 rules.
400 rules inserted. Base: 321 rules (89 with conclusion selected). Queue: 126 rules.
600 rules inserted. Base: 486 rules (111 with conclusion selected). Queue: 113 rules.
800 rules inserted. Base: 590 rules (134 with conclusion selected). Queue: 171 rules.
1000 rules inserted. Base: 673 rules (151 with conclusion selected). Queue: 211 rules.
1200 rules inserted. Base: 777 rules (166 with conclusion selected). Queue: 234 rules.
1400 rules inserted. Base: 834 rules (179 with conclusion selected). Queue: 251 rules.
1600 rules inserted. Base: 907 rules (195 with conclusion selected). Queue: 262 rules.
1800 rules inserted. Base: 990 rules (205 with conclusion selected). Queue: 202 rules.
2000 rules inserted. Base: 1125 rules (231 with conclusion selected). Queue: 196 rules.
2200 rules inserted. Base: 1216 rules (258 with conclusion selected). Queue: 208 rules.
2400 rules inserted. Base: 1303 rules (276 with conclusion selected). Queue: 257 rules.
2600 rules inserted. Base: 1357 rules (296 with conclusion selected). Queue: 295 rules.
2800 rules inserted. Base: 1456 rules (309 with conclusion selected). Queue: 308 rules.
3000 rules inserted. Base: 1552 rules (325 with conclusion selected). Queue: 402 rules.
3200 rules inserted. Base: 1641 rules (348 with conclusion selected). Queue: 474 rules.
3400 rules inserted. Base: 1694 rules (356 with conclusion selected). Queue: 474 rules.
3600 rules inserted. Base: 1762 rules (367 with conclusion selected). Queue: 516 rules.
3800 rules inserted. Base: 1842 rules (375 with conclusion selected). Queue: 549 rules.
4000 rules inserted. Base: 1917 rules (389 with conclusion selected). Queue: 556 rules.
4200 rules inserted. Base: 2018 rules (401 with conclusion selected). Queue: 515 rules.
4400 rules inserted. Base: 2088 rules (409 with conclusion selected). Queue: 471 rules.
4600 rules inserted. Base: 2153 rules (437 with conclusion selected). Queue: 486 rules.
4800 rules inserted. Base: 2275 rules (452 with conclusion selected). Queue: 452 rules.
5000 rules inserted. Base: 2348 rules (491 with conclusion selected). Queue: 519 rules.
5200 rules inserted. Base: 2411 rules (504 with conclusion selected). Queue: 559 rules.
5400 rules inserted. Base: 2512 rules (559 with conclusion selected). Queue: 617 rules.
5600 rules inserted. Base: 2596 rules (575 with conclusion selected). Queue: 673 rules.
5800 rules inserted. Base: 2679 rules (584 with conclusion selected). Queue: 705 rules.
6000 rules inserted. Base: 2808 rules (623 with conclusion selected). Queue: 694 rules.
6200 rules inserted. Base: 2870 rules (627 with conclusion selected). Queue: 707 rules.
6400 rules inserted. Base: 2900 rules (639 with conclusion selected). Queue: 693 rules.
6600 rules inserted. Base: 2959 rules (667 with conclusion selected). Queue: 693 rules.
6800 rules inserted. Base: 2984 rules (668 with conclusion selected). Queue: 722 rules.
7000 rules inserted. Base: 3064 rules (684 with conclusion selected). Queue: 689 rules.
7200 rules inserted. Base: 3140 rules (696 with conclusion selected). Queue: 659 rules.
7400 rules inserted. Base: 3207 rules (712 with conclusion selected). Queue: 695 rules.
7600 rules inserted. Base: 3266 rules (740 with conclusion selected). Queue: 715 rules.
7800 rules inserted. Base: 3324 rules (775 with conclusion selected). Queue: 661 rules.
8000 rules inserted. Base: 3401 rules (800 with conclusion selected). Queue: 694 rules.
8200 rules inserted. Base: 3428 rules (819 with conclusion selected). Queue: 669 rules.
8400 rules inserted. Base: 3531 rules (849 with conclusion selected). Queue: 656 rules.
8600 rules inserted. Base: 3630 rules (877 with conclusion selected). Queue: 692 rules.
8800 rules inserted. Base: 3707 rules (907 with conclusion selected). Queue: 644 rules.
9000 rules inserted. Base: 3796 rules (939 with conclusion selected). Queue: 640 rules.
9200 rules inserted. Base: 3868 rules (967 with conclusion selected). Queue: 657 rules.
9400 rules inserted. Base: 3999 rules (991 with conclusion selected). Queue: 648 rules.
9600 rules inserted. Base: 4069 rules (1023 with conclusion selected). Queue: 657 rules.
9800 rules inserted. Base: 4201 rules (1050 with conclusion selected). Queue: 588 rules.
10000 rules inserted. Base: 4274 rules (1066 with conclusion selected). Queue: 557 rules.
10200 rules inserted. Base: 4376 rules (1098 with conclusion selected). Queue: 519 rules.
10400 rules inserted. Base: 4464 rules (1115 with conclusion selected). Queue: 496 rules.
10600 rules inserted. Base: 4605 rules (1139 with conclusion selected). Queue: 449 rules.
10800 rules inserted. Base: 4721 rules (1160 with conclusion selected). Queue: 378 rules.
11000 rules inserted. Base: 4832 rules (1169 with conclusion selected). Queue: 372 rules.
11200 rules inserted. Base: 4947 rules (1198 with conclusion selected). Queue: 309 rules.
11400 rules inserted. Base: 5004 rules (1202 with conclusion selected). Queue: 322 rules.
11600 rules inserted. Base: 5112 rules (1227 with conclusion selected). Queue: 282 rules.
11800 rules inserted. Base: 5145 rules (1239 with conclusion selected). Queue: 293 rules.
12000 rules inserted. Base: 5205 rules (1250 with conclusion selected). Queue: 275 rules.
12200 rules inserted. Base: 5300 rules (1304 with conclusion selected). Queue: 199 rules.
12400 rules inserted. Base: 5386 rules (1338 with conclusion selected). Queue: 197 rules.
12600 rules inserted. Base: 5470 rules (1363 with conclusion selected). Queue: 203 rules.
12800 rules inserted. Base: 5561 rules (1390 with conclusion selected). Queue: 189 rules.
13000 rules inserted. Base: 5687 rules (1410 with conclusion selected). Queue: 154 rules.
13200 rules inserted. Base: 5779 rules (1412 with conclusion selected). Queue: 122 rules.
13400 rules inserted. Base: 5885 rules (1422 with conclusion selected). Queue: 60 rules.
Starting query inj-event(browserCompletesProtocol(m_96,m_97,m_98,m_99,m_100,m_101,m_102)) ==> inj-event(appSendsLastMessageToBrowser(m_96,m_97,m_98)) && inj-event(issuerSendsLastMessageToBrowser(m_99,m_100,m_101,m_102))
goal reachable: e2_3 Ôëá i[] && e1_3 Ôëá u[] && begin(issuerSendsLastMessageToBrowser(aenc((tag4,n2_12,pk(sskI_8)),pk(ski[])),aenc((tag5,n2_12,k2_8),pk(sskI_8)),enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8),enc((tag7,code_12),k2_8)),@occ400_1) && begin(appSendsLastMessageToBrowser(aenc((tag1,n_12,pk(sskI_9)),pk(ska[])),aenc((tag2,n_12,k1_8),pk(sskI_9)),enc((tag3,a[],hash(pkce_8),scope_12),k1_8)),@occ177_1) && attacker(pke2_6) && attacker(pke1_6) && attacker(e2_3) && attacker(e1_3) -> end(@occ256_1,browserCompletesProtocol(aenc((tag1,n_12,pk(sskI_9)),pk(ska[])),aenc((tag2,n_12,k1_8),pk(sskI_9)),enc((tag3,a[],hash(pkce_8),scope_12),k1_8),aenc((tag4,n2_12,pk(sskI_8)),pk(ski[])),aenc((tag5,n2_12,k2_8),pk(sskI_8)),enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8),enc((tag7,code_12),k2_8)))
The 1st, 2nd hypotheses occur strictly before the conclusion.
The 3rd, 4th, 5th, 6th hypotheses occur before the conclusion.
Abbreviations:
n_12 = n_4[e2_1 = i[],e1_1 = a[],!1 = @sid]
sskI_9 = sskI[e2_1 = i[],e1_1 = a[],!1 = @sid]
pkce_8 = pkce_3[m_24 = aenc((tag1,n_12,pk(sskI_9)),pk(ska[])),pke2_1 = pke2_6,pke1_1 = pke1_6,e2 = e2_3,e1 = e1_3,!1 = @sid_1]
scope_12 = scope_3[m_24 = aenc((tag1,n_12,pk(sskI_9)),pk(ska[])),pke2_1 = pke2_6,pke1_1 = pke1_6,e2 = e2_3,e1 = e1_3,!1 = @sid_1]
k1_8 = k1_3[m_24 = aenc((tag1,n_12,pk(sskI_9)),pk(ska[])),pke2_1 = pke2_6,pke1_1 = pke1_6,e2 = e2_3,e1 = e1_3,!1 = @sid_1]
n2_12 = n2_4[m_34 = enc((tag3,a[],hash(pkce_8),scope_12),k1_8),m_33 = aenc((tag2,n_12,k1_8),pk(sskI_9)),e2_1 = i[],e1_1 = a[],!1 = @sid]
sskI_8 = sskI_1[m_34 = enc((tag3,a[],hash(pkce_8),scope_12),k1_8),m_33 = aenc((tag2,n_12,k1_8),pk(sskI_9)),e2_1 = i[],e1_1 = a[],!1 = @sid]
k2_8 = k2_4[m_64 = aenc((tag4,n2_12,pk(sskI_8)),pk(ski[])),e2_2 = u[],e1_2 = a[],!1 = @sid_2]
code_12 = code_8[m_66 = enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8),m_64 = aenc((tag4,n2_12,pk(sskI_8)),pk(ski[])),e2_2 = u[],e1_2 = a[],!1 = @sid_2]
@occ256_1 = @occ256[m_38 = enc((tag7,code_12),k2_8),m_36 = aenc((tag5,n2_12,k2_8),pk(sskI_8)),m_34 = enc((tag3,a[],hash(pkce_8),scope_12),k1_8),m_33 = aenc((tag2,n_12,k1_8),pk(sskI_9)),e2_1 = i[],e1_1 = a[],!1 = @sid]
@occ400_1 = @occ400[m_66 = enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8),m_64 = aenc((tag4,n2_12,pk(sskI_8)),pk(ski[])),e2_2 = u[],e1_2 = a[],!1 = @sid_2]
@occ177_1 = @occ177[m_24 = aenc((tag1,n_12,pk(sskI_9)),pk(ska[])),pke2_1 = pke2_6,pke1_1 = pke1_6,e2 = e2_3,e1 = e1_3,!1 = @sid_1]
goal reachable: e2_3 Ôëá i[] && begin(issuerSendsLastMessageToBrowser(aenc((tag4,n2_12,pk(sskI_8)),pk(ski[])),aenc((tag5,n2_12,k2_8),pk(sskI_8)),enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8),enc((tag7,code_12),k2_8)),@occ400_1) && begin(appSendsLastMessageToBrowser(aenc((tag1,n_12,pk(sskI_9)),pk(ska[])),aenc((tag2,n_12,k1_8),pk(sskI_9)),enc((tag3,a[],hash(pkce_8),scope_12),k1_8)),@occ129_1) && attacker(pke2_6) && attacker(e2_3) -> end(@occ256_1,browserCompletesProtocol(aenc((tag1,n_12,pk(sskI_9)),pk(ska[])),aenc((tag2,n_12,k1_8),pk(sskI_9)),enc((tag3,a[],hash(pkce_8),scope_12),k1_8),aenc((tag4,n2_12,pk(sskI_8)),pk(ski[])),aenc((tag5,n2_12,k2_8),pk(sskI_8)),enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8),enc((tag7,code_12),k2_8)))
The 1st, 2nd hypotheses occur strictly before the conclusion.
The 3rd, 4th hypotheses occur before the conclusion.
Abbreviations:
n_12 = n_4[e2_1 = i[],e1_1 = a[],!1 = @sid]
sskI_9 = sskI[e2_1 = i[],e1_1 = a[],!1 = @sid]
pkce_8 = pkce_2[m_16 = aenc((tag1,n_12,pk(sskI_9)),pk(ska[])),pke2 = pke2_6,e2 = e2_3,e1 = u[],!1 = @sid_1]
scope_12 = scope_2[m_16 = aenc((tag1,n_12,pk(sskI_9)),pk(ska[])),pke2 = pke2_6,e2 = e2_3,e1 = u[],!1 = @sid_1]
k1_8 = k1_2[m_16 = aenc((tag1,n_12,pk(sskI_9)),pk(ska[])),pke2 = pke2_6,e2 = e2_3,e1 = u[],!1 = @sid_1]
n2_12 = n2_4[m_34 = enc((tag3,a[],hash(pkce_8),scope_12),k1_8),m_33 = aenc((tag2,n_12,k1_8),pk(sskI_9)),e2_1 = i[],e1_1 = a[],!1 = @sid]
sskI_8 = sskI_1[m_34 = enc((tag3,a[],hash(pkce_8),scope_12),k1_8),m_33 = aenc((tag2,n_12,k1_8),pk(sskI_9)),e2_1 = i[],e1_1 = a[],!1 = @sid]
k2_8 = k2_4[m_64 = aenc((tag4,n2_12,pk(sskI_8)),pk(ski[])),e2_2 = u[],e1_2 = a[],!1 = @sid_2]
code_12 = code_8[m_66 = enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8),m_64 = aenc((tag4,n2_12,pk(sskI_8)),pk(ski[])),e2_2 = u[],e1_2 = a[],!1 = @sid_2]
@occ256_1 = @occ256[m_38 = enc((tag7,code_12),k2_8),m_36 = aenc((tag5,n2_12,k2_8),pk(sskI_8)),m_34 = enc((tag3,a[],hash(pkce_8),scope_12),k1_8),m_33 = aenc((tag2,n_12,k1_8),pk(sskI_9)),e2_1 = i[],e1_1 = a[],!1 = @sid]
@occ400_1 = @occ400[m_66 = enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8),m_64 = aenc((tag4,n2_12,pk(sskI_8)),pk(ski[])),e2_2 = u[],e1_2 = a[],!1 = @sid_2]
@occ129_1 = @occ129[m_16 = aenc((tag1,n_12,pk(sskI_9)),pk(ska[])),pke2 = pke2_6,e2 = e2_3,e1 = u[],!1 = @sid_1]
goal reachable: e1_3 Ôëá u[] && begin(issuerSendsLastMessageToBrowser(aenc((tag4,n2_12,pk(sskI_8)),pk(ski[])),aenc((tag5,n2_12,k2_8),pk(sskI_8)),enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8),enc((tag7,code_12),k2_8)),@occ400_1) && begin(appSendsLastMessageToBrowser(aenc((tag1,n_12,pk(sskI_9)),pk(ska[])),aenc((tag2,n_12,k1_8),pk(sskI_9)),enc((tag3,a[],hash(pkce_8),scope_12),k1_8)),@occ82_1) && attacker(pke1_6) && attacker(e1_3) -> end(@occ256_1,browserCompletesProtocol(aenc((tag1,n_12,pk(sskI_9)),pk(ska[])),aenc((tag2,n_12,k1_8),pk(sskI_9)),enc((tag3,a[],hash(pkce_8),scope_12),k1_8),aenc((tag4,n2_12,pk(sskI_8)),pk(ski[])),aenc((tag5,n2_12,k2_8),pk(sskI_8)),enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8),enc((tag7,code_12),k2_8)))
The 1st, 2nd hypotheses occur strictly before the conclusion.
The 3rd, 4th hypotheses occur before the conclusion.
Abbreviations:
n_12 = n_4[e2_1 = i[],e1_1 = a[],!1 = @sid]
sskI_9 = sskI[e2_1 = i[],e1_1 = a[],!1 = @sid]
pkce_8 = pkce_1[m = aenc((tag1,n_12,pk(sskI_9)),pk(ska[])),pke1 = pke1_6,e2 = i[],e1 = e1_3,!1 = @sid_1]
scope_12 = scope_1[m = aenc((tag1,n_12,pk(sskI_9)),pk(ska[])),pke1 = pke1_6,e2 = i[],e1 = e1_3,!1 = @sid_1]
k1_8 = k1_1[m = aenc((tag1,n_12,pk(sskI_9)),pk(ska[])),pke1 = pke1_6,e2 = i[],e1 = e1_3,!1 = @sid_1]
n2_12 = n2_4[m_34 = enc((tag3,a[],hash(pkce_8),scope_12),k1_8),m_33 = aenc((tag2,n_12,k1_8),pk(sskI_9)),e2_1 = i[],e1_1 = a[],!1 = @sid]
sskI_8 = sskI_1[m_34 = enc((tag3,a[],hash(pkce_8),scope_12),k1_8),m_33 = aenc((tag2,n_12,k1_8),pk(sskI_9)),e2_1 = i[],e1_1 = a[],!1 = @sid]
k2_8 = k2_4[m_64 = aenc((tag4,n2_12,pk(sskI_8)),pk(ski[])),e2_2 = u[],e1_2 = a[],!1 = @sid_2]
code_12 = code_8[m_66 = enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8),m_64 = aenc((tag4,n2_12,pk(sskI_8)),pk(ski[])),e2_2 = u[],e1_2 = a[],!1 = @sid_2]
@occ256_1 = @occ256[m_38 = enc((tag7,code_12),k2_8),m_36 = aenc((tag5,n2_12,k2_8),pk(sskI_8)),m_34 = enc((tag3,a[],hash(pkce_8),scope_12),k1_8),m_33 = aenc((tag2,n_12,k1_8),pk(sskI_9)),e2_1 = i[],e1_1 = a[],!1 = @sid]
@occ400_1 = @occ400[m_66 = enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8),m_64 = aenc((tag4,n2_12,pk(sskI_8)),pk(ski[])),e2_2 = u[],e1_2 = a[],!1 = @sid_2]
@occ82_1 = @occ82[m = aenc((tag1,n_12,pk(sskI_9)),pk(ska[])),pke1 = pke1_6,e2 = i[],e1 = e1_3,!1 = @sid_1]
goal reachable: begin(issuerSendsLastMessageToBrowser(aenc((tag4,n2_12,pk(sskI_8)),pk(ski[])),aenc((tag5,n2_12,k2_8),pk(sskI_8)),enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8),enc((tag7,code_12),k2_8)),@occ400_1) && begin(appSendsLastMessageToBrowser(aenc((tag1,n_12,pk(sskI_9)),pk(ska[])),aenc((tag2,n_12,k1_8),pk(sskI_9)),enc((tag3,a[],hash(pkce_8),scope_12),k1_8)),@occ35_1) -> end(@occ256_1,browserCompletesProtocol(aenc((tag1,n_12,pk(sskI_9)),pk(ska[])),aenc((tag2,n_12,k1_8),pk(sskI_9)),enc((tag3,a[],hash(pkce_8),scope_12),k1_8),aenc((tag4,n2_12,pk(sskI_8)),pk(ski[])),aenc((tag5,n2_12,k2_8),pk(sskI_8)),enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8),enc((tag7,code_12),k2_8)))
The 1st, 2nd hypotheses occur strictly before the conclusion.
Abbreviations:
n_12 = n_4[e2_1 = i[],e1_1 = a[],!1 = @sid]
sskI_9 = sskI[e2_1 = i[],e1_1 = a[],!1 = @sid]
pkce_8 = pkce[m_1 = aenc((tag1,n_12,pk(sskI_9)),pk(ska[])),e2 = i[],e1 = u[],!1 = @sid_1]
scope_12 = scope[m_1 = aenc((tag1,n_12,pk(sskI_9)),pk(ska[])),e2 = i[],e1 = u[],!1 = @sid_1]
k1_8 = k1[m_1 = aenc((tag1,n_12,pk(sskI_9)),pk(ska[])),e2 = i[],e1 = u[],!1 = @sid_1]
n2_12 = n2_4[m_34 = enc((tag3,a[],hash(pkce_8),scope_12),k1_8),m_33 = aenc((tag2,n_12,k1_8),pk(sskI_9)),e2_1 = i[],e1_1 = a[],!1 = @sid]
sskI_8 = sskI_1[m_34 = enc((tag3,a[],hash(pkce_8),scope_12),k1_8),m_33 = aenc((tag2,n_12,k1_8),pk(sskI_9)),e2_1 = i[],e1_1 = a[],!1 = @sid]
k2_8 = k2_4[m_64 = aenc((tag4,n2_12,pk(sskI_8)),pk(ski[])),e2_2 = u[],e1_2 = a[],!1 = @sid_2]
code_12 = code_8[m_66 = enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8),m_64 = aenc((tag4,n2_12,pk(sskI_8)),pk(ski[])),e2_2 = u[],e1_2 = a[],!1 = @sid_2]
@occ256_1 = @occ256[m_38 = enc((tag7,code_12),k2_8),m_36 = aenc((tag5,n2_12,k2_8),pk(sskI_8)),m_34 = enc((tag3,a[],hash(pkce_8),scope_12),k1_8),m_33 = aenc((tag2,n_12,k1_8),pk(sskI_9)),e2_1 = i[],e1_1 = a[],!1 = @sid]
@occ400_1 = @occ400[m_66 = enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8),m_64 = aenc((tag4,n2_12,pk(sskI_8)),pk(ski[])),e2_2 = u[],e1_2 = a[],!1 = @sid_2]
@occ35_1 = @occ35[m_1 = aenc((tag1,n_12,pk(sskI_9)),pk(ska[])),e2 = i[],e1 = u[],!1 = @sid_1]
RESULT inj-event(browserCompletesProtocol(m_96,m_97,m_98,m_99,m_100,m_101,m_102)) ==> inj-event(appSendsLastMessageToBrowser(m_96,m_97,m_98)) && inj-event(issuerSendsLastMessageToBrowser(m_99,m_100,m_101,m_102)) is true.
-- Query inj-event(issuerCompletesProtocol(m_96,m_97,m_98,m_99,m_100,m_101)) ==> inj-event(appSendsLastMessageToIssuer(m_99,m_100,m_101)) && inj-event(browserSendsLastMessageToIssuer(m_96,m_97,m_98)) in process 1.
Translating the process into Horn clauses...
Completing...
select attacker(pk(sk))/-5000
200 rules inserted. Base: 171 rules (45 with conclusion selected). Queue: 67 rules.
400 rules inserted. Base: 321 rules (89 with conclusion selected). Queue: 121 rules.
600 rules inserted. Base: 482 rules (111 with conclusion selected). Queue: 119 rules.
800 rules inserted. Base: 580 rules (134 with conclusion selected). Queue: 192 rules.
1000 rules inserted. Base: 672 rules (150 with conclusion selected). Queue: 221 rules.
1200 rules inserted. Base: 772 rules (164 with conclusion selected). Queue: 242 rules.
1400 rules inserted. Base: 820 rules (174 with conclusion selected). Queue: 234 rules.
1600 rules inserted. Base: 902 rules (187 with conclusion selected). Queue: 241 rules.
1800 rules inserted. Base: 991 rules (199 with conclusion selected). Queue: 197 rules.
2000 rules inserted. Base: 1117 rules (223 with conclusion selected). Queue: 185 rules.
2200 rules inserted. Base: 1202 rules (250 with conclusion selected). Queue: 189 rules.
2400 rules inserted. Base: 1298 rules (275 with conclusion selected). Queue: 265 rules.
2600 rules inserted. Base: 1355 rules (294 with conclusion selected). Queue: 316 rules.
2800 rules inserted. Base: 1429 rules (305 with conclusion selected). Queue: 361 rules.
3000 rules inserted. Base: 1554 rules (321 with conclusion selected). Queue: 401 rules.
3200 rules inserted. Base: 1635 rules (329 with conclusion selected). Queue: 418 rules.
3400 rules inserted. Base: 1700 rules (353 with conclusion selected). Queue: 563 rules.
3600 rules inserted. Base: 1780 rules (360 with conclusion selected). Queue: 538 rules.
3800 rules inserted. Base: 1839 rules (370 with conclusion selected). Queue: 580 rules.
4000 rules inserted. Base: 1940 rules (377 with conclusion selected). Queue: 556 rules.
4200 rules inserted. Base: 2022 rules (393 with conclusion selected). Queue: 570 rules.
4400 rules inserted. Base: 2101 rules (401 with conclusion selected). Queue: 523 rules.
4600 rules inserted. Base: 2178 rules (421 with conclusion selected). Queue: 471 rules.
4800 rules inserted. Base: 2248 rules (438 with conclusion selected). Queue: 475 rules.
5000 rules inserted. Base: 2357 rules (452 with conclusion selected). Queue: 438 rules.
5200 rules inserted. Base: 2428 rules (492 with conclusion selected). Queue: 503 rules.
5400 rules inserted. Base: 2483 rules (508 with conclusion selected). Queue: 534 rules.
5600 rules inserted. Base: 2584 rules (567 with conclusion selected). Queue: 596 rules.
5800 rules inserted. Base: 2655 rules (575 with conclusion selected). Queue: 678 rules.
6000 rules inserted. Base: 2733 rules (606 with conclusion selected). Queue: 678 rules.
6200 rules inserted. Base: 2844 rules (624 with conclusion selected). Queue: 706 rules.
6400 rules inserted. Base: 2904 rules (633 with conclusion selected). Queue: 683 rules.
6600 rules inserted. Base: 2904 rules (649 with conclusion selected). Queue: 707 rules.
6800 rules inserted. Base: 2974 rules (668 with conclusion selected). Queue: 723 rules.
7000 rules inserted. Base: 3012 rules (674 with conclusion selected). Queue: 755 rules.
7200 rules inserted. Base: 3095 rules (687 with conclusion selected). Queue: 716 rules.
7400 rules inserted. Base: 3184 rules (711 with conclusion selected). Queue: 677 rules.
7600 rules inserted. Base: 3236 rules (717 with conclusion selected). Queue: 732 rules.
7800 rules inserted. Base: 3287 rules (741 with conclusion selected). Queue: 742 rules.
8000 rules inserted. Base: 3372 rules (779 with conclusion selected). Queue: 703 rules.
8200 rules inserted. Base: 3428 rules (797 with conclusion selected). Queue: 737 rules.
8400 rules inserted. Base: 3462 rules (815 with conclusion selected). Queue: 700 rules.
8600 rules inserted. Base: 3563 rules (845 with conclusion selected). Queue: 690 rules.
8800 rules inserted. Base: 3661 rules (873 with conclusion selected). Queue: 728 rules.
9000 rules inserted. Base: 3728 rules (891 with conclusion selected). Queue: 664 rules.
9200 rules inserted. Base: 3835 rules (932 with conclusion selected). Queue: 673 rules.
9400 rules inserted. Base: 3906 rules (961 with conclusion selected). Queue: 658 rules.
9600 rules inserted. Base: 4014 rules (975 with conclusion selected). Queue: 665 rules.
9800 rules inserted. Base: 4083 rules (1008 with conclusion selected). Queue: 684 rules.
10000 rules inserted. Base: 4199 rules (1037 with conclusion selected). Queue: 635 rules.
10200 rules inserted. Base: 4293 rules (1049 with conclusion selected). Queue: 572 rules.
10400 rules inserted. Base: 4374 rules (1081 with conclusion selected). Queue: 577 rules.
10600 rules inserted. Base: 4482 rules (1106 with conclusion selected). Queue: 548 rules.
10800 rules inserted. Base: 4600 rules (1120 with conclusion selected). Queue: 500 rules.
11000 rules inserted. Base: 4726 rules (1146 with conclusion selected). Queue: 451 rules.
11200 rules inserted. Base: 4823 rules (1160 with conclusion selected). Queue: 394 rules.
11400 rules inserted. Base: 4927 rules (1175 with conclusion selected). Queue: 370 rules.
11600 rules inserted. Base: 5031 rules (1198 with conclusion selected). Queue: 318 rules.
11800 rules inserted. Base: 5108 rules (1210 with conclusion selected). Queue: 347 rules.
12000 rules inserted. Base: 5191 rules (1230 with conclusion selected). Queue: 304 rules.
12200 rules inserted. Base: 5244 rules (1252 with conclusion selected). Queue: 310 rules.
12400 rules inserted. Base: 5301 rules (1259 with conclusion selected). Queue: 292 rules.
12600 rules inserted. Base: 5396 rules (1303 with conclusion selected). Queue: 228 rules.
12800 rules inserted. Base: 5489 rules (1345 with conclusion selected). Queue: 240 rules.
13000 rules inserted. Base: 5576 rules (1372 with conclusion selected). Queue: 204 rules.
13200 rules inserted. Base: 5676 rules (1400 with conclusion selected). Queue: 204 rules.
13400 rules inserted. Base: 5772 rules (1428 with conclusion selected). Queue: 227 rules.
13600 rules inserted. Base: 5861 rules (1428 with conclusion selected). Queue: 176 rules.
13800 rules inserted. Base: 5977 rules (1431 with conclusion selected). Queue: 120 rules.
14000 rules inserted. Base: 6065 rules (1446 with conclusion selected). Queue: 56 rules.
Starting query inj-event(issuerCompletesProtocol(m_96,m_97,m_98,m_99,m_100,m_101)) ==> inj-event(appSendsLastMessageToIssuer(m_99,m_100,m_101)) && inj-event(browserSendsLastMessageToIssuer(m_96,m_97,m_98))
goal reachable: e2_3 Ôëá i[] && e1_3 Ôëá u[] && begin(appSendsLastMessageToIssuer(aenc((tag9,n2_12,pk(sskI2_4)),pk(sk)),aenc((tag10,n2_12,k3_8),pk(sskI2_4)),enc((tag11,pk(sks_4),sign((a[],jti_8,code_12,pkce_8),sks_4)),k3_8)),@occ194_1) && attacker(sk_1) && attacker(sk) && begin(@p_act(@occ248_1,enc((tag7,code_12),k2_8))) && attacker(n2_13) && attacker(pk(sk_1)) && begin(browserSendsLastMessageToIssuer(aenc((tag4,n2_14,pk(sskI_8)),pk(ski[])),aenc((tag5,n2_14,k2_8),pk(sskI_8)),enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8)),@occ246_1) && attacker(pk(sk)) && attacker(pke1_6) && attacker(e2_3) && attacker(e1_3) -> end(@occ422_1,issuerCompletesProtocol(aenc((tag4,n2_14,pk(sskI_8)),pk(ski[])),aenc((tag5,n2_14,k2_8),pk(sskI_8)),enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8),aenc((tag9,n2_13,pk(sk_1)),pk(ski[])),aenc((tag10,n2_13,k3_8),pk(sk_1)),enc((tag11,pk(sks_4),sign((a[],jti_8,code_12,pkce_8),sks_4)),k3_8)))
Abbreviations:
n_12 = n_4[e2_1 = i[],e1_1 = a[],!1 = @sid]
sskI_9 = sskI[e2_1 = i[],e1_1 = a[],!1 = @sid]
pkce_8 = pkce_3[m_24 = aenc((tag1,n_12,pk(sskI_9)),pk(ska[])),pke2_1 = pk(sk),pke1_1 = pke1_6,e2 = e2_3,e1 = e1_3,!1 = @sid_1]
scope_12 = scope_3[m_24 = aenc((tag1,n_12,pk(sskI_9)),pk(ska[])),pke2_1 = pk(sk),pke1_1 = pke1_6,e2 = e2_3,e1 = e1_3,!1 = @sid_1]
k1_8 = k1_3[m_24 = aenc((tag1,n_12,pk(sskI_9)),pk(ska[])),pke2_1 = pk(sk),pke1_1 = pke1_6,e2 = e2_3,e1 = e1_3,!1 = @sid_1]
n2_14 = n2_4[m_34 = enc((tag3,a[],hash(pkce_8),scope_12),k1_8),m_33 = aenc((tag2,n_12,k1_8),pk(sskI_9)),e2_1 = i[],e1_1 = a[],!1 = @sid]
sskI_8 = sskI_1[m_34 = enc((tag3,a[],hash(pkce_8),scope_12),k1_8),m_33 = aenc((tag2,n_12,k1_8),pk(sskI_9)),e2_1 = i[],e1_1 = a[],!1 = @sid]
k2_8 = k2_4[m_64 = aenc((tag4,n2_14,pk(sskI_8)),pk(ski[])),e2_2 = u[],e1_2 = a[],!1 = @sid_2]
code_12 = code_8[m_66 = enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8),m_64 = aenc((tag4,n2_14,pk(sskI_8)),pk(ski[])),e2_2 = u[],e1_2 = a[],!1 = @sid_2]
n2_12 = n2_3[m_27 = enc((tag8,code_12),k1_8),m_24 = aenc((tag1,n_12,pk(sskI_9)),pk(ska[])),pke2_1 = pk(sk),pke1_1 = pke1_6,e2 = e2_3,e1 = e1_3,!1 = @sid_1]
k3_8 = k3_4[m_68 = aenc((tag9,n2_13,pk(sk_1)),pk(ski[])),m_66 = enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8),m_64 = aenc((tag4,n2_14,pk(sskI_8)),pk(ski[])),e2_2 = u[],e1_2 = a[],!1 = @sid_2]
sskI2_4 = sskI2_3[m_27 = enc((tag8,code_12),k1_8),m_24 = aenc((tag1,n_12,pk(sskI_9)),pk(ska[])),pke2_1 = pk(sk),pke1_1 = pke1_6,e2 = e2_3,e1 = e1_3,!1 = @sid_1]
sks_4 = sks_3[m_29 = aenc((tag10,n2_12,k3_8),pk(sskI2_4)),m_27 = enc((tag8,code_12),k1_8),m_24 = aenc((tag1,n_12,pk(sskI_9)),pk(ska[])),pke2_1 = pk(sk),pke1_1 = pke1_6,e2 = e2_3,e1 = e1_3,!1 = @sid_1]
jti_8 = jti_3[m_29 = aenc((tag10,n2_12,k3_8),pk(sskI2_4)),m_27 = enc((tag8,code_12),k1_8),m_24 = aenc((tag1,n_12,pk(sskI_9)),pk(ska[])),pke2_1 = pk(sk),pke1_1 = pke1_6,e2 = e2_3,e1 = e1_3,!1 = @sid_1]
@occ422_1 = @occ422[m_70 = enc((tag11,pk(sks_4),sign((a[],jti_8,code_12,pkce_8),sks_4)),k3_8),m_68 = aenc((tag9,n2_13,pk(sk_1)),pk(ski[])),m_66 = enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8),m_64 = aenc((tag4,n2_14,pk(sskI_8)),pk(ski[])),e2_2 = u[],e1_2 = a[],!1 = @sid_2]
@occ194_1 = @occ194[m_29 = aenc((tag10,n2_12,k3_8),pk(sskI2_4)),m_27 = enc((tag8,code_12),k1_8),m_24 = aenc((tag1,n_12,pk(sskI_9)),pk(ska[])),pke2_1 = pk(sk),pke1_1 = pke1_6,e2 = e2_3,e1 = e1_3,!1 = @sid_1]
@occ248_1 = @occ248[!1 = @sid]
@occ246_1 = @occ246[m_36 = aenc((tag5,n2_14,k2_8),pk(sskI_8)),m_34 = enc((tag3,a[],hash(pkce_8),scope_12),k1_8),m_33 = aenc((tag2,n_12,k1_8),pk(sskI_9)),e2_1 = i[],e1_1 = a[],!1 = @sid]

Derivation:
Abbreviations:
n_12 = n_4[e2_1 = i[],e1_1 = a[],!1 = @sid]
sskI_8 = sskI[e2_1 = i[],e1_1 = a[],!1 = @sid]
pkce_8 = pkce_3[m_24 = aenc((tag1,n_12,pk(sskI_8)),pk(ska[])),pke2_1 = pk(sk),pke1_1 = pke1_6,e2 = e2_3,e1 = e1_3,!1 = @sid_1]
scope_12 = scope_3[m_24 = aenc((tag1,n_12,pk(sskI_8)),pk(ska[])),pke2_1 = pk(sk),pke1_1 = pke1_6,e2 = e2_3,e1 = e1_3,!1 = @sid_1]
k1_8 = k1_3[m_24 = aenc((tag1,n_12,pk(sskI_8)),pk(ska[])),pke2_1 = pk(sk),pke1_1 = pke1_6,e2 = e2_3,e1 = e1_3,!1 = @sid_1]
n2_12 = n2_4[m_34 = enc((tag3,a[],hash(pkce_8),scope_12),k1_8),m_33 = aenc((tag2,n_12,k1_8),pk(sskI_8)),e2_1 = i[],e1_1 = a[],!1 = @sid]
sskI_9 = sskI_1[m_34 = enc((tag3,a[],hash(pkce_8),scope_12),k1_8),m_33 = aenc((tag2,n_12,k1_8),pk(sskI_8)),e2_1 = i[],e1_1 = a[],!1 = @sid]
k2_8 = k2_4[m_64 = aenc((tag4,n2_12,pk(sskI_9)),pk(ski[])),e2_2 = u[],e1_2 = a[],!1 = @sid_2]
code_12 = code_8[m_66 = enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8),m_64 = aenc((tag4,n2_12,pk(sskI_9)),pk(ski[])),e2_2 = u[],e1_2 = a[],!1 = @sid_2]
n2_13 = n2_3[m_27 = enc((tag8,code_12),k1_8),m_24 = aenc((tag1,n_12,pk(sskI_8)),pk(ska[])),pke2_1 = pk(sk),pke1_1 = pke1_6,e2 = e2_3,e1 = e1_3,!1 = @sid_1]
k3_8 = k3_4[m_68 = aenc((tag9,n2_14,pk(sk_1)),pk(ski[])),m_66 = enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8),m_64 = aenc((tag4,n2_12,pk(sskI_9)),pk(ski[])),e2_2 = u[],e1_2 = a[],!1 = @sid_2]
sskI2_4 = sskI2_3[m_27 = enc((tag8,code_12),k1_8),m_24 = aenc((tag1,n_12,pk(sskI_8)),pk(ska[])),pke2_1 = pk(sk),pke1_1 = pke1_6,e2 = e2_3,e1 = e1_3,!1 = @sid_1]
sks_4 = sks_3[m_29 = aenc((tag10,n2_13,k3_8),pk(sskI2_4)),m_27 = enc((tag8,code_12),k1_8),m_24 = aenc((tag1,n_12,pk(sskI_8)),pk(ska[])),pke2_1 = pk(sk),pke1_1 = pke1_6,e2 = e2_3,e1 = e1_3,!1 = @sid_1]
jti_8 = jti_3[m_29 = aenc((tag10,n2_13,k3_8),pk(sskI2_4)),m_27 = enc((tag8,code_12),k1_8),m_24 = aenc((tag1,n_12,pk(sskI_8)),pk(ska[])),pke2_1 = pk(sk),pke1_1 = pke1_6,e2 = e2_3,e1 = e1_3,!1 = @sid_1]
@occ422_1 = @occ422[m_70 = enc((tag11,pk(sks_4),sign((a[],jti_8,code_12,pkce_8),sks_4)),k3_8),m_68 = aenc((tag9,n2_14,pk(sk_1)),pk(ski[])),m_66 = enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8),m_64 = aenc((tag4,n2_12,pk(sskI_9)),pk(ski[])),e2_2 = u[],e1_2 = a[],!1 = @sid_2]
@occ194_1 = @occ194[m_29 = aenc((tag10,n2_13,k3_8),pk(sskI2_4)),m_27 = enc((tag8,code_12),k1_8),m_24 = aenc((tag1,n_12,pk(sskI_8)),pk(ska[])),pke2_1 = pk(sk),pke1_1 = pke1_6,e2 = e2_3,e1 = e1_3,!1 = @sid_1]
@occ248_1 = @occ248[!1 = @sid]
@occ246_1 = @occ246[m_36 = aenc((tag5,n2_12,k2_8),pk(sskI_9)),m_34 = enc((tag3,a[],hash(pkce_8),scope_12),k1_8),m_33 = aenc((tag2,n_12,k1_8),pk(sskI_8)),e2_1 = i[],e1_1 = a[],!1 = @sid]

1. The message a[] may be sent to the attacker at output {4}.
attacker(a[]).

2. The message u[] may be sent to the attacker at output {5}.
attacker(u[]).

3. The message i[] may be sent to the attacker at output {6}.
attacker(i[]).

4. We assume as hypothesis that
attacker(e1_3).

5. We assume as hypothesis that
attacker(e2_3).

6. We assume as hypothesis that
attacker(pke1_6).

7. We assume as hypothesis that
attacker(pk(sk)).

8. The message a[] that the attacker may have by 1 may be received at input {221}.
The message i[] that the attacker may have by 3 may be received at input {222}.
So the message aenc((tag1,n_12,pk(sskI_8)),pk(ska[])) may be sent to the attacker at output {228}.
attacker(aenc((tag1,n_12,pk(sskI_8)),pk(ska[]))).

9. The message e1_3 that the attacker may have by 4 may be received at input {22}.
The message e2_3 that the attacker may have by 5 may be received at input {23}.
The message pke1_6 that the attacker may have by 6 may be received at input {165}.
The message pk(sk) that the attacker may have by 7 may be received at input {166}.
The message aenc((tag1,n_12,pk(sskI_8)),pk(ska[])) that the attacker may have by 8 may be received at input {168}.
We have e2_3 Ôëá i[] && e1_3 Ôëá u[].
So the message aenc((tag2,n_12,k1_8),pk(sskI_8)) may be sent to the attacker at output {173}.
attacker(aenc((tag2,n_12,k1_8),pk(sskI_8))).

10. The message e1_3 that the attacker may have by 4 may be received at input {22}.
The message e2_3 that the attacker may have by 5 may be received at input {23}.
The message pke1_6 that the attacker may have by 6 may be received at input {165}.
The message pk(sk) that the attacker may have by 7 may be received at input {166}.
The message aenc((tag1,n_12,pk(sskI_8)),pk(ska[])) that the attacker may have by 8 may be received at input {168}.
We have e2_3 Ôëá i[] && e1_3 Ôëá u[].
So the message enc((tag3,a[],hash(pkce_8),scope_12),k1_8) may be sent to the attacker at output {178}.
attacker(enc((tag3,a[],hash(pkce_8),scope_12),k1_8)).

11. The message a[] that the attacker may have by 1 may be received at input {221}.
The message i[] that the attacker may have by 3 may be received at input {222}.
The message aenc((tag2,n_12,k1_8),pk(sskI_8)) that the attacker may have by 9 may be received at input {229}.
The message enc((tag3,a[],hash(pkce_8),scope_12),k1_8) that the attacker may have by 10 may be received at input {233}.
So the message aenc((tag4,n2_12,pk(sskI_9)),pk(ski[])) may be sent to the attacker at output {240}.
attacker(aenc((tag4,n2_12,pk(sskI_9)),pk(ski[]))).

12. The message a[] that the attacker may have by 1 may be received at input {382}.
The message u[] that the attacker may have by 2 may be received at input {383}.
The message aenc((tag4,n2_12,pk(sskI_9)),pk(ski[])) that the attacker may have by 11 may be received at input {386}.
So the message aenc((tag5,n2_12,k2_8),pk(sskI_9)) may be sent to the attacker at output {391}.
attacker(aenc((tag5,n2_12,k2_8),pk(sskI_9))).

13. The message a[] that the attacker may have by 1 may be received at input {221}.
The message i[] that the attacker may have by 3 may be received at input {222}.
The message aenc((tag2,n_12,k1_8),pk(sskI_8)) that the attacker may have by 9 may be received at input {229}.
The message enc((tag3,a[],hash(pkce_8),scope_12),k1_8) that the attacker may have by 10 may be received at input {233}.
The message aenc((tag5,n2_12,k2_8),pk(sskI_9)) that the attacker may have by 12 may be received at input {241}.
The event browserSendsLastMessageToIssuer(aenc((tag4,n2_12,pk(sskI_9)),pk(ski[])),aenc((tag5,n2_12,k2_8),pk(sskI_9)),enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8)) (with occurrence name @occ246_1) may be executed at {246}.
So the message enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8) may be sent to the attacker at output {247}.
attacker(enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8)).

14. The message pk(ski[]) may be sent to the attacker at output {12}.
attacker(pk(ski[])).

15. We assume as hypothesis that
attacker(pk(sk_1)).

16. We assume as hypothesis that
attacker(n2_14).

17. Using the function tag9 the attacker may obtain tag9.
attacker(tag9).

18. By 17, the attacker may know tag9.
By 16, the attacker may know n2_14.
By 15, the attacker may know pk(sk_1).
Using the function 3-tuple the attacker may obtain (tag9,n2_14,pk(sk_1)).
attacker((tag9,n2_14,pk(sk_1))).

19. By 18, the attacker may know (tag9,n2_14,pk(sk_1)).
By 14, the attacker may know pk(ski[]).
Using the function aenc the attacker may obtain aenc((tag9,n2_14,pk(sk_1)),pk(ski[])).
attacker(aenc((tag9,n2_14,pk(sk_1)),pk(ski[]))).

20. The message a[] that the attacker may have by 1 may be received at input {382}.
The message u[] that the attacker may have by 2 may be received at input {383}.
The message aenc((tag4,n2_12,pk(sskI_9)),pk(ski[])) that the attacker may have by 11 may be received at input {386}.
The message enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8) that the attacker may have by 13 may be received at input {392}.
So the message enc((tag7,code_12),k2_8) may be sent to the attacker at output {401}.
attacker(enc((tag7,code_12),k2_8)).

21. The message a[] that the attacker may have by 1 may be received at input {221}.
The message i[] that the attacker may have by 3 may be received at input {222}.
The message aenc((tag2,n_12,k1_8),pk(sskI_8)) that the attacker may have by 9 may be received at input {229}.
The message enc((tag3,a[],hash(pkce_8),scope_12),k1_8) that the attacker may have by 10 may be received at input {233}.
The message aenc((tag5,n2_12,k2_8),pk(sskI_9)) that the attacker may have by 12 may be received at input {241}.
The event browserSendsLastMessageToIssuer(aenc((tag4,n2_12,pk(sskI_9)),pk(ski[])),aenc((tag5,n2_12,k2_8),pk(sskI_9)),enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8)) (with occurrence name @occ246_1) may be executed at {246}.
The event @p_act(@occ248_1,enc((tag7,code_12),k2_8)) records how variables are instantiated at {248}.
The message enc((tag7,code_12),k2_8) that the attacker may have by 20 may be received at input {248}.
So the message enc((tag8,code_12),k1_8) may be sent to the attacker at output {253}.
attacker(enc((tag8,code_12),k1_8)).

22. We assume as hypothesis that
attacker(sk).

23. The message e1_3 that the attacker may have by 4 may be received at input {22}.
The message e2_3 that the attacker may have by 5 may be received at input {23}.
The message pke1_6 that the attacker may have by 6 may be received at input {165}.
The message pk(sk) that the attacker may have by 7 may be received at input {166}.
The message aenc((tag1,n_12,pk(sskI_8)),pk(ska[])) that the attacker may have by 8 may be received at input {168}.
The message enc((tag8,code_12),k1_8) that the attacker may have by 21 may be received at input {179}.
We have e2_3 Ôëá i[] && e1_3 Ôëá u[].
So the message aenc((tag9,n2_13,pk(sskI2_4)),pk(sk)) may be sent to the attacker at output {185}.
attacker(aenc((tag9,n2_13,pk(sskI2_4)),pk(sk))).

24. By 23, the attacker may know aenc((tag9,n2_13,pk(sskI2_4)),pk(sk)).
By 22, the attacker may know sk.
Using the function adec the attacker may obtain (tag9,n2_13,pk(sskI2_4)).
attacker((tag9,n2_13,pk(sskI2_4))).

25. By 24, the attacker may know (tag9,n2_13,pk(sskI2_4)).
Using the function 3-proj-3-tuple the attacker may obtain pk(sskI2_4).
attacker(pk(sskI2_4)).

26. We assume as hypothesis that
attacker(sk_1).

27. The message a[] that the attacker may have by 1 may be received at input {382}.
The message u[] that the attacker may have by 2 may be received at input {383}.
The message aenc((tag4,n2_12,pk(sskI_9)),pk(ski[])) that the attacker may have by 11 may be received at input {386}.
The message enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8) that the attacker may have by 13 may be received at input {392}.
The message aenc((tag9,n2_14,pk(sk_1)),pk(ski[])) that the attacker may have by 19 may be received at input {402}.
So the message aenc((tag10,n2_14,k3_8),pk(sk_1)) may be sent to the attacker at output {407}.
attacker(aenc((tag10,n2_14,k3_8),pk(sk_1))).

28. By 27, the attacker may know aenc((tag10,n2_14,k3_8),pk(sk_1)).
By 26, the attacker may know sk_1.
Using the function adec the attacker may obtain (tag10,n2_14,k3_8).
attacker((tag10,n2_14,k3_8)).

29. By 28, the attacker may know (tag10,n2_14,k3_8).
Using the function 3-proj-3-tuple the attacker may obtain k3_8.
attacker(k3_8).

30. By 24, the attacker may know (tag9,n2_13,pk(sskI2_4)).
Using the function 2-proj-3-tuple the attacker may obtain n2_13.
attacker(n2_13).

31. Using the function tag10 the attacker may obtain tag10.
attacker(tag10).

32. By 31, the attacker may know tag10.
By 30, the attacker may know n2_13.
By 29, the attacker may know k3_8.
Using the function 3-tuple the attacker may obtain (tag10,n2_13,k3_8).
attacker((tag10,n2_13,k3_8)).

33. By 32, the attacker may know (tag10,n2_13,k3_8).
By 25, the attacker may know pk(sskI2_4).
Using the function aenc the attacker may obtain aenc((tag10,n2_13,k3_8),pk(sskI2_4)).
attacker(aenc((tag10,n2_13,k3_8),pk(sskI2_4))).

34. The message e1_3 that the attacker may have by 4 may be received at input {22}.
The message e2_3 that the attacker may have by 5 may be received at input {23}.
The message pke1_6 that the attacker may have by 6 may be received at input {165}.
The message pk(sk) that the attacker may have by 7 may be received at input {166}.
The message aenc((tag1,n_12,pk(sskI_8)),pk(ska[])) that the attacker may have by 8 may be received at input {168}.
The message enc((tag8,code_12),k1_8) that the attacker may have by 21 may be received at input {179}.
The message aenc((tag10,n2_13,k3_8),pk(sskI2_4)) that the attacker may have by 33 may be received at input {186}.
The event appSendsLastMessageToIssuer(aenc((tag9,n2_13,pk(sskI2_4)),pk(sk)),aenc((tag10,n2_13,k3_8),pk(sskI2_4)),enc((tag11,pk(sks_4),sign((a[],jti_8,code_12,pkce_8),sks_4)),k3_8)) (with occurrence name @occ194_1) may be executed at {194}.
We have e2_3 Ôëá i[] && e1_3 Ôëá u[].
So the message enc((tag11,pk(sks_4),sign((a[],jti_8,code_12,pkce_8),sks_4)),k3_8) may be sent to the attacker at output {195}.
attacker(enc((tag11,pk(sks_4),sign((a[],jti_8,code_12,pkce_8),sks_4)),k3_8)).

35. The message a[] that the attacker may have by 1 may be received at input {382}.
The message u[] that the attacker may have by 2 may be received at input {383}.
The message aenc((tag4,n2_12,pk(sskI_9)),pk(ski[])) that the attacker may have by 11 may be received at input {386}.
The message enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8) that the attacker may have by 13 may be received at input {392}.
The message aenc((tag9,n2_14,pk(sk_1)),pk(ski[])) that the attacker may have by 19 may be received at input {402}.
The message enc((tag11,pk(sks_4),sign((a[],jti_8,code_12,pkce_8),sks_4)),k3_8) that the attacker may have by 34 may be received at input {408}.
So event issuerCompletesProtocol(aenc((tag4,n2_12,pk(sskI_9)),pk(ski[])),aenc((tag5,n2_12,k2_8),pk(sskI_9)),enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8),aenc((tag9,n2_14,pk(sk_1)),pk(ski[])),aenc((tag10,n2_14,k3_8),pk(sk_1)),enc((tag11,pk(sks_4),sign((a[],jti_8,code_12,pkce_8),sks_4)),k3_8)) may be executed at {422} in session @sid_2.
end(@occ422_1,issuerCompletesProtocol(aenc((tag4,n2_12,pk(sskI_9)),pk(ski[])),aenc((tag5,n2_12,k2_8),pk(sskI_9)),enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8),aenc((tag9,n2_14,pk(sk_1)),pk(ski[])),aenc((tag10,n2_14,k3_8),pk(sk_1)),enc((tag11,pk(sks_4),sign((a[],jti_8,code_12,pkce_8),sks_4)),k3_8))).

36. By 35, end(@occ422_1,issuerCompletesProtocol(aenc((tag4,n2_12,pk(sskI_9)),pk(ski[])),aenc((tag5,n2_12,k2_8),pk(sskI_9)),enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8),aenc((tag9,n2_14,pk(sk_1)),pk(ski[])),aenc((tag10,n2_14,k3_8),pk(sk_1)),enc((tag11,pk(sks_4),sign((a[],jti_8,code_12,pkce_8),sks_4)),k3_8))).
The goal is reached, represented in the following fact:
end(@occ422_1,issuerCompletesProtocol(aenc((tag4,n2_12,pk(sskI_9)),pk(ski[])),aenc((tag5,n2_12,k2_8),pk(sskI_9)),enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),k2_8),aenc((tag9,n2_14,pk(sk_1)),pk(ski[])),aenc((tag10,n2_14,k3_8),pk(sk_1)),enc((tag11,pk(sks_4),sign((a[],jti_8,code_12,pkce_8),sks_4)),k3_8))).


A more detailed output of the traces is available with
  set traceDisplay = long.

new a: bitstring creating a_4 at {1}

new u: bitstring creating u_4 at {2}

new i: bitstring creating i_4 at {3}

out(c, ~M) with ~M = a_4 at {4}

out(c, ~M_1) with ~M_1 = u_4 at {5}

out(c, ~M_2) with ~M_2 = i_4 at {6}

new ska: SecretKey creating ska_2 at {7}

new sku: SecretKey creating sku_2 at {8}

new ski: SecretKey creating ski_2 at {9}

out(c, ~M_3) with ~M_3 = pk(ska_2) at {10}

out(c, ~M_4) with ~M_4 = pk(sku_2) at {11}

out(c, ~M_5) with ~M_5 = pk(ski_2) at {12}

new password: bitstring creating password_3 at {13}

in(c, a_5) at {22} in copy a_6

in(c, a_7) at {23} in copy a_6

in(c, a_8) at {165} in copy a_6

in(c, pk(a_9)) at {166} in copy a_6

in(c, ~M) with ~M = a_4 at {221} in copy a_10

in(c, ~M_2) with ~M_2 = i_4 at {222} in copy a_10

new n_4: bitstring creating n_12 at {225} in copy a_10

new sskI: SecretKey creating sskI_8 at {226} in copy a_10

out(c, ~M_6) with ~M_6 = aenc((tag1,n_12,pk(sskI_8)),pk(ska_2)) at {228} in copy a_10

in(c, ~M_6) with ~M_6 = aenc((tag1,n_12,pk(sskI_8)),pk(ska_2)) at {168} in copy a_6

new k1_3: SymmetricKey creating k1_8 at {171} in copy a_6

out(c, ~M_7) with ~M_7 = aenc((tag2,n_12,k1_8),pk(sskI_8)) at {173} in copy a_6

new pkce_3: bitstring creating pkce_8 at {174} in copy a_6

new scope_3: bitstring creating scope_12 at {175} in copy a_6

event appSendsLastMessageToBrowser(aenc((tag1,n_12,pk(sskI_8)),pk(ska_2)),aenc((tag2,n_12,k1_8),pk(sskI_8)),enc((tag3,a_4,hash(pkce_8),scope_12),k1_8)) at {177} in copy a_6

out(c, ~M_8) with ~M_8 = enc((tag3,a_4,hash(pkce_8),scope_12),k1_8) at {178} in copy a_6

in(c, ~M_7) with ~M_7 = aenc((tag2,n_12,k1_8),pk(sskI_8)) at {229} in copy a_10

in(c, ~M_8) with ~M_8 = enc((tag3,a_4,hash(pkce_8),scope_12),k1_8) at {233} in copy a_10

new n2_4: bitstring creating n2_12 at {237} in copy a_10

new sskI_1: SecretKey creating sskI_9 at {238} in copy a_10

out(c, ~M_9) with ~M_9 = aenc((tag4,n2_12,pk(sskI_9)),pk(ski_2)) at {240} in copy a_10

in(c, ~M) with ~M = a_4 at {382} in copy a_11

in(c, ~M_1) with ~M_1 = u_4 at {383} in copy a_11

in(c, ~M_9) with ~M_9 = aenc((tag4,n2_12,pk(sskI_9)),pk(ski_2)) at {386} in copy a_11

new k2_4: SymmetricKey creating k2_8 at {389} in copy a_11

out(c, ~M_10) with ~M_10 = aenc((tag5,n2_12,k2_8),pk(sskI_9)) at {391} in copy a_11

in(c, ~M_10) with ~M_10 = aenc((tag5,n2_12,k2_8),pk(sskI_9)) at {241} in copy a_10

event browserSendsLastMessageToIssuer(aenc((tag4,n2_12,pk(sskI_9)),pk(ski_2)),aenc((tag5,n2_12,k2_8),pk(sskI_9)),enc((tag6,a_4,hash(pkce_8),scope_12,u_4,password_3),k2_8)) at {246} in copy a_10

out(c, ~M_11) with ~M_11 = enc((tag6,a_4,hash(pkce_8),scope_12,u_4,password_3),k2_8) at {247} in copy a_10

in(c, ~M_11) with ~M_11 = enc((tag6,a_4,hash(pkce_8),scope_12,u_4,password_3),k2_8) at {392} in copy a_11

new code_8: bitstring creating code_12 at {398} in copy a_11

event issuerSendsLastMessageToBrowser(aenc((tag4,n2_12,pk(sskI_9)),pk(ski_2)),aenc((tag5,n2_12,k2_8),pk(sskI_9)),enc((tag6,a_4,hash(pkce_8),scope_12,u_4,password_3),k2_8),enc((tag7,code_12),k2_8)) at {400} in copy a_11

out(c, ~M_12) with ~M_12 = enc((tag7,code_12),k2_8) at {401} in copy a_11

in(c, ~M_12) with ~M_12 = enc((tag7,code_12),k2_8) at {248} in copy a_10

event browserSendsLastMessageToApp(aenc((tag1,n_12,pk(sskI_8)),pk(ska_2)),aenc((tag2,n_12,k1_8),pk(sskI_8)),enc((tag3,a_4,hash(pkce_8),scope_12),k1_8),enc((tag8,code_12),k1_8)) at {252} in copy a_10

out(c, ~M_13) with ~M_13 = enc((tag8,code_12),k1_8) at {253} in copy a_10

out(c, ~M_14) with ~M_14 = check_reach_browser at {255} in copy a_10

event browserCompletesProtocol(aenc((tag1,n_12,pk(sskI_8)),pk(ska_2)),aenc((tag2,n_12,k1_8),pk(sskI_8)),enc((tag3,a_4,hash(pkce_8),scope_12),k1_8),aenc((tag4,n2_12,pk(sskI_9)),pk(ski_2)),aenc((tag5,n2_12,k2_8),pk(sskI_9)),enc((tag6,a_4,hash(pkce_8),scope_12,u_4,password_3),k2_8),enc((tag7,code_12),k2_8)) at {256} in copy a_10

in(c, ~M_13) with ~M_13 = enc((tag8,code_12),k1_8) at {179} in copy a_6

new n2_3: bitstring creating n2_13 at {182} in copy a_6

new sskI2_3: SecretKey creating sskI2_4 at {183} in copy a_6

out(c, ~M_15) with ~M_15 = aenc((tag9,n2_13,pk(sskI2_4)),pk(a_9)) at {185} in copy a_6

in(c, aenc((tag9,a_12,pk(a_13)),~M_5)) with aenc((tag9,a_12,pk(a_13)),~M_5) = aenc((tag9,a_12,pk(a_13)),pk(ski_2)) at {402} in copy a_11

new k3_4: SymmetricKey creating k3_8 at {405} in copy a_11

out(c, ~M_16) with ~M_16 = aenc((tag10,a_12,k3_8),pk(a_13)) at {407} in copy a_11

in(c, aenc((tag10,2-proj-3-tuple(adec(~M_15,a_9)),3-proj-3-tuple(adec(~M_16,a_13))),3-proj-3-tuple(adec(~M_15,a_9)))) with aenc((tag10,2-proj-3-tuple(adec(~M_15,a_9)),3-proj-3-tuple(adec(~M_16,a_13))),3-proj-3-tuple(adec(~M_15,a_9))) = aenc((tag10,n2_13,k3_8),pk(sskI2_4)) at {186} in copy a_6

new sks_3: SecretKey creating sks_4 at {190} in copy a_6

new jti_3: bitstring creating jti_8 at {191} in copy a_6

event appSendsLastMessageToIssuer(aenc((tag9,n2_13,pk(sskI2_4)),pk(a_9)),aenc((tag10,n2_13,k3_8),pk(sskI2_4)),enc((tag11,pk(sks_4),sign((a_4,jti_8,code_12,pkce_8),sks_4)),k3_8)) at {194} in copy a_6

out(c, ~M_17) with ~M_17 = enc((tag11,pk(sks_4),sign((a_4,jti_8,code_12,pkce_8),sks_4)),k3_8) at {195} in copy a_6

in(c, ~M_17) with ~M_17 = enc((tag11,pk(sks_4),sign((a_4,jti_8,code_12,pkce_8),sks_4)),k3_8) at {408} in copy a_11

event issuerSendsLastMessageToApp(aenc((tag9,a_12,pk(a_13)),pk(ski_2)),aenc((tag10,a_12,k3_8),pk(a_13)),enc((tag11,pk(sks_4),sign((a_4,jti_8,code_12,pkce_8),sks_4)),k3_8),enc((tag12,sign((hash_pk(pk(sks_4)),jti_8,scope_12,a_4,i_4,u_4),ski_2)),k3_8)) at {418} in copy a_11

out(c, ~M_18) with ~M_18 = enc((tag12,sign((hash_pk(pk(sks_4)),jti_8,scope_12,a_4,i_4,u_4),ski_2)),k3_8) at {419} in copy a_11

out(c, ~M_19) with ~M_19 = check_reach_issuer at {421} in copy a_11

event issuerCompletesProtocol(aenc((tag4,n2_12,pk(sskI_9)),pk(ski_2)),aenc((tag5,n2_12,k2_8),pk(sskI_9)),enc((tag6,a_4,hash(pkce_8),scope_12,u_4,password_3),k2_8),aenc((tag9,a_12,pk(a_13)),pk(ski_2)),aenc((tag10,a_12,k3_8),pk(a_13)),enc((tag11,pk(sks_4),sign((a_4,jti_8,code_12,pkce_8),sks_4)),k3_8)) at {422} in copy a_11 (goal)

The event issuerCompletesProtocol(aenc((tag4,n2_12,pk(sskI_9)),pk(ski_2)),aenc((tag5,n2_12,k2_8),pk(sskI_9)),enc((tag6,a_4,hash(pkce_8),scope_12,u_4,password_3),k2_8),aenc((tag9,a_12,pk(a_13)),pk(ski_2)),aenc((tag10,a_12,k3_8),pk(a_13)),enc((tag11,pk(sks_4),sign((a_4,jti_8,code_12,pkce_8),sks_4)),k3_8)) is executed at {422} in copy a_11.
A trace has been found.
RESULT inj-event(issuerCompletesProtocol(m_96,m_97,m_98,m_99,m_100,m_101)) ==> inj-event(appSendsLastMessageToIssuer(m_99,m_100,m_101)) && inj-event(browserSendsLastMessageToIssuer(m_96,m_97,m_98)) is false.
RESULT (even event(issuerCompletesProtocol(m_96,m_97,m_98,m_99,m_100,m_101)) ==> event(appSendsLastMessageToIssuer(m_99,m_100,m_101)) && event(browserSendsLastMessageToIssuer(m_96,m_97,m_98)) is false.)

--------------------------------------------------------------
Verification summary:

Query not attacker(check_reach_app[]) is false.

Query not attacker(check_reach_browser[]) is false.

Query not attacker(check_reach_issuer[]) is false.

Query not attacker(free_code[]) is false.

Query not attacker(free_password[]) is true.

Query inj-event(appCompletesProtocol(m_96,m_97,m_98,m_99,m_100,m_101,m_102,m_103)) ==> inj-event(browserSendsLastMessageToApp(m_96,m_97,m_98,m_99)) && inj-event(issuerSendsLastMessageToApp(m_100,m_101,m_102,m_103)) is true.

Query inj-event(browserCompletesProtocol(m_96,m_97,m_98,m_99,m_100,m_101,m_102)) ==> inj-event(appSendsLastMessageToBrowser(m_96,m_97,m_98)) && inj-event(issuerSendsLastMessageToBrowser(m_99,m_100,m_101,m_102)) is true.

Query inj-event(issuerCompletesProtocol(m_96,m_97,m_98,m_99,m_100,m_101)) ==> inj-event(appSendsLastMessageToIssuer(m_99,m_100,m_101)) && inj-event(browserSendsLastMessageToIssuer(m_96,m_97,m_98)) is false.

--------------------------------------------------------------

