File "soidc_dh.pv", line 132, characters 9-10:
Warning: identifier gx rebound.
File "soidc_dh.pv", line 140, characters 9-10:
Warning: identifier gy rebound.
File "soidc_dh.pv", line 211, character 9:
Warning: identifier x rebound.
File "soidc_dh.pv", line 212, characters 9-10:
Warning: identifier gx rebound.
File "soidc_dh.pv", line 218, characters 27-32:
Warning: identifier bit_gy rebound.
File "soidc_dh.pv", line 218, characters 45-57:
Warning: identifier enc_signature rebound.
File "soidc_dh.pv", line 220, characters 9-10:
Warning: identifier gy rebound.
File "soidc_dh.pv", line 297, characters 27-31:
Warning: identifier bitgx rebound.
File "soidc_dh.pv", line 299, characters 9-10:
Warning: identifier gx rebound.
File "soidc_dh.pv", line 302, character 9:
Warning: identifier y rebound.
File "soidc_dh.pv", line 303, characters 9-10:
Warning: identifier gy rebound.
Linear part:
exp(g(x),y) = exp(g(y),x)
Completing equations...
Completed equations:
exp(g(x),y) = exp(g(y),x)
Convergent part: No equation.
Process 0 (that is, the initial process):
{1}new a: bitstring;
{2}new u: bitstring;
{3}new i: bitstring;
{4}out(c, a);
{5}out(c, u);
{6}out(c, i);
{7}new ska: SecretKey;
{8}new sku: SecretKey;
{9}new ski: SecretKey;
{10}out(c, pk(ska));
{11}out(c, pk(sku));
{12}out(c, pk(ski));
{13}new password: bitstring;
(
    {14}!
    {15}let c_1: channel = c in
    {16}let a_1: bitstring = a in
    {17}let ska_1: SecretKey = ska in
    {18}let u_1: bitstring = u in
    {19}let pku: PublicKey = pk(sku) in
    {20}let i_1: bitstring = i in
    {21}let pki: PublicKey = pk(ski) in
    {22}in(c_1, e1: bitstring);
    {23}in(c_1, e2: bitstring);
    {24}if ((e1 = u_1) && (e2 = i_1)) then
    (
        {25}let talksOnlyToHonest: bool = true in
        {26}in(c_1, m_1: bitstring);
        {27}let (tag1': bitstring,bitgx: bitstring) = m_1 in
        {28}if (tag1 = tag1') then
        {29}let gx: G = unbitG(bitgx) in
        {30}new y: exponent;
        {31}let gy: G = g(y) in
        {32}let k1: SymmetricKey = GtoSymK(exp(gx,y)) in
        {33}let m_2: bitstring = (tag2,bitG(gy),enc(sign((gy,gx),ska_1),k1)) in
        {34}out(c_1, m_2);
        {35}new pkce: bitstring;
        {36}new scope: bitstring;
        {37}let m_3: bitstring = enc((tag3,a_1,hash(pkce),scope),k1) in
        {38}event appSendsLastMessageToUser(m_1,m_2,m_3);
        {39}out(c_1, m_3);
        {40}in(c_1, m_8: bitstring);
        {41}let (tag8': bitstring,code: bitstring) = dec(m_8,k1) in
        {42}if (tag8 = tag8') then
        {43}new x: exponent;
        {44}let gx_1: G = g(x) in
        {45}let m_9: bitstring = (tag9,bitG(gx_1)) in
        {46}out(c_1, m_9);
        {47}in(c_1, m_10: bitstring);
        {48}let (tag10': bitstring,bit_gy: bitstring,enc_signature: bitstring) = m_10 in
        {49}if (tag10 = tag10') then
        {50}let gy_1: G = unbitG(bit_gy) in
        {51}let k3: SymmetricKey = GtoSymK(exp(gy_1,x)) in
        {52}if ((gy_1,gx_1) = check(dec(enc_signature,k3),pki)) then
        {53}new sks: SecretKey;
        {54}new jti: bitstring;
        {55}let T2: bitstring = (a_1,jti,code,pkce) in
        {56}let m_11: bitstring = enc((tag11,pk(sks),sign(T2,sks)),k3) in
        {57}event appSendsLastMessageToIssuer(m_9,m_10,m_11);
        {58}out(c_1, m_11);
        {59}in(c_1, m_12: bitstring);
        {60}out(c_1, check_reach_app);
        {61}let (tag12': bitstring,signed_M: bitstring) = dec(m_12,k3) in
        {62}if (tag12 = tag12') then
        {63}let M: bitstring = check(signed_M,pki) in
        {64}let (jtk: bitstring,jti': bitstring,scope': bitstring,a': bitstring,i': bitstring,u': bitstring) = M in
        {65}if (jtk = hash_pk(pk(sks))) then
        {66}if (jti = jti') then
        {67}if (scope = scope') then
        {68}if (a_1 = a') then
        {69}if (i_1 = i') then
        {70}if (u_1 = u') then
        {71}if talksOnlyToHonest then
        {72}out(c_1, check_reach_app);
        {73}event appCompletesProtocol(m_1,m_2,m_3,m_8,m_9,m_10,m_11,m_12);
        {74}out(ch(code), free_code)
    )
    else
        {75}if ((e1 ≠ u_1) && (e2 = i_1)) then
        (
            {76}in(c_1, pke1: PublicKey);
            {77}let talksOnlyToHonest_1: bool = false in
            {78}in(c_1, m: bitstring);
            {79}let (tag1'_1: bitstring,bitgx_1: bitstring) = m in
            {80}if (tag1 = tag1'_1) then
            {81}let gx_2: G = unbitG(bitgx_1) in
            {82}new y_1: exponent;
            {83}let gy_2: G = g(y_1) in
            {84}let k1_1: SymmetricKey = GtoSymK(exp(gx_2,y_1)) in
            {85}let m_4: bitstring = (tag2,bitG(gy_2),enc(sign((gy_2,gx_2),ska_1),k1_1)) in
            {86}out(c_1, m_4);
            {87}new pkce_1: bitstring;
            {88}new scope_1: bitstring;
            {89}let m_5: bitstring = enc((tag3,a_1,hash(pkce_1),scope_1),k1_1) in
            {90}event appSendsLastMessageToUser(m,m_4,m_5);
            {91}out(c_1, m_5);
            {92}in(c_1, m_6: bitstring);
            {93}let (tag8'_1: bitstring,code_1: bitstring) = dec(m_6,k1_1) in
            {94}if (tag8 = tag8'_1) then
            {95}new x_1: exponent;
            {96}let gx_3: G = g(x_1) in
            {97}let m_7: bitstring = (tag9,bitG(gx_3)) in
            {98}out(c_1, m_7);
            {99}in(c_1, m_13: bitstring);
            {100}let (tag10'_1: bitstring,bit_gy_1: bitstring,enc_signature_1: bitstring) = m_13 in
            {101}if (tag10 = tag10'_1) then
            {102}let gy_3: G = unbitG(bit_gy_1) in
            {103}let k3_1: SymmetricKey = GtoSymK(exp(gy_3,x_1)) in
            {104}if ((gy_3,gx_3) = check(dec(enc_signature_1,k3_1),pki)) then
            {105}new sks_1: SecretKey;
            {106}new jti_1: bitstring;
            {107}let T2_1: bitstring = (a_1,jti_1,code_1,pkce_1) in
            {108}let m_14: bitstring = enc((tag11,pk(sks_1),sign(T2_1,sks_1)),k3_1) in
            {109}event appSendsLastMessageToIssuer(m_7,m_13,m_14);
            {110}out(c_1, m_14);
            {111}in(c_1, m_15: bitstring);
            {112}out(c_1, check_reach_app);
            {113}let (tag12'_1: bitstring,signed_M_1: bitstring) = dec(m_15,k3_1) in
            {114}if (tag12 = tag12'_1) then
            {115}let M_1: bitstring = check(signed_M_1,pki) in
            {116}let (jtk_1: bitstring,jti'_1: bitstring,scope'_1: bitstring,a'_1: bitstring,i'_1: bitstring,u'_1: bitstring) = M_1 in
            {117}if (jtk_1 = hash_pk(pk(sks_1))) then
            {118}if (jti_1 = jti'_1) then
            {119}if (scope_1 = scope'_1) then
            {120}if (a_1 = a'_1) then
            {121}if (i_1 = i'_1) then
            {122}if (e1 = u'_1) then
            {123}if talksOnlyToHonest_1 then
            {124}out(c_1, check_reach_app);
            {125}event appCompletesProtocol(m,m_4,m_5,m_6,m_7,m_13,m_14,m_15);
            {126}out(ch(code_1), free_code)
        )
        else
            {127}if ((e1 = u_1) && (e2 ≠ i_1)) then
            (
                {128}in(c_1, pke2: PublicKey);
                {129}let talksOnlyToHonest_2: bool = false in
                {130}in(c_1, m_16: bitstring);
                {131}let (tag1'_2: bitstring,bitgx_2: bitstring) = m_16 in
                {132}if (tag1 = tag1'_2) then
                {133}let gx_4: G = unbitG(bitgx_2) in
                {134}new y_2: exponent;
                {135}let gy_4: G = g(y_2) in
                {136}let k1_2: SymmetricKey = GtoSymK(exp(gx_4,y_2)) in
                {137}let m_17: bitstring = (tag2,bitG(gy_4),enc(sign((gy_4,gx_4),ska_1),k1_2)) in
                {138}out(c_1, m_17);
                {139}new pkce_2: bitstring;
                {140}new scope_2: bitstring;
                {141}let m_18: bitstring = enc((tag3,a_1,hash(pkce_2),scope_2),k1_2) in
                {142}event appSendsLastMessageToUser(m_16,m_17,m_18);
                {143}out(c_1, m_18);
                {144}in(c_1, m_19: bitstring);
                {145}let (tag8'_2: bitstring,code_2: bitstring) = dec(m_19,k1_2) in
                {146}if (tag8 = tag8'_2) then
                {147}new x_2: exponent;
                {148}let gx_5: G = g(x_2) in
                {149}let m_20: bitstring = (tag9,bitG(gx_5)) in
                {150}out(c_1, m_20);
                {151}in(c_1, m_21: bitstring);
                {152}let (tag10'_2: bitstring,bit_gy_2: bitstring,enc_signature_2: bitstring) = m_21 in
                {153}if (tag10 = tag10'_2) then
                {154}let gy_5: G = unbitG(bit_gy_2) in
                {155}let k3_2: SymmetricKey = GtoSymK(exp(gy_5,x_2)) in
                {156}if ((gy_5,gx_5) = check(dec(enc_signature_2,k3_2),pke2)) then
                {157}new sks_2: SecretKey;
                {158}new jti_2: bitstring;
                {159}let T2_2: bitstring = (a_1,jti_2,code_2,pkce_2) in
                {160}let m_22: bitstring = enc((tag11,pk(sks_2),sign(T2_2,sks_2)),k3_2) in
                {161}event appSendsLastMessageToIssuer(m_20,m_21,m_22);
                {162}out(c_1, m_22);
                {163}in(c_1, m_23: bitstring);
                {164}out(c_1, check_reach_app);
                {165}let (tag12'_2: bitstring,signed_M_2: bitstring) = dec(m_23,k3_2) in
                {166}if (tag12 = tag12'_2) then
                {167}let M_2: bitstring = check(signed_M_2,pke2) in
                {168}let (jtk_2: bitstring,jti'_2: bitstring,scope'_2: bitstring,a'_2: bitstring,i'_2: bitstring,u'_2: bitstring) = M_2 in
                {169}if (jtk_2 = hash_pk(pk(sks_2))) then
                {170}if (jti_2 = jti'_2) then
                {171}if (scope_2 = scope'_2) then
                {172}if (a_1 = a'_2) then
                {173}if (e2 = i'_2) then
                {174}if (u_1 = u'_2) then
                {175}if talksOnlyToHonest_2 then
                {176}out(c_1, check_reach_app);
                {177}event appCompletesProtocol(m_16,m_17,m_18,m_19,m_20,m_21,m_22,m_23);
                {178}out(ch(code_2), free_code)
            )
            else
                {179}if ((e1 ≠ u_1) && (e2 ≠ i_1)) then
                {180}in(c_1, pke1_1: PublicKey);
                {181}in(c_1, pke2_1: PublicKey);
                {182}let talksOnlyToHonest_3: bool = false in
                {183}in(c_1, m_24: bitstring);
                {184}let (tag1'_3: bitstring,bitgx_3: bitstring) = m_24 in
                {185}if (tag1 = tag1'_3) then
                {186}let gx_6: G = unbitG(bitgx_3) in
                {187}new y_3: exponent;
                {188}let gy_6: G = g(y_3) in
                {189}let k1_3: SymmetricKey = GtoSymK(exp(gx_6,y_3)) in
                {190}let m_25: bitstring = (tag2,bitG(gy_6),enc(sign((gy_6,gx_6),ska_1),k1_3)) in
                {191}out(c_1, m_25);
                {192}new pkce_3: bitstring;
                {193}new scope_3: bitstring;
                {194}let m_26: bitstring = enc((tag3,a_1,hash(pkce_3),scope_3),k1_3) in
                {195}event appSendsLastMessageToUser(m_24,m_25,m_26);
                {196}out(c_1, m_26);
                {197}in(c_1, m_27: bitstring);
                {198}let (tag8'_3: bitstring,code_3: bitstring) = dec(m_27,k1_3) in
                {199}if (tag8 = tag8'_3) then
                {200}new x_3: exponent;
                {201}let gx_7: G = g(x_3) in
                {202}let m_28: bitstring = (tag9,bitG(gx_7)) in
                {203}out(c_1, m_28);
                {204}in(c_1, m_29: bitstring);
                {205}let (tag10'_3: bitstring,bit_gy_3: bitstring,enc_signature_3: bitstring) = m_29 in
                {206}if (tag10 = tag10'_3) then
                {207}let gy_7: G = unbitG(bit_gy_3) in
                {208}let k3_3: SymmetricKey = GtoSymK(exp(gy_7,x_3)) in
                {209}if ((gy_7,gx_7) = check(dec(enc_signature_3,k3_3),pke2_1)) then
                {210}new sks_3: SecretKey;
                {211}new jti_3: bitstring;
                {212}let T2_3: bitstring = (a_1,jti_3,code_3,pkce_3) in
                {213}let m_30: bitstring = enc((tag11,pk(sks_3),sign(T2_3,sks_3)),k3_3) in
                {214}event appSendsLastMessageToIssuer(m_28,m_29,m_30);
                {215}out(c_1, m_30);
                {216}in(c_1, m_31: bitstring);
                {217}out(c_1, check_reach_app);
                {218}let (tag12'_3: bitstring,signed_M_3: bitstring) = dec(m_31,k3_3) in
                {219}if (tag12 = tag12'_3) then
                {220}let M_3: bitstring = check(signed_M_3,pke2_1) in
                {221}let (jtk_3: bitstring,jti'_3: bitstring,scope'_3: bitstring,a'_3: bitstring,i'_3: bitstring,u'_3: bitstring) = M_3 in
                {222}if (jtk_3 = hash_pk(pk(sks_3))) then
                {223}if (jti_3 = jti'_3) then
                {224}if (scope_3 = scope'_3) then
                {225}if (a_1 = a'_3) then
                {226}if (e2 = i'_3) then
                {227}if (e1 = u'_3) then
                {228}if talksOnlyToHonest_3 then
                {229}out(c_1, check_reach_app);
                {230}event appCompletesProtocol(m_24,m_25,m_26,m_27,m_28,m_29,m_30,m_31);
                {231}out(ch(code_3), free_code)
) | (
    {232}!
    {233}let c_2: channel = c in
    {234}let u_2: bitstring = u in
    {235}let sku_1: SecretKey = sku in
    {236}let a_2: bitstring = a in
    {237}let pka: PublicKey = pk(ska) in
    {238}let i_2: bitstring = i in
    {239}let pki_1: PublicKey = pk(ski) in
    {240}let password_1: bitstring = password in
    {241}in(c_2, e1_1: bitstring);
    {242}in(c_2, e2_1: bitstring);
    {243}if ((e1_1 = a_2) && (e2_1 = i_2)) then
    (
        {244}let talksOnlyToHonest_4: bool = true in
        {245}new x_4: exponent;
        {246}let gx_8: G = g(x_4) in
        {247}let m_32: bitstring = (tag1,bitG(gx_8)) in
        {248}out(c_2, m_32);
        {249}in(c_2, m_33: bitstring);
        {250}let (tag2': bitstring,bit_gy_4: bitstring,enc_signature_4: bitstring) = m_33 in
        {251}if (tag2 = tag2') then
        {252}let gy_8: G = unbitG(bit_gy_4) in
        {253}let k1_4: SymmetricKey = GtoSymK(exp(gy_8,x_4)) in
        {254}if ((gy_8,gx_8) = check(dec(enc_signature_4,k1_4),pka)) then
        {255}in(c_2, m_34: bitstring);
        {256}let (tag3': bitstring,a'_4: bitstring,h_pkce: bitstring,scope_4: bitstring) = dec(m_34,k1_4) in
        {257}if (tag3 = tag3') then
        {258}if (a_2 = a'_4) then
        {259}new x_5: exponent;
        {260}let gx_9: G = g(x_5) in
        {261}let m_35: bitstring = (tag4,bitG(gx_9)) in
        {262}out(c_2, m_35);
        {263}in(c_2, m_36: bitstring);
        {264}let (tag5': bitstring,bit_gy_5: bitstring,enc_signature_5: bitstring) = m_36 in
        {265}if (tag5 = tag5') then
        {266}let gy_9: G = unbitG(bit_gy_5) in
        {267}let k2: SymmetricKey = GtoSymK(exp(gy_9,x_5)) in
        {268}if ((gy_9,gx_9) = check(dec(enc_signature_5,k2),pki_1)) then
        {269}let m_37: bitstring = enc((tag6,a_2,h_pkce,scope_4,u_2,password_1),k2) in
        {270}event userSendsLastMessageToIssuer(m_35,m_36,m_37);
        {271}out(c_2, m_37);
        {272}in(c_2, m_38: bitstring);
        {273}let (tag7': bitstring,code_4: bitstring) = dec(m_38,k2) in
        {274}if (tag7 = tag7') then
        {275}let m_39: bitstring = enc((tag8,code_4),k1_4) in
        {276}event userSendsLastMessageToApp(m_32,m_33,m_34,m_39);
        {277}out(c_2, m_39);
        {278}if talksOnlyToHonest_4 then
        {279}out(c_2, check_reach_user);
        {280}event userCompletesProtocol(m_32,m_33,m_34,m_35,m_36,m_37,m_38);
        {281}out(ch(code_4), free_code);
        {282}out(ch(password_1), free_password)
    )
    else
        {283}if ((e1_1 ≠ a_2) && (e2_1 = i_2)) then
        (
            {284}in(c_2, pke1_2: PublicKey);
            {285}let talksOnlyToHonest_5: bool = false in
            {286}new x_6: exponent;
            {287}let gx_10: G = g(x_6) in
            {288}let m_40: bitstring = (tag1,bitG(gx_10)) in
            {289}out(c_2, m_40);
            {290}in(c_2, m_41: bitstring);
            {291}let (tag2'_1: bitstring,bit_gy_6: bitstring,enc_signature_6: bitstring) = m_41 in
            {292}if (tag2 = tag2'_1) then
            {293}let gy_10: G = unbitG(bit_gy_6) in
            {294}let k1_5: SymmetricKey = GtoSymK(exp(gy_10,x_6)) in
            {295}if ((gy_10,gx_10) = check(dec(enc_signature_6,k1_5),pke1_2)) then
            {296}in(c_2, m_42: bitstring);
            {297}let (tag3'_1: bitstring,a'_5: bitstring,h_pkce_1: bitstring,scope_5: bitstring) = dec(m_42,k1_5) in
            {298}if (tag3 = tag3'_1) then
            {299}if (e1_1 = a'_5) then
            {300}new x_7: exponent;
            {301}let gx_11: G = g(x_7) in
            {302}let m_43: bitstring = (tag4,bitG(gx_11)) in
            {303}out(c_2, m_43);
            {304}in(c_2, m_44: bitstring);
            {305}let (tag5'_1: bitstring,bit_gy_7: bitstring,enc_signature_7: bitstring) = m_44 in
            {306}if (tag5 = tag5'_1) then
            {307}let gy_11: G = unbitG(bit_gy_7) in
            {308}let k2_1: SymmetricKey = GtoSymK(exp(gy_11,x_7)) in
            {309}if ((gy_11,gx_11) = check(dec(enc_signature_7,k2_1),pki_1)) then
            {310}let m_45: bitstring = enc((tag6,e1_1,h_pkce_1,scope_5,u_2,password_1),k2_1) in
            {311}event userSendsLastMessageToIssuer(m_43,m_44,m_45);
            {312}out(c_2, m_45);
            {313}in(c_2, m_46: bitstring);
            {314}let (tag7'_1: bitstring,code_5: bitstring) = dec(m_46,k2_1) in
            {315}if (tag7 = tag7'_1) then
            {316}let m_47: bitstring = enc((tag8,code_5),k1_5) in
            {317}event userSendsLastMessageToApp(m_40,m_41,m_42,m_47);
            {318}out(c_2, m_47);
            {319}if talksOnlyToHonest_5 then
            {320}out(c_2, check_reach_user);
            {321}event userCompletesProtocol(m_40,m_41,m_42,m_43,m_44,m_45,m_46);
            {322}out(ch(code_5), free_code);
            {323}out(ch(password_1), free_password)
        )
        else
            {324}if ((e1_1 = a_2) && (e2_1 ≠ i_2)) then
            (
                {325}in(c_2, pke2_2: PublicKey);
                {326}in(c_2, wrong_pw: bitstring);
                {327}let talksOnlyToHonest_6: bool = false in
                {328}new x_8: exponent;
                {329}let gx_12: G = g(x_8) in
                {330}let m_48: bitstring = (tag1,bitG(gx_12)) in
                {331}out(c_2, m_48);
                {332}in(c_2, m_49: bitstring);
                {333}let (tag2'_2: bitstring,bit_gy_8: bitstring,enc_signature_8: bitstring) = m_49 in
                {334}if (tag2 = tag2'_2) then
                {335}let gy_12: G = unbitG(bit_gy_8) in
                {336}let k1_6: SymmetricKey = GtoSymK(exp(gy_12,x_8)) in
                {337}if ((gy_12,gx_12) = check(dec(enc_signature_8,k1_6),pka)) then
                {338}in(c_2, m_50: bitstring);
                {339}let (tag3'_2: bitstring,a'_6: bitstring,h_pkce_2: bitstring,scope_6: bitstring) = dec(m_50,k1_6) in
                {340}if (tag3 = tag3'_2) then
                {341}if (a_2 = a'_6) then
                {342}new x_9: exponent;
                {343}let gx_13: G = g(x_9) in
                {344}let m_51: bitstring = (tag4,bitG(gx_13)) in
                {345}out(c_2, m_51);
                {346}in(c_2, m_52: bitstring);
                {347}let (tag5'_2: bitstring,bit_gy_9: bitstring,enc_signature_9: bitstring) = m_52 in
                {348}if (tag5 = tag5'_2) then
                {349}let gy_13: G = unbitG(bit_gy_9) in
                {350}let k2_2: SymmetricKey = GtoSymK(exp(gy_13,x_9)) in
                {351}if ((gy_13,gx_13) = check(dec(enc_signature_9,k2_2),pke2_2)) then
                {352}let m_53: bitstring = enc((tag6,a_2,h_pkce_2,scope_6,u_2,wrong_pw),k2_2) in
                {353}event userSendsLastMessageToIssuer(m_51,m_52,m_53);
                {354}out(c_2, m_53);
                {355}in(c_2, m_54: bitstring);
                {356}let (tag7'_2: bitstring,code_6: bitstring) = dec(m_54,k2_2) in
                {357}if (tag7 = tag7'_2) then
                {358}let m_55: bitstring = enc((tag8,code_6),k1_6) in
                {359}event userSendsLastMessageToApp(m_48,m_49,m_50,m_55);
                {360}out(c_2, m_55);
                {361}if talksOnlyToHonest_6 then
                {362}out(c_2, check_reach_user);
                {363}event userCompletesProtocol(m_48,m_49,m_50,m_51,m_52,m_53,m_54);
                {364}out(ch(code_6), free_code);
                {365}out(ch(wrong_pw), free_password)
            )
            else
                {366}if ((e1_1 ≠ a_2) && (e2_1 ≠ i_2)) then
                {367}in(c_2, pke1_3: PublicKey);
                {368}in(c_2, pke2_3: PublicKey);
                {369}in(c_2, wrong_pw_1: bitstring);
                {370}let talksOnlyToHonest_7: bool = false in
                {371}new x_10: exponent;
                {372}let gx_14: G = g(x_10) in
                {373}let m_56: bitstring = (tag1,bitG(gx_14)) in
                {374}out(c_2, m_56);
                {375}in(c_2, m_57: bitstring);
                {376}let (tag2'_3: bitstring,bit_gy_10: bitstring,enc_signature_10: bitstring) = m_57 in
                {377}if (tag2 = tag2'_3) then
                {378}let gy_14: G = unbitG(bit_gy_10) in
                {379}let k1_7: SymmetricKey = GtoSymK(exp(gy_14,x_10)) in
                {380}if ((gy_14,gx_14) = check(dec(enc_signature_10,k1_7),pke1_3)) then
                {381}in(c_2, m_58: bitstring);
                {382}let (tag3'_3: bitstring,a'_7: bitstring,h_pkce_3: bitstring,scope_7: bitstring) = dec(m_58,k1_7) in
                {383}if (tag3 = tag3'_3) then
                {384}if (e1_1 = a'_7) then
                {385}new x_11: exponent;
                {386}let gx_15: G = g(x_11) in
                {387}let m_59: bitstring = (tag4,bitG(gx_15)) in
                {388}out(c_2, m_59);
                {389}in(c_2, m_60: bitstring);
                {390}let (tag5'_3: bitstring,bit_gy_11: bitstring,enc_signature_11: bitstring) = m_60 in
                {391}if (tag5 = tag5'_3) then
                {392}let gy_15: G = unbitG(bit_gy_11) in
                {393}let k2_3: SymmetricKey = GtoSymK(exp(gy_15,x_11)) in
                {394}if ((gy_15,gx_15) = check(dec(enc_signature_11,k2_3),pke2_3)) then
                {395}let m_61: bitstring = enc((tag6,e1_1,h_pkce_3,scope_7,u_2,wrong_pw_1),k2_3) in
                {396}event userSendsLastMessageToIssuer(m_59,m_60,m_61);
                {397}out(c_2, m_61);
                {398}in(c_2, m_62: bitstring);
                {399}let (tag7'_3: bitstring,code_7: bitstring) = dec(m_62,k2_3) in
                {400}if (tag7 = tag7'_3) then
                {401}let m_63: bitstring = enc((tag8,code_7),k1_7) in
                {402}event userSendsLastMessageToApp(m_56,m_57,m_58,m_63);
                {403}out(c_2, m_63);
                {404}if talksOnlyToHonest_7 then
                {405}out(c_2, check_reach_user);
                {406}event userCompletesProtocol(m_56,m_57,m_58,m_59,m_60,m_61,m_62);
                {407}out(ch(code_7), free_code);
                {408}out(ch(wrong_pw_1), free_password)
) | (
    {409}!
    {410}let c_3: channel = c in
    {411}let i_3: bitstring = i in
    {412}let ski_1: SecretKey = ski in
    {413}let a_3: bitstring = a in
    {414}let pka_1: PublicKey = pk(ska) in
    {415}let u_3: bitstring = u in
    {416}let pku_1: PublicKey = pk(sku) in
    {417}let password_2: bitstring = password in
    {418}in(c_3, e1_2: bitstring);
    {419}in(c_3, e2_2: bitstring);
    {420}if ((e1_2 = a_3) && (e2_2 = u_3)) then
    (
        {421}let talksOnlyToHonest_8: bool = true in
        {422}in(c_3, m_64: bitstring);
        {423}let (tag4': bitstring,bitgx_4: bitstring) = m_64 in
        {424}if (tag4 = tag4') then
        {425}let gx_16: G = unbitG(bitgx_4) in
        {426}new y_4: exponent;
        {427}let gy_16: G = g(y_4) in
        {428}let k2_4: SymmetricKey = GtoSymK(exp(gx_16,y_4)) in
        {429}let m_65: bitstring = (tag5,bitG(gy_16),enc(sign((gy_16,gx_16),ski_1),k2_4)) in
        {430}out(c_3, m_65);
        {431}in(c_3, m_66: bitstring);
        {432}let (tag6': bitstring,a'_8: bitstring,h_pkce_4: bitstring,scope_8: bitstring,u'_4: bitstring,password': bitstring) = dec(m_66,k2_4) in
        {433}if (tag6 = tag6') then
        {434}if (a_3 = a'_8) then
        {435}if (u_3 = u'_4) then
        {436}if (password_2 = password') then
        {437}new code_8: bitstring;
        {438}let m_67: bitstring = enc((tag7,code_8),k2_4) in
        {439}event issuerSendsLastMessageToUser(m_64,m_65,m_66,m_67);
        {440}out(c_3, m_67);
        {441}in(c_3, m_68: bitstring);
        {442}let (tag9': bitstring,bitgx_5: bitstring) = m_68 in
        {443}if (tag9 = tag9') then
        {444}let gx_17: G = unbitG(bitgx_5) in
        {445}new y_5: exponent;
        {446}let gy_17: G = g(y_5) in
        {447}let k3_4: SymmetricKey = GtoSymK(exp(gx_17,y_5)) in
        {448}let m_69: bitstring = (tag10,bitG(gy_17),enc(sign((gy_17,gx_17),ski_1),k3_4)) in
        {449}out(c_3, m_69);
        {450}in(c_3, m_70: bitstring);
        {451}let (tag11': bitstring,pksks: PublicKey,signature: bitstring) = dec(m_70,k3_4) in
        {452}if (tag11 = tag11') then
        {453}let (a'': bitstring,jti_4: bitstring,code': bitstring,pkce_4: bitstring) = check(signature,pksks) in
        {454}if (a_3 = a'') then
        {455}if (code_8 = code') then
        {456}if (h_pkce_4 = hash(pkce_4)) then
        {457}let jtk_4: bitstring = hash_pk(pksks) in
        {458}let M_4: bitstring = (jtk_4,jti_4,scope_8,a_3,i_3,u_3) in
        {459}let m_71: bitstring = enc((tag12,sign(M_4,ski_1)),k3_4) in
        {460}event issuerSendsLastMessageToApp(m_68,m_69,m_70,m_71);
        {461}out(c_3, m_71);
        {462}if talksOnlyToHonest_8 then
        {463}out(c_3, check_reach_issuer);
        {464}event issuerCompletesProtocol(m_64,m_65,m_66,m_68,m_69,m_70);
        {465}out(ch(code_8), free_code);
        {466}out(ch(password_2), free_password)
    )
    else
        {467}if ((e1_2 ≠ a_3) && (e2_2 = u_3)) then
        (
            {468}in(c_3, pke1_4: PublicKey);
            {469}let talksOnlyToHonest_9: bool = false in
            {470}in(c_3, m_72: bitstring);
            {471}let (tag4'_1: bitstring,bitgx_6: bitstring) = m_72 in
            {472}if (tag4 = tag4'_1) then
            {473}let gx_18: G = unbitG(bitgx_6) in
            {474}new y_6: exponent;
            {475}let gy_18: G = g(y_6) in
            {476}let k2_5: SymmetricKey = GtoSymK(exp(gx_18,y_6)) in
            {477}let m_73: bitstring = (tag5,bitG(gy_18),enc(sign((gy_18,gx_18),ski_1),k2_5)) in
            {478}out(c_3, m_73);
            {479}in(c_3, m_74: bitstring);
            {480}let (tag6'_1: bitstring,a'_9: bitstring,h_pkce_5: bitstring,scope_9: bitstring,u'_5: bitstring,password'_1: bitstring) = dec(m_74,k2_5) in
            {481}if (tag6 = tag6'_1) then
            {482}if (e1_2 = a'_9) then
            {483}if (u_3 = u'_5) then
            {484}if (password_2 = password'_1) then
            {485}new code_9: bitstring;
            {486}let m_75: bitstring = enc((tag7,code_9),k2_5) in
            {487}event issuerSendsLastMessageToUser(m_72,m_73,m_74,m_75);
            {488}out(c_3, m_75);
            {489}in(c_3, m_76: bitstring);
            {490}let (tag9'_1: bitstring,bitgx_7: bitstring) = m_76 in
            {491}if (tag9 = tag9'_1) then
            {492}let gx_19: G = unbitG(bitgx_7) in
            {493}new y_7: exponent;
            {494}let gy_19: G = g(y_7) in
            {495}let k3_5: SymmetricKey = GtoSymK(exp(gx_19,y_7)) in
            {496}let m_77: bitstring = (tag10,bitG(gy_19),enc(sign((gy_19,gx_19),ski_1),k3_5)) in
            {497}out(c_3, m_77);
            {498}in(c_3, m_78: bitstring);
            {499}let (tag11'_1: bitstring,pksks_1: PublicKey,signature_1: bitstring) = dec(m_78,k3_5) in
            {500}if (tag11 = tag11'_1) then
            {501}let (a''_1: bitstring,jti_5: bitstring,code'_1: bitstring,pkce_5: bitstring) = check(signature_1,pksks_1) in
            {502}if (e1_2 = a''_1) then
            {503}if (code_9 = code'_1) then
            {504}if (h_pkce_5 = hash(pkce_5)) then
            {505}let jtk_5: bitstring = hash_pk(pksks_1) in
            {506}let M_5: bitstring = (jtk_5,jti_5,scope_9,e1_2,i_3,u_3) in
            {507}let m_79: bitstring = enc((tag12,sign(M_5,ski_1)),k3_5) in
            {508}event issuerSendsLastMessageToApp(m_76,m_77,m_78,m_79);
            {509}out(c_3, m_79);
            {510}if talksOnlyToHonest_9 then
            {511}out(c_3, check_reach_issuer);
            {512}event issuerCompletesProtocol(m_72,m_73,m_74,m_76,m_77,m_78);
            {513}out(ch(code_9), free_code);
            {514}out(ch(password_2), free_password)
        )
        else
            {515}if ((e1_2 = a_3) && (e2_2 ≠ u_3)) then
            (
                {516}in(c_3, pke2_4: PublicKey);
                {517}in(c_3, wrong_pw_2: bitstring);
                {518}let talksOnlyToHonest_10: bool = false in
                {519}in(c_3, m_80: bitstring);
                {520}let (tag4'_2: bitstring,bitgx_8: bitstring) = m_80 in
                {521}if (tag4 = tag4'_2) then
                {522}let gx_20: G = unbitG(bitgx_8) in
                {523}new y_8: exponent;
                {524}let gy_20: G = g(y_8) in
                {525}let k2_6: SymmetricKey = GtoSymK(exp(gx_20,y_8)) in
                {526}let m_81: bitstring = (tag5,bitG(gy_20),enc(sign((gy_20,gx_20),ski_1),k2_6)) in
                {527}out(c_3, m_81);
                {528}in(c_3, m_82: bitstring);
                {529}let (tag6'_2: bitstring,a'_10: bitstring,h_pkce_6: bitstring,scope_10: bitstring,u'_6: bitstring,password'_2: bitstring) = dec(m_82,k2_6) in
                {530}if (tag6 = tag6'_2) then
                {531}if (a_3 = a'_10) then
                {532}if (e2_2 = u'_6) then
                {533}if (wrong_pw_2 = password'_2) then
                {534}new code_10: bitstring;
                {535}let m_83: bitstring = enc((tag7,code_10),k2_6) in
                {536}event issuerSendsLastMessageToUser(m_80,m_81,m_82,m_83);
                {537}out(c_3, m_83);
                {538}in(c_3, m_84: bitstring);
                {539}let (tag9'_2: bitstring,bitgx_9: bitstring) = m_84 in
                {540}if (tag9 = tag9'_2) then
                {541}let gx_21: G = unbitG(bitgx_9) in
                {542}new y_9: exponent;
                {543}let gy_21: G = g(y_9) in
                {544}let k3_6: SymmetricKey = GtoSymK(exp(gx_21,y_9)) in
                {545}let m_85: bitstring = (tag10,bitG(gy_21),enc(sign((gy_21,gx_21),ski_1),k3_6)) in
                {546}out(c_3, m_85);
                {547}in(c_3, m_86: bitstring);
                {548}let (tag11'_2: bitstring,pksks_2: PublicKey,signature_2: bitstring) = dec(m_86,k3_6) in
                {549}if (tag11 = tag11'_2) then
                {550}let (a''_2: bitstring,jti_6: bitstring,code'_2: bitstring,pkce_6: bitstring) = check(signature_2,pksks_2) in
                {551}if (a_3 = a''_2) then
                {552}if (code_10 = code'_2) then
                {553}if (h_pkce_6 = hash(pkce_6)) then
                {554}let jtk_6: bitstring = hash_pk(pksks_2) in
                {555}let M_6: bitstring = (jtk_6,jti_6,scope_10,a_3,i_3,e2_2) in
                {556}let m_87: bitstring = enc((tag12,sign(M_6,ski_1)),k3_6) in
                {557}event issuerSendsLastMessageToApp(m_84,m_85,m_86,m_87);
                {558}out(c_3, m_87);
                {559}if talksOnlyToHonest_10 then
                {560}out(c_3, check_reach_issuer);
                {561}event issuerCompletesProtocol(m_80,m_81,m_82,m_84,m_85,m_86);
                {562}out(ch(code_10), free_code);
                {563}out(ch(wrong_pw_2), free_password)
            )
            else
                {564}if ((e1_2 ≠ a_3) && (e2_2 ≠ u_3)) then
                {565}in(c_3, pke1_5: PublicKey);
                {566}in(c_3, pke2_5: PublicKey);
                {567}in(c_3, wrong_pw_3: bitstring);
                {568}let talksOnlyToHonest_11: bool = false in
                {569}in(c_3, m_88: bitstring);
                {570}let (tag4'_3: bitstring,bitgx_10: bitstring) = m_88 in
                {571}if (tag4 = tag4'_3) then
                {572}let gx_22: G = unbitG(bitgx_10) in
                {573}new y_10: exponent;
                {574}let gy_22: G = g(y_10) in
                {575}let k2_7: SymmetricKey = GtoSymK(exp(gx_22,y_10)) in
                {576}let m_89: bitstring = (tag5,bitG(gy_22),enc(sign((gy_22,gx_22),ski_1),k2_7)) in
                {577}out(c_3, m_89);
                {578}in(c_3, m_90: bitstring);
                {579}let (tag6'_3: bitstring,a'_11: bitstring,h_pkce_7: bitstring,scope_11: bitstring,u'_7: bitstring,password'_3: bitstring) = dec(m_90,k2_7) in
                {580}if (tag6 = tag6'_3) then
                {581}if (e1_2 = a'_11) then
                {582}if (e2_2 = u'_7) then
                {583}if (wrong_pw_3 = password'_3) then
                {584}new code_11: bitstring;
                {585}let m_91: bitstring = enc((tag7,code_11),k2_7) in
                {586}event issuerSendsLastMessageToUser(m_88,m_89,m_90,m_91);
                {587}out(c_3, m_91);
                {588}in(c_3, m_92: bitstring);
                {589}let (tag9'_3: bitstring,bitgx_11: bitstring) = m_92 in
                {590}if (tag9 = tag9'_3) then
                {591}let gx_23: G = unbitG(bitgx_11) in
                {592}new y_11: exponent;
                {593}let gy_23: G = g(y_11) in
                {594}let k3_7: SymmetricKey = GtoSymK(exp(gx_23,y_11)) in
                {595}let m_93: bitstring = (tag10,bitG(gy_23),enc(sign((gy_23,gx_23),ski_1),k3_7)) in
                {596}out(c_3, m_93);
                {597}in(c_3, m_94: bitstring);
                {598}let (tag11'_3: bitstring,pksks_3: PublicKey,signature_3: bitstring) = dec(m_94,k3_7) in
                {599}if (tag11 = tag11'_3) then
                {600}let (a''_3: bitstring,jti_7: bitstring,code'_3: bitstring,pkce_7: bitstring) = check(signature_3,pksks_3) in
                {601}if (e1_2 = a''_3) then
                {602}if (code_11 = code'_3) then
                {603}if (h_pkce_7 = hash(pkce_7)) then
                {604}let jtk_7: bitstring = hash_pk(pksks_3) in
                {605}let M_7: bitstring = (jtk_7,jti_7,scope_11,e1_2,i_3,e2_2) in
                {606}let m_95: bitstring = enc((tag12,sign(M_7,ski_1)),k3_7) in
                {607}event issuerSendsLastMessageToApp(m_92,m_93,m_94,m_95);
                {608}out(c_3, m_95);
                {609}if talksOnlyToHonest_11 then
                {610}out(c_3, check_reach_issuer);
                {611}event issuerCompletesProtocol(m_88,m_89,m_90,m_92,m_93,m_94);
                {612}out(ch(code_11), free_code);
                {613}out(ch(wrong_pw_3), free_password)
)

--  Process 1 (that is, process 0, with let moved downwards):
{1}new a: bitstring;
{2}new u: bitstring;
{3}new i: bitstring;
{4}out(c, a);
{5}out(c, u);
{6}out(c, i);
{7}new ska: SecretKey;
{8}new sku: SecretKey;
{9}new ski: SecretKey;
{10}out(c, pk(ska));
{11}out(c, pk(sku));
{12}out(c, pk(ski));
{13}new password: bitstring;
(
    {14}!
    {15}let c_1: channel = c in
    {22}in(c_1, e1: bitstring);
    {23}in(c_1, e2: bitstring);
    {21}let pki: PublicKey = pk(ski) in
    {20}let i_1: bitstring = i in
    {18}let u_1: bitstring = u in
    {17}let ska_1: SecretKey = ska in
    {16}let a_1: bitstring = a in
    {24}if ((e1 = u_1) && (e2 = i_1)) then
    (
        {26}in(c_1, m_1: bitstring);
        {27}let (tag1': bitstring,bitgx: bitstring) = m_1 in
        {28}if (tag1 = tag1') then
        {29}let gx: G = unbitG(bitgx) in
        {30}new y: exponent;
        {32}let k1: SymmetricKey = GtoSymK(exp(gx,y)) in
        {31}let gy: G = g(y) in
        {33}let m_2: bitstring = (tag2,bitG(gy),enc(sign((gy,gx),ska_1),k1)) in
        {34}out(c_1, m_2);
        {35}new pkce: bitstring;
        {36}new scope: bitstring;
        {37}let m_3: bitstring = enc((tag3,a_1,hash(pkce),scope),k1) in
        {38}event appSendsLastMessageToUser(m_1,m_2,m_3);
        {39}out(c_1, m_3);
        {40}in(c_1, m_8: bitstring);
        {41}let (tag8': bitstring,code: bitstring) = dec(m_8,k1) in
        {42}if (tag8 = tag8') then
        {43}new x: exponent;
        {44}let gx_1: G = g(x) in
        {45}let m_9: bitstring = (tag9,bitG(gx_1)) in
        {46}out(c_1, m_9);
        {47}in(c_1, m_10: bitstring);
        {48}let (tag10': bitstring,bit_gy: bitstring,enc_signature: bitstring) = m_10 in
        {49}if (tag10 = tag10') then
        {50}let gy_1: G = unbitG(bit_gy) in
        {51}let k3: SymmetricKey = GtoSymK(exp(gy_1,x)) in
        {52}if ((gy_1,gx_1) = check(dec(enc_signature,k3),pki)) then
        {53}new sks: SecretKey;
        {54}new jti: bitstring;
        {55}let T2: bitstring = (a_1,jti,code,pkce) in
        {56}let m_11: bitstring = enc((tag11,pk(sks),sign(T2,sks)),k3) in
        {57}event appSendsLastMessageToIssuer(m_9,m_10,m_11);
        {58}out(c_1, m_11);
        {59}in(c_1, m_12: bitstring);
        {60}out(c_1, check_reach_app);
        {61}let (tag12': bitstring,signed_M: bitstring) = dec(m_12,k3) in
        {62}if (tag12 = tag12') then
        {63}let M: bitstring = check(signed_M,pki) in
        {64}let (jtk: bitstring,jti': bitstring,scope': bitstring,a': bitstring,i': bitstring,u': bitstring) = M in
        {65}if (jtk = hash_pk(pk(sks))) then
        {66}if (jti = jti') then
        {67}if (scope = scope') then
        {68}if (a_1 = a') then
        {69}if (i_1 = i') then
        {70}if (u_1 = u') then
        {25}let talksOnlyToHonest: bool = true in
        {71}if talksOnlyToHonest then
        {72}out(c_1, check_reach_app);
        {73}event appCompletesProtocol(m_1,m_2,m_3,m_8,m_9,m_10,m_11,m_12);
        {74}out(ch(code), free_code)
    )
    else
        {75}if ((e1 ≠ u_1) && (e2 = i_1)) then
        (
            {76}in(c_1, pke1: PublicKey);
            {78}in(c_1, m: bitstring);
            {79}let (tag1'_1: bitstring,bitgx_1: bitstring) = m in
            {80}if (tag1 = tag1'_1) then
            {81}let gx_2: G = unbitG(bitgx_1) in
            {82}new y_1: exponent;
            {84}let k1_1: SymmetricKey = GtoSymK(exp(gx_2,y_1)) in
            {83}let gy_2: G = g(y_1) in
            {85}let m_4: bitstring = (tag2,bitG(gy_2),enc(sign((gy_2,gx_2),ska_1),k1_1)) in
            {86}out(c_1, m_4);
            {87}new pkce_1: bitstring;
            {88}new scope_1: bitstring;
            {89}let m_5: bitstring = enc((tag3,a_1,hash(pkce_1),scope_1),k1_1) in
            {90}event appSendsLastMessageToUser(m,m_4,m_5);
            {91}out(c_1, m_5);
            {92}in(c_1, m_6: bitstring);
            {93}let (tag8'_1: bitstring,code_1: bitstring) = dec(m_6,k1_1) in
            {94}if (tag8 = tag8'_1) then
            {95}new x_1: exponent;
            {96}let gx_3: G = g(x_1) in
            {97}let m_7: bitstring = (tag9,bitG(gx_3)) in
            {98}out(c_1, m_7);
            {99}in(c_1, m_13: bitstring);
            {100}let (tag10'_1: bitstring,bit_gy_1: bitstring,enc_signature_1: bitstring) = m_13 in
            {101}if (tag10 = tag10'_1) then
            {102}let gy_3: G = unbitG(bit_gy_1) in
            {103}let k3_1: SymmetricKey = GtoSymK(exp(gy_3,x_1)) in
            {104}if ((gy_3,gx_3) = check(dec(enc_signature_1,k3_1),pki)) then
            {105}new sks_1: SecretKey;
            {106}new jti_1: bitstring;
            {107}let T2_1: bitstring = (a_1,jti_1,code_1,pkce_1) in
            {108}let m_14: bitstring = enc((tag11,pk(sks_1),sign(T2_1,sks_1)),k3_1) in
            {109}event appSendsLastMessageToIssuer(m_7,m_13,m_14);
            {110}out(c_1, m_14);
            {111}in(c_1, m_15: bitstring);
            {112}out(c_1, check_reach_app);
            {113}let (tag12'_1: bitstring,signed_M_1: bitstring) = dec(m_15,k3_1) in
            {114}if (tag12 = tag12'_1) then
            {115}let M_1: bitstring = check(signed_M_1,pki) in
            {116}let (jtk_1: bitstring,jti'_1: bitstring,scope'_1: bitstring,a'_1: bitstring,i'_1: bitstring,u'_1: bitstring) = M_1 in
            {117}if (jtk_1 = hash_pk(pk(sks_1))) then
            {118}if (jti_1 = jti'_1) then
            {119}if (scope_1 = scope'_1) then
            {120}if (a_1 = a'_1) then
            {121}if (i_1 = i'_1) then
            {122}if (e1 = u'_1) then
            {77}let talksOnlyToHonest_1: bool = false in
            {123}if talksOnlyToHonest_1 then
            {124}out(c_1, check_reach_app);
            {125}event appCompletesProtocol(m,m_4,m_5,m_6,m_7,m_13,m_14,m_15);
            {126}out(ch(code_1), free_code)
        )
        else
            {127}if ((e1 = u_1) && (e2 ≠ i_1)) then
            (
                {128}in(c_1, pke2: PublicKey);
                {130}in(c_1, m_16: bitstring);
                {131}let (tag1'_2: bitstring,bitgx_2: bitstring) = m_16 in
                {132}if (tag1 = tag1'_2) then
                {133}let gx_4: G = unbitG(bitgx_2) in
                {134}new y_2: exponent;
                {136}let k1_2: SymmetricKey = GtoSymK(exp(gx_4,y_2)) in
                {135}let gy_4: G = g(y_2) in
                {137}let m_17: bitstring = (tag2,bitG(gy_4),enc(sign((gy_4,gx_4),ska_1),k1_2)) in
                {138}out(c_1, m_17);
                {139}new pkce_2: bitstring;
                {140}new scope_2: bitstring;
                {141}let m_18: bitstring = enc((tag3,a_1,hash(pkce_2),scope_2),k1_2) in
                {142}event appSendsLastMessageToUser(m_16,m_17,m_18);
                {143}out(c_1, m_18);
                {144}in(c_1, m_19: bitstring);
                {145}let (tag8'_2: bitstring,code_2: bitstring) = dec(m_19,k1_2) in
                {146}if (tag8 = tag8'_2) then
                {147}new x_2: exponent;
                {148}let gx_5: G = g(x_2) in
                {149}let m_20: bitstring = (tag9,bitG(gx_5)) in
                {150}out(c_1, m_20);
                {151}in(c_1, m_21: bitstring);
                {152}let (tag10'_2: bitstring,bit_gy_2: bitstring,enc_signature_2: bitstring) = m_21 in
                {153}if (tag10 = tag10'_2) then
                {154}let gy_5: G = unbitG(bit_gy_2) in
                {155}let k3_2: SymmetricKey = GtoSymK(exp(gy_5,x_2)) in
                {156}if ((gy_5,gx_5) = check(dec(enc_signature_2,k3_2),pke2)) then
                {157}new sks_2: SecretKey;
                {158}new jti_2: bitstring;
                {159}let T2_2: bitstring = (a_1,jti_2,code_2,pkce_2) in
                {160}let m_22: bitstring = enc((tag11,pk(sks_2),sign(T2_2,sks_2)),k3_2) in
                {161}event appSendsLastMessageToIssuer(m_20,m_21,m_22);
                {162}out(c_1, m_22);
                {163}in(c_1, m_23: bitstring);
                {164}out(c_1, check_reach_app);
                {165}let (tag12'_2: bitstring,signed_M_2: bitstring) = dec(m_23,k3_2) in
                {166}if (tag12 = tag12'_2) then
                {167}let M_2: bitstring = check(signed_M_2,pke2) in
                {168}let (jtk_2: bitstring,jti'_2: bitstring,scope'_2: bitstring,a'_2: bitstring,i'_2: bitstring,u'_2: bitstring) = M_2 in
                {169}if (jtk_2 = hash_pk(pk(sks_2))) then
                {170}if (jti_2 = jti'_2) then
                {171}if (scope_2 = scope'_2) then
                {172}if (a_1 = a'_2) then
                {173}if (e2 = i'_2) then
                {174}if (u_1 = u'_2) then
                {129}let talksOnlyToHonest_2: bool = false in
                {175}if talksOnlyToHonest_2 then
                {176}out(c_1, check_reach_app);
                {177}event appCompletesProtocol(m_16,m_17,m_18,m_19,m_20,m_21,m_22,m_23);
                {178}out(ch(code_2), free_code)
            )
            else
                {179}if ((e1 ≠ u_1) && (e2 ≠ i_1)) then
                {180}in(c_1, pke1_1: PublicKey);
                {181}in(c_1, pke2_1: PublicKey);
                {183}in(c_1, m_24: bitstring);
                {184}let (tag1'_3: bitstring,bitgx_3: bitstring) = m_24 in
                {185}if (tag1 = tag1'_3) then
                {186}let gx_6: G = unbitG(bitgx_3) in
                {187}new y_3: exponent;
                {189}let k1_3: SymmetricKey = GtoSymK(exp(gx_6,y_3)) in
                {188}let gy_6: G = g(y_3) in
                {190}let m_25: bitstring = (tag2,bitG(gy_6),enc(sign((gy_6,gx_6),ska_1),k1_3)) in
                {191}out(c_1, m_25);
                {192}new pkce_3: bitstring;
                {193}new scope_3: bitstring;
                {194}let m_26: bitstring = enc((tag3,a_1,hash(pkce_3),scope_3),k1_3) in
                {195}event appSendsLastMessageToUser(m_24,m_25,m_26);
                {196}out(c_1, m_26);
                {197}in(c_1, m_27: bitstring);
                {198}let (tag8'_3: bitstring,code_3: bitstring) = dec(m_27,k1_3) in
                {199}if (tag8 = tag8'_3) then
                {200}new x_3: exponent;
                {201}let gx_7: G = g(x_3) in
                {202}let m_28: bitstring = (tag9,bitG(gx_7)) in
                {203}out(c_1, m_28);
                {204}in(c_1, m_29: bitstring);
                {205}let (tag10'_3: bitstring,bit_gy_3: bitstring,enc_signature_3: bitstring) = m_29 in
                {206}if (tag10 = tag10'_3) then
                {207}let gy_7: G = unbitG(bit_gy_3) in
                {208}let k3_3: SymmetricKey = GtoSymK(exp(gy_7,x_3)) in
                {209}if ((gy_7,gx_7) = check(dec(enc_signature_3,k3_3),pke2_1)) then
                {210}new sks_3: SecretKey;
                {211}new jti_3: bitstring;
                {212}let T2_3: bitstring = (a_1,jti_3,code_3,pkce_3) in
                {213}let m_30: bitstring = enc((tag11,pk(sks_3),sign(T2_3,sks_3)),k3_3) in
                {214}event appSendsLastMessageToIssuer(m_28,m_29,m_30);
                {215}out(c_1, m_30);
                {216}in(c_1, m_31: bitstring);
                {217}out(c_1, check_reach_app);
                {218}let (tag12'_3: bitstring,signed_M_3: bitstring) = dec(m_31,k3_3) in
                {219}if (tag12 = tag12'_3) then
                {220}let M_3: bitstring = check(signed_M_3,pke2_1) in
                {221}let (jtk_3: bitstring,jti'_3: bitstring,scope'_3: bitstring,a'_3: bitstring,i'_3: bitstring,u'_3: bitstring) = M_3 in
                {222}if (jtk_3 = hash_pk(pk(sks_3))) then
                {223}if (jti_3 = jti'_3) then
                {224}if (scope_3 = scope'_3) then
                {225}if (a_1 = a'_3) then
                {226}if (e2 = i'_3) then
                {227}if (e1 = u'_3) then
                {182}let talksOnlyToHonest_3: bool = false in
                {228}if talksOnlyToHonest_3 then
                {229}out(c_1, check_reach_app);
                {230}event appCompletesProtocol(m_24,m_25,m_26,m_27,m_28,m_29,m_30,m_31);
                {231}out(ch(code_3), free_code)
) | (
    {232}!
    {233}let c_2: channel = c in
    {241}in(c_2, e1_1: bitstring);
    {242}in(c_2, e2_1: bitstring);
    {240}let password_1: bitstring = password in
    {239}let pki_1: PublicKey = pk(ski) in
    {238}let i_2: bitstring = i in
    {237}let pka: PublicKey = pk(ska) in
    {236}let a_2: bitstring = a in
    {234}let u_2: bitstring = u in
    {243}if ((e1_1 = a_2) && (e2_1 = i_2)) then
    (
        {245}new x_4: exponent;
        {246}let gx_8: G = g(x_4) in
        {247}let m_32: bitstring = (tag1,bitG(gx_8)) in
        {248}out(c_2, m_32);
        {249}in(c_2, m_33: bitstring);
        {250}let (tag2': bitstring,bit_gy_4: bitstring,enc_signature_4: bitstring) = m_33 in
        {251}if (tag2 = tag2') then
        {252}let gy_8: G = unbitG(bit_gy_4) in
        {253}let k1_4: SymmetricKey = GtoSymK(exp(gy_8,x_4)) in
        {254}if ((gy_8,gx_8) = check(dec(enc_signature_4,k1_4),pka)) then
        {255}in(c_2, m_34: bitstring);
        {256}let (tag3': bitstring,a'_4: bitstring,h_pkce: bitstring,scope_4: bitstring) = dec(m_34,k1_4) in
        {257}if (tag3 = tag3') then
        {258}if (a_2 = a'_4) then
        {259}new x_5: exponent;
        {260}let gx_9: G = g(x_5) in
        {261}let m_35: bitstring = (tag4,bitG(gx_9)) in
        {262}out(c_2, m_35);
        {263}in(c_2, m_36: bitstring);
        {264}let (tag5': bitstring,bit_gy_5: bitstring,enc_signature_5: bitstring) = m_36 in
        {265}if (tag5 = tag5') then
        {266}let gy_9: G = unbitG(bit_gy_5) in
        {267}let k2: SymmetricKey = GtoSymK(exp(gy_9,x_5)) in
        {268}if ((gy_9,gx_9) = check(dec(enc_signature_5,k2),pki_1)) then
        {269}let m_37: bitstring = enc((tag6,a_2,h_pkce,scope_4,u_2,password_1),k2) in
        {270}event userSendsLastMessageToIssuer(m_35,m_36,m_37);
        {271}out(c_2, m_37);
        {272}in(c_2, m_38: bitstring);
        {273}let (tag7': bitstring,code_4: bitstring) = dec(m_38,k2) in
        {274}if (tag7 = tag7') then
        {275}let m_39: bitstring = enc((tag8,code_4),k1_4) in
        {276}event userSendsLastMessageToApp(m_32,m_33,m_34,m_39);
        {277}out(c_2, m_39);
        {244}let talksOnlyToHonest_4: bool = true in
        {278}if talksOnlyToHonest_4 then
        {279}out(c_2, check_reach_user);
        {280}event userCompletesProtocol(m_32,m_33,m_34,m_35,m_36,m_37,m_38);
        {281}out(ch(code_4), free_code);
        {282}out(ch(password_1), free_password)
    )
    else
        {283}if ((e1_1 ≠ a_2) && (e2_1 = i_2)) then
        (
            {284}in(c_2, pke1_2: PublicKey);
            {286}new x_6: exponent;
            {287}let gx_10: G = g(x_6) in
            {288}let m_40: bitstring = (tag1,bitG(gx_10)) in
            {289}out(c_2, m_40);
            {290}in(c_2, m_41: bitstring);
            {291}let (tag2'_1: bitstring,bit_gy_6: bitstring,enc_signature_6: bitstring) = m_41 in
            {292}if (tag2 = tag2'_1) then
            {293}let gy_10: G = unbitG(bit_gy_6) in
            {294}let k1_5: SymmetricKey = GtoSymK(exp(gy_10,x_6)) in
            {295}if ((gy_10,gx_10) = check(dec(enc_signature_6,k1_5),pke1_2)) then
            {296}in(c_2, m_42: bitstring);
            {297}let (tag3'_1: bitstring,a'_5: bitstring,h_pkce_1: bitstring,scope_5: bitstring) = dec(m_42,k1_5) in
            {298}if (tag3 = tag3'_1) then
            {299}if (e1_1 = a'_5) then
            {300}new x_7: exponent;
            {301}let gx_11: G = g(x_7) in
            {302}let m_43: bitstring = (tag4,bitG(gx_11)) in
            {303}out(c_2, m_43);
            {304}in(c_2, m_44: bitstring);
            {305}let (tag5'_1: bitstring,bit_gy_7: bitstring,enc_signature_7: bitstring) = m_44 in
            {306}if (tag5 = tag5'_1) then
            {307}let gy_11: G = unbitG(bit_gy_7) in
            {308}let k2_1: SymmetricKey = GtoSymK(exp(gy_11,x_7)) in
            {309}if ((gy_11,gx_11) = check(dec(enc_signature_7,k2_1),pki_1)) then
            {310}let m_45: bitstring = enc((tag6,e1_1,h_pkce_1,scope_5,u_2,password_1),k2_1) in
            {311}event userSendsLastMessageToIssuer(m_43,m_44,m_45);
            {312}out(c_2, m_45);
            {313}in(c_2, m_46: bitstring);
            {314}let (tag7'_1: bitstring,code_5: bitstring) = dec(m_46,k2_1) in
            {315}if (tag7 = tag7'_1) then
            {316}let m_47: bitstring = enc((tag8,code_5),k1_5) in
            {317}event userSendsLastMessageToApp(m_40,m_41,m_42,m_47);
            {318}out(c_2, m_47);
            {285}let talksOnlyToHonest_5: bool = false in
            {319}if talksOnlyToHonest_5 then
            {320}out(c_2, check_reach_user);
            {321}event userCompletesProtocol(m_40,m_41,m_42,m_43,m_44,m_45,m_46);
            {322}out(ch(code_5), free_code);
            {323}out(ch(password_1), free_password)
        )
        else
            {324}if ((e1_1 = a_2) && (e2_1 ≠ i_2)) then
            (
                {325}in(c_2, pke2_2: PublicKey);
                {326}in(c_2, wrong_pw: bitstring);
                {328}new x_8: exponent;
                {329}let gx_12: G = g(x_8) in
                {330}let m_48: bitstring = (tag1,bitG(gx_12)) in
                {331}out(c_2, m_48);
                {332}in(c_2, m_49: bitstring);
                {333}let (tag2'_2: bitstring,bit_gy_8: bitstring,enc_signature_8: bitstring) = m_49 in
                {334}if (tag2 = tag2'_2) then
                {335}let gy_12: G = unbitG(bit_gy_8) in
                {336}let k1_6: SymmetricKey = GtoSymK(exp(gy_12,x_8)) in
                {337}if ((gy_12,gx_12) = check(dec(enc_signature_8,k1_6),pka)) then
                {338}in(c_2, m_50: bitstring);
                {339}let (tag3'_2: bitstring,a'_6: bitstring,h_pkce_2: bitstring,scope_6: bitstring) = dec(m_50,k1_6) in
                {340}if (tag3 = tag3'_2) then
                {341}if (a_2 = a'_6) then
                {342}new x_9: exponent;
                {343}let gx_13: G = g(x_9) in
                {344}let m_51: bitstring = (tag4,bitG(gx_13)) in
                {345}out(c_2, m_51);
                {346}in(c_2, m_52: bitstring);
                {347}let (tag5'_2: bitstring,bit_gy_9: bitstring,enc_signature_9: bitstring) = m_52 in
                {348}if (tag5 = tag5'_2) then
                {349}let gy_13: G = unbitG(bit_gy_9) in
                {350}let k2_2: SymmetricKey = GtoSymK(exp(gy_13,x_9)) in
                {351}if ((gy_13,gx_13) = check(dec(enc_signature_9,k2_2),pke2_2)) then
                {352}let m_53: bitstring = enc((tag6,a_2,h_pkce_2,scope_6,u_2,wrong_pw),k2_2) in
                {353}event userSendsLastMessageToIssuer(m_51,m_52,m_53);
                {354}out(c_2, m_53);
                {355}in(c_2, m_54: bitstring);
                {356}let (tag7'_2: bitstring,code_6: bitstring) = dec(m_54,k2_2) in
                {357}if (tag7 = tag7'_2) then
                {358}let m_55: bitstring = enc((tag8,code_6),k1_6) in
                {359}event userSendsLastMessageToApp(m_48,m_49,m_50,m_55);
                {360}out(c_2, m_55);
                {327}let talksOnlyToHonest_6: bool = false in
                {361}if talksOnlyToHonest_6 then
                {362}out(c_2, check_reach_user);
                {363}event userCompletesProtocol(m_48,m_49,m_50,m_51,m_52,m_53,m_54);
                {364}out(ch(code_6), free_code);
                {365}out(ch(wrong_pw), free_password)
            )
            else
                {366}if ((e1_1 ≠ a_2) && (e2_1 ≠ i_2)) then
                {367}in(c_2, pke1_3: PublicKey);
                {368}in(c_2, pke2_3: PublicKey);
                {369}in(c_2, wrong_pw_1: bitstring);
                {371}new x_10: exponent;
                {372}let gx_14: G = g(x_10) in
                {373}let m_56: bitstring = (tag1,bitG(gx_14)) in
                {374}out(c_2, m_56);
                {375}in(c_2, m_57: bitstring);
                {376}let (tag2'_3: bitstring,bit_gy_10: bitstring,enc_signature_10: bitstring) = m_57 in
                {377}if (tag2 = tag2'_3) then
                {378}let gy_14: G = unbitG(bit_gy_10) in
                {379}let k1_7: SymmetricKey = GtoSymK(exp(gy_14,x_10)) in
                {380}if ((gy_14,gx_14) = check(dec(enc_signature_10,k1_7),pke1_3)) then
                {381}in(c_2, m_58: bitstring);
                {382}let (tag3'_3: bitstring,a'_7: bitstring,h_pkce_3: bitstring,scope_7: bitstring) = dec(m_58,k1_7) in
                {383}if (tag3 = tag3'_3) then
                {384}if (e1_1 = a'_7) then
                {385}new x_11: exponent;
                {386}let gx_15: G = g(x_11) in
                {387}let m_59: bitstring = (tag4,bitG(gx_15)) in
                {388}out(c_2, m_59);
                {389}in(c_2, m_60: bitstring);
                {390}let (tag5'_3: bitstring,bit_gy_11: bitstring,enc_signature_11: bitstring) = m_60 in
                {391}if (tag5 = tag5'_3) then
                {392}let gy_15: G = unbitG(bit_gy_11) in
                {393}let k2_3: SymmetricKey = GtoSymK(exp(gy_15,x_11)) in
                {394}if ((gy_15,gx_15) = check(dec(enc_signature_11,k2_3),pke2_3)) then
                {395}let m_61: bitstring = enc((tag6,e1_1,h_pkce_3,scope_7,u_2,wrong_pw_1),k2_3) in
                {396}event userSendsLastMessageToIssuer(m_59,m_60,m_61);
                {397}out(c_2, m_61);
                {398}in(c_2, m_62: bitstring);
                {399}let (tag7'_3: bitstring,code_7: bitstring) = dec(m_62,k2_3) in
                {400}if (tag7 = tag7'_3) then
                {401}let m_63: bitstring = enc((tag8,code_7),k1_7) in
                {402}event userSendsLastMessageToApp(m_56,m_57,m_58,m_63);
                {403}out(c_2, m_63);
                {370}let talksOnlyToHonest_7: bool = false in
                {404}if talksOnlyToHonest_7 then
                {405}out(c_2, check_reach_user);
                {406}event userCompletesProtocol(m_56,m_57,m_58,m_59,m_60,m_61,m_62);
                {407}out(ch(code_7), free_code);
                {408}out(ch(wrong_pw_1), free_password)
) | (
    {409}!
    {410}let c_3: channel = c in
    {418}in(c_3, e1_2: bitstring);
    {419}in(c_3, e2_2: bitstring);
    {417}let password_2: bitstring = password in
    {415}let u_3: bitstring = u in
    {413}let a_3: bitstring = a in
    {412}let ski_1: SecretKey = ski in
    {411}let i_3: bitstring = i in
    {420}if ((e1_2 = a_3) && (e2_2 = u_3)) then
    (
        {422}in(c_3, m_64: bitstring);
        {423}let (tag4': bitstring,bitgx_4: bitstring) = m_64 in
        {424}if (tag4 = tag4') then
        {425}let gx_16: G = unbitG(bitgx_4) in
        {426}new y_4: exponent;
        {428}let k2_4: SymmetricKey = GtoSymK(exp(gx_16,y_4)) in
        {427}let gy_16: G = g(y_4) in
        {429}let m_65: bitstring = (tag5,bitG(gy_16),enc(sign((gy_16,gx_16),ski_1),k2_4)) in
        {430}out(c_3, m_65);
        {431}in(c_3, m_66: bitstring);
        {432}let (tag6': bitstring,a'_8: bitstring,h_pkce_4: bitstring,scope_8: bitstring,u'_4: bitstring,password': bitstring) = dec(m_66,k2_4) in
        {433}if (tag6 = tag6') then
        {434}if (a_3 = a'_8) then
        {435}if (u_3 = u'_4) then
        {436}if (password_2 = password') then
        {437}new code_8: bitstring;
        {438}let m_67: bitstring = enc((tag7,code_8),k2_4) in
        {439}event issuerSendsLastMessageToUser(m_64,m_65,m_66,m_67);
        {440}out(c_3, m_67);
        {441}in(c_3, m_68: bitstring);
        {442}let (tag9': bitstring,bitgx_5: bitstring) = m_68 in
        {443}if (tag9 = tag9') then
        {444}let gx_17: G = unbitG(bitgx_5) in
        {445}new y_5: exponent;
        {447}let k3_4: SymmetricKey = GtoSymK(exp(gx_17,y_5)) in
        {446}let gy_17: G = g(y_5) in
        {448}let m_69: bitstring = (tag10,bitG(gy_17),enc(sign((gy_17,gx_17),ski_1),k3_4)) in
        {449}out(c_3, m_69);
        {450}in(c_3, m_70: bitstring);
        {451}let (tag11': bitstring,pksks: PublicKey,signature: bitstring) = dec(m_70,k3_4) in
        {452}if (tag11 = tag11') then
        {453}let (a'': bitstring,jti_4: bitstring,code': bitstring,pkce_4: bitstring) = check(signature,pksks) in
        {454}if (a_3 = a'') then
        {455}if (code_8 = code') then
        {456}if (h_pkce_4 = hash(pkce_4)) then
        {457}let jtk_4: bitstring = hash_pk(pksks) in
        {458}let M_4: bitstring = (jtk_4,jti_4,scope_8,a_3,i_3,u_3) in
        {459}let m_71: bitstring = enc((tag12,sign(M_4,ski_1)),k3_4) in
        {460}event issuerSendsLastMessageToApp(m_68,m_69,m_70,m_71);
        {461}out(c_3, m_71);
        {421}let talksOnlyToHonest_8: bool = true in
        {462}if talksOnlyToHonest_8 then
        {463}out(c_3, check_reach_issuer);
        {464}event issuerCompletesProtocol(m_64,m_65,m_66,m_68,m_69,m_70);
        {465}out(ch(code_8), free_code);
        {466}out(ch(password_2), free_password)
    )
    else
        {467}if ((e1_2 ≠ a_3) && (e2_2 = u_3)) then
        (
            {468}in(c_3, pke1_4: PublicKey);
            {470}in(c_3, m_72: bitstring);
            {471}let (tag4'_1: bitstring,bitgx_6: bitstring) = m_72 in
            {472}if (tag4 = tag4'_1) then
            {473}let gx_18: G = unbitG(bitgx_6) in
            {474}new y_6: exponent;
            {476}let k2_5: SymmetricKey = GtoSymK(exp(gx_18,y_6)) in
            {475}let gy_18: G = g(y_6) in
            {477}let m_73: bitstring = (tag5,bitG(gy_18),enc(sign((gy_18,gx_18),ski_1),k2_5)) in
            {478}out(c_3, m_73);
            {479}in(c_3, m_74: bitstring);
            {480}let (tag6'_1: bitstring,a'_9: bitstring,h_pkce_5: bitstring,scope_9: bitstring,u'_5: bitstring,password'_1: bitstring) = dec(m_74,k2_5) in
            {481}if (tag6 = tag6'_1) then
            {482}if (e1_2 = a'_9) then
            {483}if (u_3 = u'_5) then
            {484}if (password_2 = password'_1) then
            {485}new code_9: bitstring;
            {486}let m_75: bitstring = enc((tag7,code_9),k2_5) in
            {487}event issuerSendsLastMessageToUser(m_72,m_73,m_74,m_75);
            {488}out(c_3, m_75);
            {489}in(c_3, m_76: bitstring);
            {490}let (tag9'_1: bitstring,bitgx_7: bitstring) = m_76 in
            {491}if (tag9 = tag9'_1) then
            {492}let gx_19: G = unbitG(bitgx_7) in
            {493}new y_7: exponent;
            {495}let k3_5: SymmetricKey = GtoSymK(exp(gx_19,y_7)) in
            {494}let gy_19: G = g(y_7) in
            {496}let m_77: bitstring = (tag10,bitG(gy_19),enc(sign((gy_19,gx_19),ski_1),k3_5)) in
            {497}out(c_3, m_77);
            {498}in(c_3, m_78: bitstring);
            {499}let (tag11'_1: bitstring,pksks_1: PublicKey,signature_1: bitstring) = dec(m_78,k3_5) in
            {500}if (tag11 = tag11'_1) then
            {501}let (a''_1: bitstring,jti_5: bitstring,code'_1: bitstring,pkce_5: bitstring) = check(signature_1,pksks_1) in
            {502}if (e1_2 = a''_1) then
            {503}if (code_9 = code'_1) then
            {504}if (h_pkce_5 = hash(pkce_5)) then
            {505}let jtk_5: bitstring = hash_pk(pksks_1) in
            {506}let M_5: bitstring = (jtk_5,jti_5,scope_9,e1_2,i_3,u_3) in
            {507}let m_79: bitstring = enc((tag12,sign(M_5,ski_1)),k3_5) in
            {508}event issuerSendsLastMessageToApp(m_76,m_77,m_78,m_79);
            {509}out(c_3, m_79);
            {469}let talksOnlyToHonest_9: bool = false in
            {510}if talksOnlyToHonest_9 then
            {511}out(c_3, check_reach_issuer);
            {512}event issuerCompletesProtocol(m_72,m_73,m_74,m_76,m_77,m_78);
            {513}out(ch(code_9), free_code);
            {514}out(ch(password_2), free_password)
        )
        else
            {515}if ((e1_2 = a_3) && (e2_2 ≠ u_3)) then
            (
                {516}in(c_3, pke2_4: PublicKey);
                {517}in(c_3, wrong_pw_2: bitstring);
                {519}in(c_3, m_80: bitstring);
                {520}let (tag4'_2: bitstring,bitgx_8: bitstring) = m_80 in
                {521}if (tag4 = tag4'_2) then
                {522}let gx_20: G = unbitG(bitgx_8) in
                {523}new y_8: exponent;
                {525}let k2_6: SymmetricKey = GtoSymK(exp(gx_20,y_8)) in
                {524}let gy_20: G = g(y_8) in
                {526}let m_81: bitstring = (tag5,bitG(gy_20),enc(sign((gy_20,gx_20),ski_1),k2_6)) in
                {527}out(c_3, m_81);
                {528}in(c_3, m_82: bitstring);
                {529}let (tag6'_2: bitstring,a'_10: bitstring,h_pkce_6: bitstring,scope_10: bitstring,u'_6: bitstring,password'_2: bitstring) = dec(m_82,k2_6) in
                {530}if (tag6 = tag6'_2) then
                {531}if (a_3 = a'_10) then
                {532}if (e2_2 = u'_6) then
                {533}if (wrong_pw_2 = password'_2) then
                {534}new code_10: bitstring;
                {535}let m_83: bitstring = enc((tag7,code_10),k2_6) in
                {536}event issuerSendsLastMessageToUser(m_80,m_81,m_82,m_83);
                {537}out(c_3, m_83);
                {538}in(c_3, m_84: bitstring);
                {539}let (tag9'_2: bitstring,bitgx_9: bitstring) = m_84 in
                {540}if (tag9 = tag9'_2) then
                {541}let gx_21: G = unbitG(bitgx_9) in
                {542}new y_9: exponent;
                {544}let k3_6: SymmetricKey = GtoSymK(exp(gx_21,y_9)) in
                {543}let gy_21: G = g(y_9) in
                {545}let m_85: bitstring = (tag10,bitG(gy_21),enc(sign((gy_21,gx_21),ski_1),k3_6)) in
                {546}out(c_3, m_85);
                {547}in(c_3, m_86: bitstring);
                {548}let (tag11'_2: bitstring,pksks_2: PublicKey,signature_2: bitstring) = dec(m_86,k3_6) in
                {549}if (tag11 = tag11'_2) then
                {550}let (a''_2: bitstring,jti_6: bitstring,code'_2: bitstring,pkce_6: bitstring) = check(signature_2,pksks_2) in
                {551}if (a_3 = a''_2) then
                {552}if (code_10 = code'_2) then
                {553}if (h_pkce_6 = hash(pkce_6)) then
                {554}let jtk_6: bitstring = hash_pk(pksks_2) in
                {555}let M_6: bitstring = (jtk_6,jti_6,scope_10,a_3,i_3,e2_2) in
                {556}let m_87: bitstring = enc((tag12,sign(M_6,ski_1)),k3_6) in
                {557}event issuerSendsLastMessageToApp(m_84,m_85,m_86,m_87);
                {558}out(c_3, m_87);
                {518}let talksOnlyToHonest_10: bool = false in
                {559}if talksOnlyToHonest_10 then
                {560}out(c_3, check_reach_issuer);
                {561}event issuerCompletesProtocol(m_80,m_81,m_82,m_84,m_85,m_86);
                {562}out(ch(code_10), free_code);
                {563}out(ch(wrong_pw_2), free_password)
            )
            else
                {564}if ((e1_2 ≠ a_3) && (e2_2 ≠ u_3)) then
                {565}in(c_3, pke1_5: PublicKey);
                {566}in(c_3, pke2_5: PublicKey);
                {567}in(c_3, wrong_pw_3: bitstring);
                {569}in(c_3, m_88: bitstring);
                {570}let (tag4'_3: bitstring,bitgx_10: bitstring) = m_88 in
                {571}if (tag4 = tag4'_3) then
                {572}let gx_22: G = unbitG(bitgx_10) in
                {573}new y_10: exponent;
                {575}let k2_7: SymmetricKey = GtoSymK(exp(gx_22,y_10)) in
                {574}let gy_22: G = g(y_10) in
                {576}let m_89: bitstring = (tag5,bitG(gy_22),enc(sign((gy_22,gx_22),ski_1),k2_7)) in
                {577}out(c_3, m_89);
                {578}in(c_3, m_90: bitstring);
                {579}let (tag6'_3: bitstring,a'_11: bitstring,h_pkce_7: bitstring,scope_11: bitstring,u'_7: bitstring,password'_3: bitstring) = dec(m_90,k2_7) in
                {580}if (tag6 = tag6'_3) then
                {581}if (e1_2 = a'_11) then
                {582}if (e2_2 = u'_7) then
                {583}if (wrong_pw_3 = password'_3) then
                {584}new code_11: bitstring;
                {585}let m_91: bitstring = enc((tag7,code_11),k2_7) in
                {586}event issuerSendsLastMessageToUser(m_88,m_89,m_90,m_91);
                {587}out(c_3, m_91);
                {588}in(c_3, m_92: bitstring);
                {589}let (tag9'_3: bitstring,bitgx_11: bitstring) = m_92 in
                {590}if (tag9 = tag9'_3) then
                {591}let gx_23: G = unbitG(bitgx_11) in
                {592}new y_11: exponent;
                {594}let k3_7: SymmetricKey = GtoSymK(exp(gx_23,y_11)) in
                {593}let gy_23: G = g(y_11) in
                {595}let m_93: bitstring = (tag10,bitG(gy_23),enc(sign((gy_23,gx_23),ski_1),k3_7)) in
                {596}out(c_3, m_93);
                {597}in(c_3, m_94: bitstring);
                {598}let (tag11'_3: bitstring,pksks_3: PublicKey,signature_3: bitstring) = dec(m_94,k3_7) in
                {599}if (tag11 = tag11'_3) then
                {600}let (a''_3: bitstring,jti_7: bitstring,code'_3: bitstring,pkce_7: bitstring) = check(signature_3,pksks_3) in
                {601}if (e1_2 = a''_3) then
                {602}if (code_11 = code'_3) then
                {603}if (h_pkce_7 = hash(pkce_7)) then
                {604}let jtk_7: bitstring = hash_pk(pksks_3) in
                {605}let M_7: bitstring = (jtk_7,jti_7,scope_11,e1_2,i_3,e2_2) in
                {606}let m_95: bitstring = enc((tag12,sign(M_7,ski_1)),k3_7) in
                {607}event issuerSendsLastMessageToApp(m_92,m_93,m_94,m_95);
                {608}out(c_3, m_95);
                {568}let talksOnlyToHonest_11: bool = false in
                {609}if talksOnlyToHonest_11 then
                {610}out(c_3, check_reach_issuer);
                {611}event issuerCompletesProtocol(m_88,m_89,m_90,m_92,m_93,m_94);
                {612}out(ch(code_11), free_code);
                {613}out(ch(wrong_pw_3), free_password)
)

-- Query inj-event(userCompletesProtocol(m_96,m_97,m_98,m_99,m_100,m_101,m_102)) ==> inj-event(appSendsLastMessageToUser(m_96,m_97,m_98)) && inj-event(issuerSendsLastMessageToUser(m_99,m_100,m_101,m_102)) in process 1.
Translating the process into Horn clauses...
select attacker(bitG(gx_24))/-5000
Completing...
Termination warning: attacker(bitG(elem)) -> attacker(elem)
Selecting 0
200 rules inserted. Base: 188 rules (49 with conclusion selected). Queue: 287 rules.
400 rules inserted. Base: 353 rules (63 with conclusion selected). Queue: 394 rules.
600 rules inserted. Base: 493 rules (80 with conclusion selected). Queue: 533 rules.
800 rules inserted. Base: 632 rules (105 with conclusion selected). Queue: 594 rules.
1000 rules inserted. Base: 776 rules (125 with conclusion selected). Queue: 699 rules.
select attacker(bitG(g(y_12)))/-5000
1200 rules inserted. Base: 945 rules (146 with conclusion selected). Queue: 1024 rules.
1400 rules inserted. Base: 1102 rules (172 with conclusion selected). Queue: 1229 rules.
1600 rules inserted. Base: 1291 rules (187 with conclusion selected). Queue: 1449 rules.
1800 rules inserted. Base: 1461 rules (202 with conclusion selected). Queue: 1506 rules.
2000 rules inserted. Base: 1568 rules (208 with conclusion selected). Queue: 1499 rules.
2200 rules inserted. Base: 1725 rules (216 with conclusion selected). Queue: 1452 rules.
2400 rules inserted. Base: 1864 rules (231 with conclusion selected). Queue: 1545 rules.
2600 rules inserted. Base: 1964 rules (241 with conclusion selected). Queue: 1689 rules.
2800 rules inserted. Base: 2102 rules (245 with conclusion selected). Queue: 1833 rules.
3000 rules inserted. Base: 2233 rules (252 with conclusion selected). Queue: 1823 rules.
3200 rules inserted. Base: 2392 rules (256 with conclusion selected). Queue: 1808 rules.
3400 rules inserted. Base: 2526 rules (278 with conclusion selected). Queue: 1915 rules.
3600 rules inserted. Base: 2706 rules (282 with conclusion selected). Queue: 2042 rules.
3800 rules inserted. Base: 2864 rules (289 with conclusion selected). Queue: 2004 rules.
4000 rules inserted. Base: 2992 rules (289 with conclusion selected). Queue: 1872 rules.
4200 rules inserted. Base: 3095 rules (293 with conclusion selected). Queue: 1787 rules.
4400 rules inserted. Base: 3073 rules (293 with conclusion selected). Queue: 1628 rules.
4600 rules inserted. Base: 3212 rules (299 with conclusion selected). Queue: 1637 rules.
4800 rules inserted. Base: 3389 rules (304 with conclusion selected). Queue: 1684 rules.
5000 rules inserted. Base: 3562 rules (312 with conclusion selected). Queue: 1856 rules.
5200 rules inserted. Base: 3724 rules (321 with conclusion selected). Queue: 1831 rules.
5400 rules inserted. Base: 3785 rules (331 with conclusion selected). Queue: 1865 rules.
5600 rules inserted. Base: 3869 rules (345 with conclusion selected). Queue: 1910 rules.
5800 rules inserted. Base: 3951 rules (350 with conclusion selected). Queue: 1865 rules.
6000 rules inserted. Base: 4108 rules (353 with conclusion selected). Queue: 1859 rules.
6200 rules inserted. Base: 4158 rules (362 with conclusion selected). Queue: 1829 rules.
6400 rules inserted. Base: 4158 rules (363 with conclusion selected). Queue: 1731 rules.
6600 rules inserted. Base: 4198 rules (367 with conclusion selected). Queue: 1693 rules.
6800 rules inserted. Base: 4339 rules (371 with conclusion selected). Queue: 1662 rules.
7000 rules inserted. Base: 4454 rules (380 with conclusion selected). Queue: 1881 rules.
7200 rules inserted. Base: 4607 rules (405 with conclusion selected). Queue: 2045 rules.
7400 rules inserted. Base: 4685 rules (428 with conclusion selected). Queue: 2297 rules.
7600 rules inserted. Base: 4748 rules (440 with conclusion selected). Queue: 2403 rules.
7800 rules inserted. Base: 4900 rules (443 with conclusion selected). Queue: 2330 rules.
8000 rules inserted. Base: 5045 rules (444 with conclusion selected). Queue: 2251 rules.
8200 rules inserted. Base: 5225 rules (451 with conclusion selected). Queue: 2369 rules.
8400 rules inserted. Base: 5291 rules (458 with conclusion selected). Queue: 2467 rules.
8600 rules inserted. Base: 5281 rules (458 with conclusion selected). Queue: 2258 rules.
8800 rules inserted. Base: 5368 rules (468 with conclusion selected). Queue: 2195 rules.
9000 rules inserted. Base: 5479 rules (474 with conclusion selected). Queue: 2321 rules.
9200 rules inserted. Base: 5600 rules (490 with conclusion selected). Queue: 2816 rules.
9400 rules inserted. Base: 5685 rules (506 with conclusion selected). Queue: 2917 rules.
9600 rules inserted. Base: 5788 rules (526 with conclusion selected). Queue: 3043 rules.
9800 rules inserted. Base: 5896 rules (537 with conclusion selected). Queue: 3084 rules.
10000 rules inserted. Base: 6037 rules (543 with conclusion selected). Queue: 3125 rules.
10200 rules inserted. Base: 6088 rules (545 with conclusion selected). Queue: 3375 rules.
10400 rules inserted. Base: 6256 rules (548 with conclusion selected). Queue: 3332 rules.
10600 rules inserted. Base: 6425 rules (553 with conclusion selected). Queue: 3301 rules.
10800 rules inserted. Base: 6504 rules (556 with conclusion selected). Queue: 3163 rules.
11000 rules inserted. Base: 6597 rules (559 with conclusion selected). Queue: 3096 rules.
11200 rules inserted. Base: 6565 rules (559 with conclusion selected). Queue: 2879 rules.
11400 rules inserted. Base: 6680 rules (569 with conclusion selected). Queue: 3049 rules.
11600 rules inserted. Base: 6726 rules (569 with conclusion selected). Queue: 2887 rules.
11800 rules inserted. Base: 6694 rules (569 with conclusion selected). Queue: 2663 rules.
12000 rules inserted. Base: 6718 rules (569 with conclusion selected). Queue: 2584 rules.
12200 rules inserted. Base: 6842 rules (579 with conclusion selected). Queue: 2665 rules.
12400 rules inserted. Base: 6974 rules (593 with conclusion selected). Queue: 3125 rules.
12600 rules inserted. Base: 7057 rules (621 with conclusion selected). Queue: 3722 rules.
12800 rules inserted. Base: 7147 rules (632 with conclusion selected). Queue: 3828 rules.
13000 rules inserted. Base: 7189 rules (632 with conclusion selected). Queue: 4292 rules.
13200 rules inserted. Base: 7206 rules (632 with conclusion selected). Queue: 4082 rules.
13400 rules inserted. Base: 7200 rules (633 with conclusion selected). Queue: 3883 rules.
13600 rules inserted. Base: 7318 rules (633 with conclusion selected). Queue: 3823 rules.
13800 rules inserted. Base: 7451 rules (633 with conclusion selected). Queue: 3750 rules.
14000 rules inserted. Base: 7534 rules (649 with conclusion selected). Queue: 3783 rules.
14200 rules inserted. Base: 7599 rules (660 with conclusion selected). Queue: 3777 rules.
14400 rules inserted. Base: 7655 rules (660 with conclusion selected). Queue: 3720 rules.
14600 rules inserted. Base: 7713 rules (663 with conclusion selected). Queue: 3710 rules.
14800 rules inserted. Base: 7776 rules (663 with conclusion selected). Queue: 3641 rules.
15000 rules inserted. Base: 7738 rules (663 with conclusion selected). Queue: 3427 rules.
15200 rules inserted. Base: 7750 rules (663 with conclusion selected). Queue: 3313 rules.
15400 rules inserted. Base: 7831 rules (673 with conclusion selected). Queue: 3410 rules.
15600 rules inserted. Base: 7985 rules (678 with conclusion selected). Queue: 3379 rules.
15800 rules inserted. Base: 8168 rules (685 with conclusion selected). Queue: 3511 rules.
16000 rules inserted. Base: 8340 rules (693 with conclusion selected). Queue: 3783 rules.
16200 rules inserted. Base: 8452 rules (721 with conclusion selected). Queue: 4162 rules.
16400 rules inserted. Base: 8515 rules (727 with conclusion selected). Queue: 4192 rules.
16600 rules inserted. Base: 8556 rules (727 with conclusion selected). Queue: 4047 rules.
16800 rules inserted. Base: 8540 rules (727 with conclusion selected). Queue: 3832 rules.
17000 rules inserted. Base: 8500 rules (727 with conclusion selected). Queue: 3613 rules.
17200 rules inserted. Base: 8505 rules (735 with conclusion selected). Queue: 3805 rules.
17400 rules inserted. Base: 8573 rules (735 with conclusion selected). Queue: 4687 rules.
17600 rules inserted. Base: 8613 rules (737 with conclusion selected). Queue: 4828 rules.
17800 rules inserted. Base: 8681 rules (751 with conclusion selected). Queue: 4789 rules.
18000 rules inserted. Base: 8772 rules (751 with conclusion selected). Queue: 4908 rules.
18200 rules inserted. Base: 8839 rules (767 with conclusion selected). Queue: 4784 rules.
18400 rules inserted. Base: 8935 rules (767 with conclusion selected). Queue: 4714 rules.
18600 rules inserted. Base: 8971 rules (770 with conclusion selected). Queue: 4739 rules.
18800 rules inserted. Base: 9032 rules (770 with conclusion selected). Queue: 4686 rules.
19000 rules inserted. Base: 9230 rules (773 with conclusion selected). Queue: 4707 rules.
19200 rules inserted. Base: 9392 rules (773 with conclusion selected). Queue: 4682 rules.
19400 rules inserted. Base: 9582 rules (776 with conclusion selected). Queue: 4666 rules.
19600 rules inserted. Base: 9741 rules (776 with conclusion selected). Queue: 4661 rules.
19800 rules inserted. Base: 9922 rules (790 with conclusion selected). Queue: 4959 rules.
20000 rules inserted. Base: 10056 rules (803 with conclusion selected). Queue: 5096 rules.
20200 rules inserted. Base: 10132 rules (803 with conclusion selected). Queue: 5034 rules.
20400 rules inserted. Base: 10202 rules (819 with conclusion selected). Queue: 5205 rules.
20600 rules inserted. Base: 10245 rules (839 with conclusion selected). Queue: 5182 rules.
20800 rules inserted. Base: 10211 rules (839 with conclusion selected). Queue: 4972 rules.
21000 rules inserted. Base: 10216 rules (839 with conclusion selected). Queue: 4765 rules.
21200 rules inserted. Base: 10226 rules (839 with conclusion selected). Queue: 4556 rules.
21400 rules inserted. Base: 10169 rules (839 with conclusion selected). Queue: 4346 rules.
21600 rules inserted. Base: 10185 rules (839 with conclusion selected). Queue: 4148 rules.
21800 rules inserted. Base: 10151 rules (839 with conclusion selected). Queue: 3938 rules.
22000 rules inserted. Base: 10155 rules (839 with conclusion selected). Queue: 3854 rules.
22200 rules inserted. Base: 10143 rules (839 with conclusion selected). Queue: 3727 rules.
22400 rules inserted. Base: 10139 rules (849 with conclusion selected). Queue: 3841 rules.
22600 rules inserted. Base: 10222 rules (865 with conclusion selected). Queue: 3890 rules.
22800 rules inserted. Base: 10222 rules (865 with conclusion selected). Queue: 3974 rules.
23000 rules inserted. Base: 10303 rules (865 with conclusion selected). Queue: 4003 rules.
23200 rules inserted. Base: 10319 rules (865 with conclusion selected). Queue: 3883 rules.
23400 rules inserted. Base: 10424 rules (865 with conclusion selected). Queue: 3905 rules.
23600 rules inserted. Base: 10616 rules (865 with conclusion selected). Queue: 4059 rules.
23800 rules inserted. Base: 10448 rules (865 with conclusion selected). Queue: 4062 rules.
24000 rules inserted. Base: 10380 rules (865 with conclusion selected). Queue: 4071 rules.
24200 rules inserted. Base: 10574 rules (868 with conclusion selected). Queue: 4082 rules.
24400 rules inserted. Base: 10742 rules (868 with conclusion selected). Queue: 4061 rules.
24600 rules inserted. Base: 10894 rules (874 with conclusion selected). Queue: 4053 rules.
24800 rules inserted. Base: 10947 rules (874 with conclusion selected). Queue: 3976 rules.
25000 rules inserted. Base: 10992 rules (892 with conclusion selected). Queue: 4009 rules.
25200 rules inserted. Base: 11103 rules (903 with conclusion selected). Queue: 4216 rules.
25400 rules inserted. Base: 11163 rules (913 with conclusion selected). Queue: 4091 rules.
25600 rules inserted. Base: 11234 rules (938 with conclusion selected). Queue: 4169 rules.
25800 rules inserted. Base: 11242 rules (942 with conclusion selected). Queue: 3991 rules.
26000 rules inserted. Base: 11290 rules (948 with conclusion selected). Queue: 4002 rules.
26200 rules inserted. Base: 11300 rules (950 with conclusion selected). Queue: 3869 rules.
26400 rules inserted. Base: 11371 rules (960 with conclusion selected). Queue: 3820 rules.
26600 rules inserted. Base: 11339 rules (960 with conclusion selected). Queue: 3707 rules.
26800 rules inserted. Base: 11392 rules (976 with conclusion selected). Queue: 3677 rules.
27000 rules inserted. Base: 11475 rules (1000 with conclusion selected). Queue: 3740 rules.
27200 rules inserted. Base: 11505 rules (1000 with conclusion selected). Queue: 3696 rules.
27400 rules inserted. Base: 11489 rules (1000 with conclusion selected). Queue: 3696 rules.
27600 rules inserted. Base: 11529 rules (1000 with conclusion selected). Queue: 3742 rules.
27800 rules inserted. Base: 11644 rules (1000 with conclusion selected). Queue: 3843 rules.
28000 rules inserted. Base: 11712 rules (1000 with conclusion selected). Queue: 3940 rules.
28200 rules inserted. Base: 11908 rules (1000 with conclusion selected). Queue: 4078 rules.
28400 rules inserted. Base: 11657 rules (1000 with conclusion selected). Queue: 4075 rules.
28600 rules inserted. Base: 11724 rules (1000 with conclusion selected). Queue: 4054 rules.
28800 rules inserted. Base: 11791 rules (1000 with conclusion selected). Queue: 4013 rules.
29000 rules inserted. Base: 11909 rules (1010 with conclusion selected). Queue: 4093 rules.
29200 rules inserted. Base: 11993 rules (1013 with conclusion selected). Queue: 4059 rules.
29400 rules inserted. Base: 12115 rules (1036 with conclusion selected). Queue: 4062 rules.
29600 rules inserted. Base: 12175 rules (1063 with conclusion selected). Queue: 3981 rules.
select attacker(pk(sk))/-5000
29800 rules inserted. Base: 12296 rules (1080 with conclusion selected). Queue: 4015 rules.
30000 rules inserted. Base: 12348 rules (1094 with conclusion selected). Queue: 3919 rules.
30200 rules inserted. Base: 12373 rules (1094 with conclusion selected). Queue: 3765 rules.
30400 rules inserted. Base: 12437 rules (1110 with conclusion selected). Queue: 3762 rules.
30600 rules inserted. Base: 12443 rules (1110 with conclusion selected). Queue: 3670 rules.
30800 rules inserted. Base: 12548 rules (1122 with conclusion selected). Queue: 3593 rules.
31000 rules inserted. Base: 12741 rules (1122 with conclusion selected). Queue: 3407 rules.
31200 rules inserted. Base: 12929 rules (1122 with conclusion selected). Queue: 3272 rules.
31400 rules inserted. Base: 13000 rules (1122 with conclusion selected). Queue: 3269 rules.
31600 rules inserted. Base: 12959 rules (1122 with conclusion selected). Queue: 3156 rules.
31800 rules inserted. Base: 13044 rules (1122 with conclusion selected). Queue: 3148 rules.
32000 rules inserted. Base: 13031 rules (1122 with conclusion selected). Queue: 3127 rules.
32200 rules inserted. Base: 13067 rules (1122 with conclusion selected). Queue: 3160 rules.
32400 rules inserted. Base: 13174 rules (1122 with conclusion selected). Queue: 3256 rules.
32600 rules inserted. Base: 13193 rules (1122 with conclusion selected). Queue: 3268 rules.
32800 rules inserted. Base: 13299 rules (1136 with conclusion selected). Queue: 3223 rules.
33000 rules inserted. Base: 13410 rules (1139 with conclusion selected). Queue: 3185 rules.
33200 rules inserted. Base: 13500 rules (1139 with conclusion selected). Queue: 3140 rules.
33400 rules inserted. Base: 13611 rules (1142 with conclusion selected). Queue: 3169 rules.
33600 rules inserted. Base: 13761 rules (1191 with conclusion selected). Queue: 3208 rules.
33800 rules inserted. Base: 13821 rules (1201 with conclusion selected). Queue: 3173 rules.
34000 rules inserted. Base: 13910 rules (1218 with conclusion selected). Queue: 3259 rules.
34200 rules inserted. Base: 13949 rules (1221 with conclusion selected). Queue: 3186 rules.
34400 rules inserted. Base: 14010 rules (1235 with conclusion selected). Queue: 3206 rules.
34600 rules inserted. Base: 14142 rules (1235 with conclusion selected). Queue: 3139 rules.
34800 rules inserted. Base: 14279 rules (1235 with conclusion selected). Queue: 3039 rules.
35000 rules inserted. Base: 14379 rules (1235 with conclusion selected). Queue: 2915 rules.
35200 rules inserted. Base: 14571 rules (1235 with conclusion selected). Queue: 2745 rules.
35400 rules inserted. Base: 14636 rules (1235 with conclusion selected). Queue: 2722 rules.
35600 rules inserted. Base: 14610 rules (1235 with conclusion selected). Queue: 2626 rules.
35800 rules inserted. Base: 14717 rules (1251 with conclusion selected). Queue: 2601 rules.
36000 rules inserted. Base: 14823 rules (1272 with conclusion selected). Queue: 2592 rules.
36200 rules inserted. Base: 14898 rules (1272 with conclusion selected). Queue: 2557 rules.
36400 rules inserted. Base: 15013 rules (1274 with conclusion selected). Queue: 2531 rules.
36600 rules inserted. Base: 15125 rules (1274 with conclusion selected). Queue: 2484 rules.
36800 rules inserted. Base: 15310 rules (1278 with conclusion selected). Queue: 2436 rules.
37000 rules inserted. Base: 15423 rules (1287 with conclusion selected). Queue: 2394 rules.
37200 rules inserted. Base: 15483 rules (1295 with conclusion selected). Queue: 2439 rules.
37400 rules inserted. Base: 15604 rules (1301 with conclusion selected). Queue: 2371 rules.
37600 rules inserted. Base: 15114 rules (1302 with conclusion selected). Queue: 2398 rules.
37800 rules inserted. Base: 15045 rules (1302 with conclusion selected). Queue: 2376 rules.
38000 rules inserted. Base: 14672 rules (1302 with conclusion selected). Queue: 2333 rules.
38200 rules inserted. Base: 14794 rules (1302 with conclusion selected). Queue: 2218 rules.
38400 rules inserted. Base: 14866 rules (1320 with conclusion selected). Queue: 2225 rules.
38600 rules inserted. Base: 14940 rules (1328 with conclusion selected). Queue: 2348 rules.
38800 rules inserted. Base: 15038 rules (1340 with conclusion selected). Queue: 2299 rules.
39000 rules inserted. Base: 15154 rules (1343 with conclusion selected). Queue: 2234 rules.
39200 rules inserted. Base: 15303 rules (1346 with conclusion selected). Queue: 2228 rules.
39400 rules inserted. Base: 15397 rules (1357 with conclusion selected). Queue: 2234 rules.
39600 rules inserted. Base: 15494 rules (1361 with conclusion selected). Queue: 2147 rules.
39800 rules inserted. Base: 15634 rules (1391 with conclusion selected). Queue: 2248 rules.
40000 rules inserted. Base: 15720 rules (1392 with conclusion selected). Queue: 2208 rules.
40200 rules inserted. Base: 15670 rules (1408 with conclusion selected). Queue: 2196 rules.
40400 rules inserted. Base: 15712 rules (1408 with conclusion selected). Queue: 2191 rules.
40600 rules inserted. Base: 15822 rules (1412 with conclusion selected). Queue: 2184 rules.
40800 rules inserted. Base: 15916 rules (1421 with conclusion selected). Queue: 2241 rules.
41000 rules inserted. Base: 15973 rules (1445 with conclusion selected). Queue: 2228 rules.
41200 rules inserted. Base: 16084 rules (1453 with conclusion selected). Queue: 2422 rules.
41400 rules inserted. Base: 16190 rules (1453 with conclusion selected). Queue: 2369 rules.
41600 rules inserted. Base: 16285 rules (1464 with conclusion selected). Queue: 2440 rules.
41800 rules inserted. Base: 16411 rules (1481 with conclusion selected). Queue: 2550 rules.
42000 rules inserted. Base: 16472 rules (1492 with conclusion selected). Queue: 2407 rules.
42200 rules inserted. Base: 16526 rules (1492 with conclusion selected). Queue: 2294 rules.
42400 rules inserted. Base: 16533 rules (1506 with conclusion selected). Queue: 2263 rules.
42600 rules inserted. Base: 16608 rules (1518 with conclusion selected). Queue: 2210 rules.
42800 rules inserted. Base: 16739 rules (1527 with conclusion selected). Queue: 2311 rules.
43000 rules inserted. Base: 16775 rules (1537 with conclusion selected). Queue: 2258 rules.
43200 rules inserted. Base: 16897 rules (1552 with conclusion selected). Queue: 2298 rules.
43400 rules inserted. Base: 17021 rules (1556 with conclusion selected). Queue: 2288 rules.
43600 rules inserted. Base: 17128 rules (1559 with conclusion selected). Queue: 2319 rules.
43800 rules inserted. Base: 17149 rules (1559 with conclusion selected). Queue: 2459 rules.
44000 rules inserted. Base: 17263 rules (1568 with conclusion selected). Queue: 2466 rules.
44200 rules inserted. Base: 17381 rules (1576 with conclusion selected). Queue: 2444 rules.
44400 rules inserted. Base: 17502 rules (1592 with conclusion selected). Queue: 2600 rules.
44600 rules inserted. Base: 17506 rules (1594 with conclusion selected). Queue: 2462 rules.
44800 rules inserted. Base: 17573 rules (1594 with conclusion selected). Queue: 2346 rules.
45000 rules inserted. Base: 17610 rules (1606 with conclusion selected). Queue: 2387 rules.
45200 rules inserted. Base: 17643 rules (1617 with conclusion selected). Queue: 2393 rules.
45400 rules inserted. Base: 17771 rules (1620 with conclusion selected). Queue: 2349 rules.
45600 rules inserted. Base: 17932 rules (1628 with conclusion selected). Queue: 2459 rules.
45800 rules inserted. Base: 18011 rules (1629 with conclusion selected). Queue: 2467 rules.
46000 rules inserted. Base: 17974 rules (1629 with conclusion selected). Queue: 2548 rules.
46200 rules inserted. Base: 18160 rules (1629 with conclusion selected). Queue: 2386 rules.
46400 rules inserted. Base: 18302 rules (1643 with conclusion selected). Queue: 2687 rules.
46600 rules inserted. Base: 18441 rules (1650 with conclusion selected). Queue: 2841 rules.
46800 rules inserted. Base: 18537 rules (1661 with conclusion selected). Queue: 2993 rules.
47000 rules inserted. Base: 18429 rules (1670 with conclusion selected). Queue: 2935 rules.
47200 rules inserted. Base: 18399 rules (1674 with conclusion selected). Queue: 2775 rules.
47400 rules inserted. Base: 18453 rules (1690 with conclusion selected). Queue: 2751 rules.
47600 rules inserted. Base: 18576 rules (1725 with conclusion selected). Queue: 2700 rules.
47800 rules inserted. Base: 18699 rules (1733 with conclusion selected). Queue: 2767 rules.
48000 rules inserted. Base: 18817 rules (1737 with conclusion selected). Queue: 2831 rules.
48200 rules inserted. Base: 18930 rules (1739 with conclusion selected). Queue: 2851 rules.
48400 rules inserted. Base: 18865 rules (1740 with conclusion selected). Queue: 2797 rules.
48600 rules inserted. Base: 18681 rules (1744 with conclusion selected). Queue: 3055 rules.
48800 rules inserted. Base: 18808 rules (1748 with conclusion selected). Queue: 3147 rules.
49000 rules inserted. Base: 18937 rules (1751 with conclusion selected). Queue: 3056 rules.
49200 rules inserted. Base: 19039 rules (1754 with conclusion selected). Queue: 3124 rules.
49400 rules inserted. Base: 19169 rules (1755 with conclusion selected). Queue: 3205 rules.
49600 rules inserted. Base: 19271 rules (1758 with conclusion selected). Queue: 3141 rules.
49800 rules inserted. Base: 19363 rules (1774 with conclusion selected). Queue: 3441 rules.
50000 rules inserted. Base: 19382 rules (1802 with conclusion selected). Queue: 3764 rules.
50200 rules inserted. Base: 19497 rules (1841 with conclusion selected). Queue: 3825 rules.
50400 rules inserted. Base: 19598 rules (1860 with conclusion selected). Queue: 4084 rules.
50600 rules inserted. Base: 19720 rules (1861 with conclusion selected). Queue: 4072 rules.
50800 rules inserted. Base: 19812 rules (1861 with conclusion selected). Queue: 4037 rules.
51000 rules inserted. Base: 19959 rules (1864 with conclusion selected). Queue: 3956 rules.
51200 rules inserted. Base: 19900 rules (1873 with conclusion selected). Queue: 3770 rules.
51400 rules inserted. Base: 20090 rules (1873 with conclusion selected). Queue: 3580 rules.
51600 rules inserted. Base: 20221 rules (1877 with conclusion selected). Queue: 3552 rules.
51800 rules inserted. Base: 20322 rules (1877 with conclusion selected). Queue: 3529 rules.
52000 rules inserted. Base: 20422 rules (1901 with conclusion selected). Queue: 3489 rules.
52200 rules inserted. Base: 20553 rules (1901 with conclusion selected). Queue: 3462 rules.
52400 rules inserted. Base: 20640 rules (1901 with conclusion selected). Queue: 3425 rules.
52600 rules inserted. Base: 20730 rules (1901 with conclusion selected). Queue: 3394 rules.
52800 rules inserted. Base: 20869 rules (1904 with conclusion selected). Queue: 3455 rules.
53000 rules inserted. Base: 21014 rules (1905 with conclusion selected). Queue: 3537 rules.
53200 rules inserted. Base: 21125 rules (1913 with conclusion selected). Queue: 3499 rules.
53400 rules inserted. Base: 21241 rules (1922 with conclusion selected). Queue: 3505 rules.
53600 rules inserted. Base: 21339 rules (1931 with conclusion selected). Queue: 3472 rules.
53800 rules inserted. Base: 21439 rules (1934 with conclusion selected). Queue: 3414 rules.
54000 rules inserted. Base: 21574 rules (1944 with conclusion selected). Queue: 3573 rules.
54200 rules inserted. Base: 21690 rules (1949 with conclusion selected). Queue: 3584 rules.
54400 rules inserted. Base: 21841 rules (1961 with conclusion selected). Queue: 3787 rules.
54600 rules inserted. Base: 21957 rules (1961 with conclusion selected). Queue: 4290 rules.
54800 rules inserted. Base: 22096 rules (1961 with conclusion selected). Queue: 4451 rules.
55000 rules inserted. Base: 21967 rules (1981 with conclusion selected). Queue: 4921 rules.
55200 rules inserted. Base: 22095 rules (1981 with conclusion selected). Queue: 5224 rules.
55400 rules inserted. Base: 22207 rules (1985 with conclusion selected). Queue: 5776 rules.
55600 rules inserted. Base: 22312 rules (1985 with conclusion selected). Queue: 6292 rules.
55800 rules inserted. Base: 22435 rules (1985 with conclusion selected). Queue: 6621 rules.
56000 rules inserted. Base: 22525 rules (2021 with conclusion selected). Queue: 6984 rules.
56200 rules inserted. Base: 22677 rules (2021 with conclusion selected). Queue: 6955 rules.
56400 rules inserted. Base: 22780 rules (2021 with conclusion selected). Queue: 6936 rules.
56600 rules inserted. Base: 22861 rules (2021 with conclusion selected). Queue: 6932 rules.
56800 rules inserted. Base: 23048 rules (2036 with conclusion selected). Queue: 7376 rules.
57000 rules inserted. Base: 23138 rules (2044 with conclusion selected). Queue: 7595 rules.
57200 rules inserted. Base: 23248 rules (2068 with conclusion selected). Queue: 7600 rules.
57400 rules inserted. Base: 23402 rules (2074 with conclusion selected). Queue: 7684 rules.
57600 rules inserted. Base: 23546 rules (2086 with conclusion selected). Queue: 7898 rules.
57800 rules inserted. Base: 23725 rules (2093 with conclusion selected). Queue: 8231 rules.
58000 rules inserted. Base: 23867 rules (2096 with conclusion selected). Queue: 8391 rules.
58200 rules inserted. Base: 23998 rules (2097 with conclusion selected). Queue: 8509 rules.
58400 rules inserted. Base: 23976 rules (2100 with conclusion selected). Queue: 8371 rules.
58600 rules inserted. Base: 23974 rules (2101 with conclusion selected). Queue: 8223 rules.
58800 rules inserted. Base: 23988 rules (2105 with conclusion selected). Queue: 8018 rules.
59000 rules inserted. Base: 23989 rules (2109 with conclusion selected). Queue: 7879 rules.
59200 rules inserted. Base: 23923 rules (2112 with conclusion selected). Queue: 7730 rules.
59400 rules inserted. Base: 23934 rules (2113 with conclusion selected). Queue: 7526 rules.
59600 rules inserted. Base: 23950 rules (2124 with conclusion selected). Queue: 7497 rules.
59800 rules inserted. Base: 23994 rules (2129 with conclusion selected). Queue: 7509 rules.
60000 rules inserted. Base: 23929 rules (2133 with conclusion selected). Queue: 7361 rules.
60200 rules inserted. Base: 23943 rules (2137 with conclusion selected). Queue: 7156 rules.
60400 rules inserted. Base: 23944 rules (2141 with conclusion selected). Queue: 7017 rules.
60600 rules inserted. Base: 23878 rules (2143 with conclusion selected). Queue: 6868 rules.
60800 rules inserted. Base: 23889 rules (2145 with conclusion selected). Queue: 6664 rules.
61000 rules inserted. Base: 23903 rules (2149 with conclusion selected). Queue: 6629 rules.
61200 rules inserted. Base: 24020 rules (2149 with conclusion selected). Queue: 6727 rules.
61400 rules inserted. Base: 23944 rules (2149 with conclusion selected). Queue: 6576 rules.
61600 rules inserted. Base: 23959 rules (2153 with conclusion selected). Queue: 6370 rules.
61800 rules inserted. Base: 23893 rules (2156 with conclusion selected). Queue: 6221 rules.
62000 rules inserted. Base: 23895 rules (2159 with conclusion selected). Queue: 6081 rules.
62200 rules inserted. Base: 23907 rules (2161 with conclusion selected). Queue: 5876 rules.
62400 rules inserted. Base: 23906 rules (2165 with conclusion selected). Queue: 5729 rules.
62600 rules inserted. Base: 23829 rules (2165 with conclusion selected). Queue: 5584 rules.
62800 rules inserted. Base: 23978 rules (2171 with conclusion selected). Queue: 5564 rules.
63000 rules inserted. Base: 24093 rules (2171 with conclusion selected). Queue: 6037 rules.
63200 rules inserted. Base: 24247 rules (2171 with conclusion selected). Queue: 6236 rules.
63400 rules inserted. Base: 24351 rules (2199 with conclusion selected). Queue: 6704 rules.
63600 rules inserted. Base: 24456 rules (2203 with conclusion selected). Queue: 6864 rules.
63800 rules inserted. Base: 24618 rules (2203 with conclusion selected). Queue: 6981 rules.
64000 rules inserted. Base: 24720 rules (2207 with conclusion selected). Queue: 7094 rules.
64200 rules inserted. Base: 24861 rules (2210 with conclusion selected). Queue: 7017 rules.
64400 rules inserted. Base: 24941 rules (2242 with conclusion selected). Queue: 7029 rules.
64600 rules inserted. Base: 25025 rules (2254 with conclusion selected). Queue: 7123 rules.
64800 rules inserted. Base: 25073 rules (2254 with conclusion selected). Queue: 7111 rules.
65000 rules inserted. Base: 25234 rules (2261 with conclusion selected). Queue: 7482 rules.
65200 rules inserted. Base: 25325 rules (2265 with conclusion selected). Queue: 7551 rules.
65400 rules inserted. Base: 25484 rules (2265 with conclusion selected). Queue: 7639 rules.
65600 rules inserted. Base: 25589 rules (2269 with conclusion selected). Queue: 7748 rules.
65800 rules inserted. Base: 25741 rules (2269 with conclusion selected). Queue: 7748 rules.
66000 rules inserted. Base: 25876 rules (2269 with conclusion selected). Queue: 7703 rules.
66200 rules inserted. Base: 25985 rules (2269 with conclusion selected). Queue: 7682 rules.
66400 rules inserted. Base: 26060 rules (2273 with conclusion selected). Queue: 7681 rules.
66600 rules inserted. Base: 26089 rules (2284 with conclusion selected). Queue: 7690 rules.
66800 rules inserted. Base: 26236 rules (2298 with conclusion selected). Queue: 7986 rules.
67000 rules inserted. Base: 26263 rules (2302 with conclusion selected). Queue: 7997 rules.
67200 rules inserted. Base: 26299 rules (2316 with conclusion selected). Queue: 8017 rules.
67400 rules inserted. Base: 26424 rules (2329 with conclusion selected). Queue: 8203 rules.
67600 rules inserted. Base: 26532 rules (2331 with conclusion selected). Queue: 8155 rules.
67800 rules inserted. Base: 26484 rules (2335 with conclusion selected). Queue: 8018 rules.
68000 rules inserted. Base: 26520 rules (2349 with conclusion selected). Queue: 8030 rules.
68200 rules inserted. Base: 26630 rules (2362 with conclusion selected). Queue: 8233 rules.
68400 rules inserted. Base: 26697 rules (2364 with conclusion selected). Queue: 8328 rules.
68600 rules inserted. Base: 26697 rules (2368 with conclusion selected). Queue: 8125 rules.
68800 rules inserted. Base: 26672 rules (2368 with conclusion selected). Queue: 7990 rules.
69000 rules inserted. Base: 26609 rules (2372 with conclusion selected). Queue: 7811 rules.
69200 rules inserted. Base: 26647 rules (2376 with conclusion selected). Queue: 7666 rules.
69400 rules inserted. Base: 26624 rules (2379 with conclusion selected). Queue: 7531 rules.
69600 rules inserted. Base: 26620 rules (2380 with conclusion selected). Queue: 7330 rules.
69800 rules inserted. Base: 26629 rules (2384 with conclusion selected). Queue: 7313 rules.
70000 rules inserted. Base: 26763 rules (2384 with conclusion selected). Queue: 7248 rules.
70200 rules inserted. Base: 26886 rules (2384 with conclusion selected). Queue: 7231 rules.
70400 rules inserted. Base: 27000 rules (2384 with conclusion selected). Queue: 7215 rules.
70600 rules inserted. Base: 27129 rules (2388 with conclusion selected). Queue: 7369 rules.
70800 rules inserted. Base: 27254 rules (2388 with conclusion selected). Queue: 7351 rules.
71000 rules inserted. Base: 27369 rules (2388 with conclusion selected). Queue: 7335 rules.
71200 rules inserted. Base: 27472 rules (2392 with conclusion selected). Queue: 7497 rules.
71400 rules inserted. Base: 27589 rules (2394 with conclusion selected). Queue: 7418 rules.
71600 rules inserted. Base: 27579 rules (2402 with conclusion selected). Queue: 7346 rules.
71800 rules inserted. Base: 27738 rules (2410 with conclusion selected). Queue: 7363 rules.
72000 rules inserted. Base: 27833 rules (2414 with conclusion selected). Queue: 7479 rules.
72200 rules inserted. Base: 27980 rules (2414 with conclusion selected). Queue: 7488 rules.
72400 rules inserted. Base: 28114 rules (2414 with conclusion selected). Queue: 7462 rules.
72600 rules inserted. Base: 28199 rules (2414 with conclusion selected). Queue: 7436 rules.
72800 rules inserted. Base: 28328 rules (2414 with conclusion selected). Queue: 7405 rules.
73000 rules inserted. Base: 28461 rules (2414 with conclusion selected). Queue: 7379 rules.
73200 rules inserted. Base: 28555 rules (2414 with conclusion selected). Queue: 7359 rules.
73400 rules inserted. Base: 28708 rules (2414 with conclusion selected). Queue: 7340 rules.
73600 rules inserted. Base: 28813 rules (2414 with conclusion selected). Queue: 7829 rules.
73800 rules inserted. Base: 28974 rules (2414 with conclusion selected). Queue: 8050 rules.
74000 rules inserted. Base: 29069 rules (2424 with conclusion selected). Queue: 8408 rules.
74200 rules inserted. Base: 29186 rules (2434 with conclusion selected). Queue: 8322 rules.
74400 rules inserted. Base: 29328 rules (2437 with conclusion selected). Queue: 8431 rules.
74600 rules inserted. Base: 29439 rules (2438 with conclusion selected). Queue: 8566 rules.
74800 rules inserted. Base: 29478 rules (2440 with conclusion selected). Queue: 8569 rules.
75000 rules inserted. Base: 29583 rules (2448 with conclusion selected). Queue: 8454 rules.
75200 rules inserted. Base: 29717 rules (2456 with conclusion selected). Queue: 8458 rules.
75400 rules inserted. Base: 29814 rules (2460 with conclusion selected). Queue: 8570 rules.
75600 rules inserted. Base: 29945 rules (2468 with conclusion selected). Queue: 8596 rules.
75800 rules inserted. Base: 30054 rules (2480 with conclusion selected). Queue: 8489 rules.
76000 rules inserted. Base: 30185 rules (2488 with conclusion selected). Queue: 8480 rules.
76200 rules inserted. Base: 30295 rules (2492 with conclusion selected). Queue: 8534 rules.
76400 rules inserted. Base: 30444 rules (2492 with conclusion selected). Queue: 8649 rules.
76600 rules inserted. Base: 30521 rules (2500 with conclusion selected). Queue: 8787 rules.
76800 rules inserted. Base: 30550 rules (2510 with conclusion selected). Queue: 8799 rules.
77000 rules inserted. Base: 30680 rules (2523 with conclusion selected). Queue: 8983 rules.
77200 rules inserted. Base: 30826 rules (2523 with conclusion selected). Queue: 9336 rules.
77400 rules inserted. Base: 30965 rules (2523 with conclusion selected). Queue: 9573 rules.
77600 rules inserted. Base: 31101 rules (2523 with conclusion selected). Queue: 10073 rules.
77800 rules inserted. Base: 31240 rules (2527 with conclusion selected). Queue: 10079 rules.
78000 rules inserted. Base: 31382 rules (2527 with conclusion selected). Queue: 10583 rules.
78200 rules inserted. Base: 31521 rules (2527 with conclusion selected). Queue: 10792 rules.
78400 rules inserted. Base: 31659 rules (2528 with conclusion selected). Queue: 11054 rules.
78600 rules inserted. Base: 31785 rules (2571 with conclusion selected). Queue: 11073 rules.
78800 rules inserted. Base: 31915 rules (2579 with conclusion selected). Queue: 11045 rules.
79000 rules inserted. Base: 32034 rules (2587 with conclusion selected). Queue: 11125 rules.
79200 rules inserted. Base: 32164 rules (2587 with conclusion selected). Queue: 11106 rules.
79400 rules inserted. Base: 32257 rules (2587 with conclusion selected). Queue: 11088 rules.
79600 rules inserted. Base: 32402 rules (2587 with conclusion selected). Queue: 11061 rules.
79800 rules inserted. Base: 32538 rules (2587 with conclusion selected). Queue: 11554 rules.
80000 rules inserted. Base: 32675 rules (2587 with conclusion selected). Queue: 11751 rules.
80200 rules inserted. Base: 32815 rules (2591 with conclusion selected). Queue: 12362 rules.
80400 rules inserted. Base: 32938 rules (2591 with conclusion selected). Queue: 12706 rules.
80600 rules inserted. Base: 33101 rules (2591 with conclusion selected). Queue: 12932 rules.
80800 rules inserted. Base: 33081 rules (2595 with conclusion selected). Queue: 13333 rules.
81000 rules inserted. Base: 33036 rules (2599 with conclusion selected). Queue: 13141 rules.
81200 rules inserted. Base: 33022 rules (2602 with conclusion selected). Queue: 13026 rules.
81400 rules inserted. Base: 33007 rules (2603 with conclusion selected). Queue: 12862 rules.
81600 rules inserted. Base: 33036 rules (2607 with conclusion selected). Queue: 12726 rules.
81800 rules inserted. Base: 32992 rules (2610 with conclusion selected). Queue: 12610 rules.
82000 rules inserted. Base: 32976 rules (2611 with conclusion selected). Queue: 12418 rules.
82200 rules inserted. Base: 33019 rules (2615 with conclusion selected). Queue: 12356 rules.
82400 rules inserted. Base: 32995 rules (2653 with conclusion selected). Queue: 12343 rules.
82600 rules inserted. Base: 33114 rules (2660 with conclusion selected). Queue: 12344 rules.
82800 rules inserted. Base: 33236 rules (2660 with conclusion selected). Queue: 12310 rules.
83000 rules inserted. Base: 33368 rules (2660 with conclusion selected). Queue: 12292 rules.
83200 rules inserted. Base: 33434 rules (2660 with conclusion selected). Queue: 12259 rules.
83400 rules inserted. Base: 33358 rules (2699 with conclusion selected). Queue: 12248 rules.
83600 rules inserted. Base: 33483 rules (2713 with conclusion selected). Queue: 12258 rules.
83800 rules inserted. Base: 33621 rules (2713 with conclusion selected). Queue: 12239 rules.
84000 rules inserted. Base: 33736 rules (2713 with conclusion selected). Queue: 12220 rules.
84200 rules inserted. Base: 33724 rules (2749 with conclusion selected). Queue: 12324 rules.
84400 rules inserted. Base: 33850 rules (2764 with conclusion selected). Queue: 12337 rules.
84600 rules inserted. Base: 33976 rules (2764 with conclusion selected). Queue: 12303 rules.
84800 rules inserted. Base: 34107 rules (2764 with conclusion selected). Queue: 12285 rules.
85000 rules inserted. Base: 34165 rules (2772 with conclusion selected). Queue: 12227 rules.
85200 rules inserted. Base: 34193 rules (2776 with conclusion selected). Queue: 12136 rules.
85400 rules inserted. Base: 34315 rules (2784 with conclusion selected). Queue: 12014 rules.
85600 rules inserted. Base: 34461 rules (2788 with conclusion selected). Queue: 12132 rules.
85800 rules inserted. Base: 34562 rules (2792 with conclusion selected). Queue: 12261 rules.
86000 rules inserted. Base: 34632 rules (2794 with conclusion selected). Queue: 12177 rules.
86200 rules inserted. Base: 34676 rules (2797 with conclusion selected). Queue: 12046 rules.
86400 rules inserted. Base: 34627 rules (2798 with conclusion selected). Queue: 11935 rules.
86600 rules inserted. Base: 34682 rules (2801 with conclusion selected). Queue: 11742 rules.
86800 rules inserted. Base: 34636 rules (2805 with conclusion selected). Queue: 11640 rules.
87000 rules inserted. Base: 34617 rules (2806 with conclusion selected). Queue: 11451 rules.
87200 rules inserted. Base: 34569 rules (2810 with conclusion selected). Queue: 11341 rules.
87400 rules inserted. Base: 34621 rules (2810 with conclusion selected). Queue: 11149 rules.
87600 rules inserted. Base: 34747 rules (2817 with conclusion selected). Queue: 11400 rules.
87800 rules inserted. Base: 34754 rules (2817 with conclusion selected). Queue: 11373 rules.
88000 rules inserted. Base: 34643 rules (2821 with conclusion selected). Queue: 11202 rules.
88200 rules inserted. Base: 34687 rules (2824 with conclusion selected). Queue: 11069 rules.
88400 rules inserted. Base: 34667 rules (2825 with conclusion selected). Queue: 10934 rules.
88600 rules inserted. Base: 34694 rules (2829 with conclusion selected). Queue: 10772 rules.
88800 rules inserted. Base: 34645 rules (2832 with conclusion selected). Queue: 10659 rules.
89000 rules inserted. Base: 34626 rules (2833 with conclusion selected). Queue: 10467 rules.
89200 rules inserted. Base: 34674 rules (2840 with conclusion selected). Queue: 10584 rules.
89400 rules inserted. Base: 34860 rules (2840 with conclusion selected). Queue: 10647 rules.
89600 rules inserted. Base: 34936 rules (2852 with conclusion selected). Queue: 10887 rules.
89800 rules inserted. Base: 34986 rules (2852 with conclusion selected). Queue: 10732 rules.
90000 rules inserted. Base: 35151 rules (2852 with conclusion selected). Queue: 10967 rules.
90200 rules inserted. Base: 35285 rules (2852 with conclusion selected). Queue: 11175 rules.
90400 rules inserted. Base: 35303 rules (2856 with conclusion selected). Queue: 11909 rules.
90600 rules inserted. Base: 35353 rules (2859 with conclusion selected). Queue: 11759 rules.
90800 rules inserted. Base: 35304 rules (2860 with conclusion selected). Queue: 11644 rules.
91000 rules inserted. Base: 35288 rules (2864 with conclusion selected). Queue: 11448 rules.
91200 rules inserted. Base: 35313 rules (2867 with conclusion selected). Queue: 11341 rules.
91400 rules inserted. Base: 35294 rules (2868 with conclusion selected). Queue: 11146 rules.
91600 rules inserted. Base: 35246 rules (2872 with conclusion selected). Queue: 11032 rules.
91800 rules inserted. Base: 35227 rules (2872 with conclusion selected). Queue: 10835 rules.
92000 rules inserted. Base: 35319 rules (2876 with conclusion selected). Queue: 10835 rules.
92200 rules inserted. Base: 35325 rules (2876 with conclusion selected). Queue: 10737 rules.
92400 rules inserted. Base: 35220 rules (2880 with conclusion selected). Queue: 10561 rules.
92600 rules inserted. Base: 35258 rules (2883 with conclusion selected). Queue: 10428 rules.
92800 rules inserted. Base: 35238 rules (2884 with conclusion selected). Queue: 10287 rules.
93000 rules inserted. Base: 35265 rules (2888 with conclusion selected). Queue: 10127 rules.
93200 rules inserted. Base: 35216 rules (2891 with conclusion selected). Queue: 10012 rules.
93400 rules inserted. Base: 35197 rules (2892 with conclusion selected). Queue: 9817 rules.
93600 rules inserted. Base: 35239 rules (2896 with conclusion selected). Queue: 9755 rules.
93800 rules inserted. Base: 35307 rules (2902 with conclusion selected). Queue: 9770 rules.
94000 rules inserted. Base: 35335 rules (2914 with conclusion selected). Queue: 9782 rules.
94200 rules inserted. Base: 35421 rules (2927 with conclusion selected). Queue: 9966 rules.
94400 rules inserted. Base: 35481 rules (2927 with conclusion selected). Queue: 10061 rules.
94600 rules inserted. Base: 35546 rules (2927 with conclusion selected). Queue: 10311 rules.
94800 rules inserted. Base: 35676 rules (2927 with conclusion selected). Queue: 10523 rules.
95000 rules inserted. Base: 35843 rules (2927 with conclusion selected). Queue: 10754 rules.
95200 rules inserted. Base: 35887 rules (2929 with conclusion selected). Queue: 10918 rules.
95400 rules inserted. Base: 35886 rules (2939 with conclusion selected). Queue: 10842 rules.
95600 rules inserted. Base: 35953 rules (2939 with conclusion selected). Queue: 11075 rules.
95800 rules inserted. Base: 36082 rules (2939 with conclusion selected). Queue: 11321 rules.
96000 rules inserted. Base: 36209 rules (2939 with conclusion selected). Queue: 11693 rules.
96200 rules inserted. Base: 36257 rules (2939 with conclusion selected). Queue: 12118 rules.
96400 rules inserted. Base: 36215 rules (2939 with conclusion selected). Queue: 12084 rules.
96600 rules inserted. Base: 36363 rules (2939 with conclusion selected). Queue: 12404 rules.
96800 rules inserted. Base: 36508 rules (2939 with conclusion selected). Queue: 12538 rules.
97000 rules inserted. Base: 36592 rules (2943 with conclusion selected). Queue: 13056 rules.
97200 rules inserted. Base: 36571 rules (2975 with conclusion selected). Queue: 12992 rules.
97400 rules inserted. Base: 36718 rules (2992 with conclusion selected). Queue: 12985 rules.
97600 rules inserted. Base: 36847 rules (2992 with conclusion selected). Queue: 12961 rules.
97800 rules inserted. Base: 36983 rules (2992 with conclusion selected). Queue: 12942 rules.
98000 rules inserted. Base: 37027 rules (2996 with conclusion selected). Queue: 12917 rules.
98200 rules inserted. Base: 37057 rules (3008 with conclusion selected). Queue: 12933 rules.
98400 rules inserted. Base: 37080 rules (3020 with conclusion selected). Queue: 12931 rules.
98600 rules inserted. Base: 37239 rules (3023 with conclusion selected). Queue: 13062 rules.
98800 rules inserted. Base: 37317 rules (3024 with conclusion selected). Queue: 13194 rules.
99000 rules inserted. Base: 37358 rules (3030 with conclusion selected). Queue: 13225 rules.
99200 rules inserted. Base: 37386 rules (3042 with conclusion selected). Queue: 13233 rules.
99400 rules inserted. Base: 37501 rules (3049 with conclusion selected). Queue: 13418 rules.
99600 rules inserted. Base: 37575 rules (3052 with conclusion selected). Queue: 13549 rules.
99800 rules inserted. Base: 37699 rules (3052 with conclusion selected). Queue: 13539 rules.
100000 rules inserted. Base: 37707 rules (3060 with conclusion selected). Queue: 13469 rules.
100200 rules inserted. Base: 37749 rules (3062 with conclusion selected). Queue: 13315 rules.
100400 rules inserted. Base: 37794 rules (3062 with conclusion selected). Queue: 13252 rules.
100600 rules inserted. Base: 37772 rules (3066 with conclusion selected). Queue: 13059 rules.
100800 rules inserted. Base: 37712 rules (3066 with conclusion selected). Queue: 12951 rules.
101000 rules inserted. Base: 37691 rules (3070 with conclusion selected). Queue: 12757 rules.
101200 rules inserted. Base: 37708 rules (3074 with conclusion selected). Queue: 12659 rules.
101400 rules inserted. Base: 37659 rules (3074 with conclusion selected). Queue: 12473 rules.
101600 rules inserted. Base: 37698 rules (3078 with conclusion selected). Queue: 12359 rules.
101800 rules inserted. Base: 37607 rules (3078 with conclusion selected). Queue: 12203 rules.
102000 rules inserted. Base: 37730 rules (3082 with conclusion selected). Queue: 12219 rules.
102200 rules inserted. Base: 37760 rules (3094 with conclusion selected). Queue: 12235 rules.
102400 rules inserted. Base: 37759 rules (3106 with conclusion selected). Queue: 12233 rules.
102600 rules inserted. Base: 37940 rules (3113 with conclusion selected). Queue: 12562 rules.
102800 rules inserted. Base: 37968 rules (3125 with conclusion selected). Queue: 12582 rules.
103000 rules inserted. Base: 37988 rules (3131 with conclusion selected). Queue: 12594 rules.
103200 rules inserted. Base: 38156 rules (3144 with conclusion selected). Queue: 12812 rules.
103400 rules inserted. Base: 38277 rules (3148 with conclusion selected). Queue: 12786 rules.
103600 rules inserted. Base: 38411 rules (3156 with conclusion selected). Queue: 12660 rules.
103800 rules inserted. Base: 38569 rules (3160 with conclusion selected). Queue: 12817 rules.
104000 rules inserted. Base: 38622 rules (3164 with conclusion selected). Queue: 12885 rules.
104200 rules inserted. Base: 38785 rules (3168 with conclusion selected). Queue: 12889 rules.
104400 rules inserted. Base: 38810 rules (3173 with conclusion selected). Queue: 12983 rules.
104600 rules inserted. Base: 38859 rules (3176 with conclusion selected). Queue: 12786 rules.
104800 rules inserted. Base: 38795 rules (3177 with conclusion selected). Queue: 12680 rules.
105000 rules inserted. Base: 38770 rules (3181 with conclusion selected). Queue: 12484 rules.
105200 rules inserted. Base: 38783 rules (3184 with conclusion selected). Queue: 12386 rules.
105400 rules inserted. Base: 38755 rules (3185 with conclusion selected). Queue: 12191 rules.
105600 rules inserted. Base: 38766 rules (3188 with conclusion selected). Queue: 12085 rules.
105800 rules inserted. Base: 38738 rules (3189 with conclusion selected). Queue: 11890 rules.
106000 rules inserted. Base: 38743 rules (3207 with conclusion selected). Queue: 11773 rules.
106200 rules inserted. Base: 38782 rules (3209 with conclusion selected). Queue: 11732 rules.
106400 rules inserted. Base: 38757 rules (3213 with conclusion selected). Queue: 11536 rules.
106600 rules inserted. Base: 38692 rules (3213 with conclusion selected). Queue: 11429 rules.
106800 rules inserted. Base: 38742 rules (3217 with conclusion selected). Queue: 11233 rules.
107000 rules inserted. Base: 38755 rules (3220 with conclusion selected). Queue: 11135 rules.
107200 rules inserted. Base: 38727 rules (3221 with conclusion selected). Queue: 10940 rules.
107400 rules inserted. Base: 38664 rules (3225 with conclusion selected). Queue: 10835 rules.
107600 rules inserted. Base: 38570 rules (3225 with conclusion selected). Queue: 10640 rules.
107800 rules inserted. Base: 38617 rules (3225 with conclusion selected). Queue: 10452 rules.
108000 rules inserted. Base: 38590 rules (3227 with conclusion selected). Queue: 10404 rules.
108200 rules inserted. Base: 38674 rules (3235 with conclusion selected). Queue: 10302 rules.
108400 rules inserted. Base: 38650 rules (3235 with conclusion selected). Queue: 10237 rules.
108600 rules inserted. Base: 38700 rules (3239 with conclusion selected). Queue: 10041 rules.
108800 rules inserted. Base: 38635 rules (3239 with conclusion selected). Queue: 9934 rules.
109000 rules inserted. Base: 38611 rules (3243 with conclusion selected). Queue: 9737 rules.
109200 rules inserted. Base: 38624 rules (3247 with conclusion selected). Queue: 9641 rules.
109400 rules inserted. Base: 38584 rules (3247 with conclusion selected). Queue: 9448 rules.
109600 rules inserted. Base: 38607 rules (3251 with conclusion selected). Queue: 9340 rules.
109800 rules inserted. Base: 38509 rules (3251 with conclusion selected). Queue: 9315 rules.
110000 rules inserted. Base: 38435 rules (3255 with conclusion selected). Queue: 9271 rules.
110200 rules inserted. Base: 38595 rules (3255 with conclusion selected). Queue: 9542 rules.
110400 rules inserted. Base: 38727 rules (3255 with conclusion selected). Queue: 9801 rules.
110600 rules inserted. Base: 38844 rules (3255 with conclusion selected). Queue: 10332 rules.
110800 rules inserted. Base: 38975 rules (3261 with conclusion selected). Queue: 10198 rules.
111000 rules inserted. Base: 39111 rules (3269 with conclusion selected). Queue: 10068 rules.
111200 rules inserted. Base: 39276 rules (3273 with conclusion selected). Queue: 9968 rules.
111400 rules inserted. Base: 39399 rules (3273 with conclusion selected). Queue: 9949 rules.
111600 rules inserted. Base: 39502 rules (3273 with conclusion selected). Queue: 9931 rules.
111800 rules inserted. Base: 39644 rules (3273 with conclusion selected). Queue: 9902 rules.
112000 rules inserted. Base: 39772 rules (3277 with conclusion selected). Queue: 9773 rules.
112200 rules inserted. Base: 39908 rules (3285 with conclusion selected). Queue: 9643 rules.
112400 rules inserted. Base: 40048 rules (3289 with conclusion selected). Queue: 9574 rules.
112600 rules inserted. Base: 40166 rules (3289 with conclusion selected). Queue: 9546 rules.
112800 rules inserted. Base: 40256 rules (3289 with conclusion selected). Queue: 9537 rules.
113000 rules inserted. Base: 40414 rules (3289 with conclusion selected). Queue: 9506 rules.
113200 rules inserted. Base: 40556 rules (3296 with conclusion selected). Queue: 9401 rules.
113400 rules inserted. Base: 40623 rules (3301 with conclusion selected). Queue: 9525 rules.
113600 rules inserted. Base: 40653 rules (3313 with conclusion selected). Queue: 9541 rules.
113800 rules inserted. Base: 40675 rules (3324 with conclusion selected). Queue: 9538 rules.
114000 rules inserted. Base: 40854 rules (3332 with conclusion selected). Queue: 9833 rules.
114200 rules inserted. Base: 40977 rules (3336 with conclusion selected). Queue: 9691 rules.
114400 rules inserted. Base: 41113 rules (3344 with conclusion selected). Queue: 9563 rules.
114600 rules inserted. Base: 41273 rules (3349 with conclusion selected). Queue: 9739 rules.
114800 rules inserted. Base: 41299 rules (3352 with conclusion selected). Queue: 9802 rules.
115000 rules inserted. Base: 41445 rules (3352 with conclusion selected). Queue: 9778 rules.
115200 rules inserted. Base: 41579 rules (3360 with conclusion selected). Queue: 9652 rules.
115400 rules inserted. Base: 41725 rules (3368 with conclusion selected). Queue: 9531 rules.
115600 rules inserted. Base: 41901 rules (3371 with conclusion selected). Queue: 9684 rules.
115800 rules inserted. Base: 41927 rules (3372 with conclusion selected). Queue: 9853 rules.
116000 rules inserted. Base: 41898 rules (3410 with conclusion selected). Queue: 9807 rules.
116200 rules inserted. Base: 42016 rules (3417 with conclusion selected). Queue: 9815 rules.
116400 rules inserted. Base: 42146 rules (3417 with conclusion selected). Queue: 9777 rules.
116600 rules inserted. Base: 42250 rules (3417 with conclusion selected). Queue: 9755 rules.
116800 rules inserted. Base: 42398 rules (3417 with conclusion selected). Queue: 9678 rules.
117000 rules inserted. Base: 42413 rules (3421 with conclusion selected). Queue: 9646 rules.
117200 rules inserted. Base: 42431 rules (3429 with conclusion selected). Queue: 9658 rules.
117400 rules inserted. Base: 42459 rules (3439 with conclusion selected). Queue: 9670 rules.
117600 rules inserted. Base: 42535 rules (3455 with conclusion selected). Queue: 9564 rules.
117800 rules inserted. Base: 42559 rules (3462 with conclusion selected). Queue: 9695 rules.
118000 rules inserted. Base: 42587 rules (3474 with conclusion selected). Queue: 9707 rules.
118200 rules inserted. Base: 42603 rules (3484 with conclusion selected). Queue: 9608 rules.
118400 rules inserted. Base: 42664 rules (3493 with conclusion selected). Queue: 9583 rules.
118600 rules inserted. Base: 42689 rules (3499 with conclusion selected). Queue: 9596 rules.
118800 rules inserted. Base: 42717 rules (3511 with conclusion selected). Queue: 9604 rules.
119000 rules inserted. Base: 42741 rules (3517 with conclusion selected). Queue: 9480 rules.
119200 rules inserted. Base: 42826 rules (3523 with conclusion selected). Queue: 9391 rules.
119400 rules inserted. Base: 42856 rules (3525 with conclusion selected). Queue: 9357 rules.
119600 rules inserted. Base: 42825 rules (3529 with conclusion selected). Queue: 9164 rules.
119800 rules inserted. Base: 42827 rules (3529 with conclusion selected). Queue: 9064 rules.
120000 rules inserted. Base: 42796 rules (3533 with conclusion selected). Queue: 8870 rules.
120200 rules inserted. Base: 42801 rules (3536 with conclusion selected). Queue: 8778 rules.
120400 rules inserted. Base: 42767 rules (3537 with conclusion selected). Queue: 8586 rules.
120600 rules inserted. Base: 42770 rules (3540 with conclusion selected). Queue: 8487 rules.
120800 rules inserted. Base: 42736 rules (3541 with conclusion selected). Queue: 8293 rules.
121000 rules inserted. Base: 42564 rules (3579 with conclusion selected). Queue: 8401 rules.
121200 rules inserted. Base: 42626 rules (3581 with conclusion selected). Queue: 8649 rules.
121400 rules inserted. Base: 42764 rules (3581 with conclusion selected). Queue: 8906 rules.
121600 rules inserted. Base: 42900 rules (3581 with conclusion selected). Queue: 9304 rules.
121800 rules inserted. Base: 42868 rules (3621 with conclusion selected). Queue: 9461 rules.
122000 rules inserted. Base: 43026 rules (3621 with conclusion selected). Queue: 9702 rules.
122200 rules inserted. Base: 43164 rules (3621 with conclusion selected). Queue: 9959 rules.
122400 rules inserted. Base: 43294 rules (3621 with conclusion selected). Queue: 10503 rules.
122600 rules inserted. Base: 43378 rules (3629 with conclusion selected). Queue: 10583 rules.
122800 rules inserted. Base: 43337 rules (3633 with conclusion selected). Queue: 10450 rules.
123000 rules inserted. Base: 43485 rules (3637 with conclusion selected). Queue: 10297 rules.
123200 rules inserted. Base: 43621 rules (3645 with conclusion selected). Queue: 10169 rules.
123400 rules inserted. Base: 43779 rules (3649 with conclusion selected). Queue: 10337 rules.
123600 rules inserted. Base: 43826 rules (3653 with conclusion selected). Queue: 10388 rules.
123800 rules inserted. Base: 43895 rules (3673 with conclusion selected). Queue: 10415 rules.
124000 rules inserted. Base: 43955 rules (3698 with conclusion selected). Queue: 10434 rules.
124200 rules inserted. Base: 44063 rules (3698 with conclusion selected). Queue: 10413 rules.
124400 rules inserted. Base: 44164 rules (3698 with conclusion selected). Queue: 10387 rules.
124600 rules inserted. Base: 44286 rules (3698 with conclusion selected). Queue: 10355 rules.
124800 rules inserted. Base: 44239 rules (3743 with conclusion selected). Queue: 10396 rules.
125000 rules inserted. Base: 44357 rules (3743 with conclusion selected). Queue: 10376 rules.
125200 rules inserted. Base: 44481 rules (3743 with conclusion selected). Queue: 10355 rules.
125400 rules inserted. Base: 44601 rules (3743 with conclusion selected). Queue: 10333 rules.
125600 rules inserted. Base: 44545 rules (3743 with conclusion selected). Queue: 10310 rules.
125800 rules inserted. Base: 44710 rules (3743 with conclusion selected). Queue: 10558 rules.
126000 rules inserted. Base: 44840 rules (3743 with conclusion selected). Queue: 10790 rules.
126200 rules inserted. Base: 45003 rules (3743 with conclusion selected). Queue: 11022 rules.
126400 rules inserted. Base: 45058 rules (3743 with conclusion selected). Queue: 11284 rules.
126600 rules inserted. Base: 45164 rules (3754 with conclusion selected). Queue: 11341 rules.
126800 rules inserted. Base: 45320 rules (3758 with conclusion selected). Queue: 11183 rules.
127000 rules inserted. Base: 45436 rules (3770 with conclusion selected). Queue: 11073 rules.
127200 rules inserted. Base: 45483 rules (3774 with conclusion selected). Queue: 11010 rules.
127400 rules inserted. Base: 45618 rules (3782 with conclusion selected). Queue: 10883 rules.
127600 rules inserted. Base: 45770 rules (3787 with conclusion selected). Queue: 10743 rules.
127800 rules inserted. Base: 45795 rules (3810 with conclusion selected). Queue: 10704 rules.
128000 rules inserted. Base: 45913 rules (3818 with conclusion selected). Queue: 10586 rules.
128200 rules inserted. Base: 46062 rules (3826 with conclusion selected). Queue: 10453 rules.
128400 rules inserted. Base: 46196 rules (3830 with conclusion selected). Queue: 10346 rules.
128600 rules inserted. Base: 46247 rules (3831 with conclusion selected). Queue: 10290 rules.
128800 rules inserted. Base: 46278 rules (3842 with conclusion selected). Queue: 10307 rules.
129000 rules inserted. Base: 46298 rules (3854 with conclusion selected). Queue: 10298 rules.
129200 rules inserted. Base: 46334 rules (3854 with conclusion selected). Queue: 10148 rules.
129400 rules inserted. Base: 46175 rules (3854 with conclusion selected). Queue: 10131 rules.
129600 rules inserted. Base: 46213 rules (3857 with conclusion selected). Queue: 9995 rules.
129800 rules inserted. Base: 46139 rules (3858 with conclusion selected). Queue: 9867 rules.
130000 rules inserted. Base: 46177 rules (3861 with conclusion selected). Queue: 9701 rules.
130200 rules inserted. Base: 46125 rules (3862 with conclusion selected). Queue: 9546 rules.
130400 rules inserted. Base: 46140 rules (3866 with conclusion selected). Queue: 9420 rules.
130600 rules inserted. Base: 46089 rules (3866 with conclusion selected). Queue: 9290 rules.
130800 rules inserted. Base: 46100 rules (3870 with conclusion selected). Queue: 9132 rules.
131000 rules inserted. Base: 46142 rules (3870 with conclusion selected). Queue: 9024 rules.
131200 rules inserted. Base: 46011 rules (3870 with conclusion selected). Queue: 8994 rules.
131400 rules inserted. Base: 46018 rules (3870 with conclusion selected). Queue: 8878 rules.
131600 rules inserted. Base: 45942 rules (3874 with conclusion selected). Queue: 8718 rules.
131800 rules inserted. Base: 45980 rules (3877 with conclusion selected). Queue: 8588 rules.
132000 rules inserted. Base: 45964 rules (3878 with conclusion selected). Queue: 8410 rules.
132200 rules inserted. Base: 46025 rules (3882 with conclusion selected). Queue: 8303 rules.
132400 rules inserted. Base: 45892 rules (3882 with conclusion selected). Queue: 8141 rules.
132600 rules inserted. Base: 45908 rules (3886 with conclusion selected). Queue: 8014 rules.
132800 rules inserted. Base: 45840 rules (3886 with conclusion selected). Queue: 7855 rules.
133000 rules inserted. Base: 45866 rules (3888 with conclusion selected). Queue: 7685 rules.
133200 rules inserted. Base: 45797 rules (3914 with conclusion selected). Queue: 7960 rules.
133400 rules inserted. Base: 45954 rules (3937 with conclusion selected). Queue: 7979 rules.
133600 rules inserted. Base: 46064 rules (3937 with conclusion selected). Queue: 7961 rules.
133800 rules inserted. Base: 46161 rules (3937 with conclusion selected). Queue: 7939 rules.
134000 rules inserted. Base: 46305 rules (3937 with conclusion selected). Queue: 7922 rules.
134200 rules inserted. Base: 46274 rules (3937 with conclusion selected). Queue: 7907 rules.
134400 rules inserted. Base: 46441 rules (3937 with conclusion selected). Queue: 8139 rules.
134600 rules inserted. Base: 46577 rules (3937 with conclusion selected). Queue: 8369 rules.
134800 rules inserted. Base: 46705 rules (3937 with conclusion selected). Queue: 8924 rules.
135000 rules inserted. Base: 46667 rules (3937 with conclusion selected). Queue: 8906 rules.
135200 rules inserted. Base: 46829 rules (3937 with conclusion selected). Queue: 9143 rules.
135400 rules inserted. Base: 46965 rules (3937 with conclusion selected). Queue: 9395 rules.
135600 rules inserted. Base: 47111 rules (3937 with conclusion selected). Queue: 9647 rules.
135800 rules inserted. Base: 47219 rules (3945 with conclusion selected). Queue: 9891 rules.
136000 rules inserted. Base: 47204 rules (3946 with conclusion selected). Queue: 9939 rules.
136200 rules inserted. Base: 47247 rules (3950 with conclusion selected). Queue: 9744 rules.
136400 rules inserted. Base: 47165 rules (3950 with conclusion selected). Queue: 9648 rules.
136600 rules inserted. Base: 47207 rules (3954 with conclusion selected). Queue: 9454 rules.
136800 rules inserted. Base: 47129 rules (3958 with conclusion selected). Queue: 9368 rules.
137000 rules inserted. Base: 47168 rules (3958 with conclusion selected). Queue: 9173 rules.
137200 rules inserted. Base: 47089 rules (3962 with conclusion selected). Queue: 9078 rules.
137400 rules inserted. Base: 47127 rules (3962 with conclusion selected). Queue: 8884 rules.
137600 rules inserted. Base: 47067 rules (3965 with conclusion selected). Queue: 8832 rules.
137800 rules inserted. Base: 47013 rules (4003 with conclusion selected). Queue: 8834 rules.
138000 rules inserted. Base: 46987 rules (4027 with conclusion selected). Queue: 8972 rules.
138200 rules inserted. Base: 47025 rules (4076 with conclusion selected). Queue: 8968 rules.
138400 rules inserted. Base: 46918 rules (4105 with conclusion selected). Queue: 9121 rules.
138600 rules inserted. Base: 47002 rules (4131 with conclusion selected). Queue: 9192 rules.
138800 rules inserted. Base: 47160 rules (4137 with conclusion selected). Queue: 9043 rules.
139000 rules inserted. Base: 47298 rules (4143 with conclusion selected). Queue: 8907 rules.
139200 rules inserted. Base: 47448 rules (4155 with conclusion selected). Queue: 8828 rules.
139400 rules inserted. Base: 47503 rules (4164 with conclusion selected). Queue: 8843 rules.
139600 rules inserted. Base: 47525 rules (4170 with conclusion selected). Queue: 8859 rules.
139800 rules inserted. Base: 47548 rules (4182 with conclusion selected). Queue: 8857 rules.
140000 rules inserted. Base: 47660 rules (4190 with conclusion selected). Queue: 8805 rules.
140200 rules inserted. Base: 47697 rules (4197 with conclusion selected). Queue: 8839 rules.
140400 rules inserted. Base: 47716 rules (4207 with conclusion selected). Queue: 8839 rules.
140600 rules inserted. Base: 47764 rules (4215 with conclusion selected). Queue: 8999 rules.
140800 rules inserted. Base: 47842 rules (4217 with conclusion selected). Queue: 9162 rules.
141000 rules inserted. Base: 47804 rules (4217 with conclusion selected). Queue: 8991 rules.
141200 rules inserted. Base: 47763 rules (4217 with conclusion selected). Queue: 8979 rules.
141400 rules inserted. Base: 47926 rules (4217 with conclusion selected). Queue: 9221 rules.
141600 rules inserted. Base: 48060 rules (4217 with conclusion selected). Queue: 9469 rules.
141800 rules inserted. Base: 48186 rules (4217 with conclusion selected). Queue: 10018 rules.
142000 rules inserted. Base: 48299 rules (4225 with conclusion selected). Queue: 9954 rules.
142200 rules inserted. Base: 48294 rules (4225 with conclusion selected). Queue: 9858 rules.
142400 rules inserted. Base: 48231 rules (4229 with conclusion selected). Queue: 9660 rules.
142600 rules inserted. Base: 48250 rules (4229 with conclusion selected). Queue: 9564 rules.
142800 rules inserted. Base: 48211 rules (4233 with conclusion selected). Queue: 9367 rules.
143000 rules inserted. Base: 48210 rules (4237 with conclusion selected). Queue: 9280 rules.
143200 rules inserted. Base: 48246 rules (4237 with conclusion selected). Queue: 9084 rules.
143400 rules inserted. Base: 48164 rules (4241 with conclusion selected). Queue: 8988 rules.
143600 rules inserted. Base: 48200 rules (4241 with conclusion selected). Queue: 8792 rules.
143800 rules inserted. Base: 48193 rules (4249 with conclusion selected). Queue: 8731 rules.
144000 rules inserted. Base: 48175 rules (4249 with conclusion selected). Queue: 8639 rules.
144200 rules inserted. Base: 48215 rules (4253 with conclusion selected). Queue: 8443 rules.
144400 rules inserted. Base: 48131 rules (4253 with conclusion selected). Queue: 8345 rules.
144600 rules inserted. Base: 48092 rules (4257 with conclusion selected). Queue: 8148 rules.
144800 rules inserted. Base: 48091 rules (4261 with conclusion selected). Queue: 8061 rules.
145000 rules inserted. Base: 48127 rules (4261 with conclusion selected). Queue: 7865 rules.
145200 rules inserted. Base: 48045 rules (4265 with conclusion selected). Queue: 7769 rules.
145400 rules inserted. Base: 48081 rules (4265 with conclusion selected). Queue: 7573 rules.
145600 rules inserted. Base: 48040 rules (4265 with conclusion selected). Queue: 7454 rules.
145800 rules inserted. Base: 48054 rules (4271 with conclusion selected). Queue: 7468 rules.
146000 rules inserted. Base: 48084 rules (4281 with conclusion selected). Queue: 7488 rules.
146200 rules inserted. Base: 48083 rules (4293 with conclusion selected). Queue: 7484 rules.
146400 rules inserted. Base: 48228 rules (4401 with conclusion selected). Queue: 7479 rules.
146600 rules inserted. Base: 48166 rules (4401 with conclusion selected). Queue: 7474 rules.
146800 rules inserted. Base: 48248 rules (4404 with conclusion selected). Queue: 7423 rules.
147000 rules inserted. Base: 48209 rules (4405 with conclusion selected). Queue: 7418 rules.
147200 rules inserted. Base: 48285 rules (4411 with conclusion selected). Queue: 7370 rules.
147400 rules inserted. Base: 48215 rules (4411 with conclusion selected). Queue: 7360 rules.
147600 rules inserted. Base: 48269 rules (4420 with conclusion selected). Queue: 7351 rules.
147800 rules inserted. Base: 48229 rules (4464 with conclusion selected). Queue: 7362 rules.
148000 rules inserted. Base: 48342 rules (4464 with conclusion selected). Queue: 7218 rules.
148200 rules inserted. Base: 48491 rules (4472 with conclusion selected). Queue: 7083 rules.
148400 rules inserted. Base: 48642 rules (4476 with conclusion selected). Queue: 6927 rules.
148600 rules inserted. Base: 48808 rules (4480 with conclusion selected). Queue: 6779 rules.
148800 rules inserted. Base: 48918 rules (4484 with conclusion selected). Queue: 6653 rules.
149000 rules inserted. Base: 49077 rules (4488 with conclusion selected). Queue: 6489 rules.
149200 rules inserted. Base: 49209 rules (4496 with conclusion selected). Queue: 6365 rules.
149400 rules inserted. Base: 49204 rules (4498 with conclusion selected). Queue: 6202 rules.
149600 rules inserted. Base: 49222 rules (4498 with conclusion selected). Queue: 6032 rules.
149800 rules inserted. Base: 49240 rules (4504 with conclusion selected). Queue: 5886 rules.
150000 rules inserted. Base: 49268 rules (4510 with conclusion selected). Queue: 5819 rules.
150200 rules inserted. Base: 49360 rules (4510 with conclusion selected). Queue: 5700 rules.
150400 rules inserted. Base: 49210 rules (4514 with conclusion selected). Queue: 5535 rules.
150600 rules inserted. Base: 49308 rules (4514 with conclusion selected). Queue: 5414 rules.
150800 rules inserted. Base: 49265 rules (4520 with conclusion selected). Queue: 5225 rules.
151000 rules inserted. Base: 49262 rules (4524 with conclusion selected). Queue: 5140 rules.
151200 rules inserted. Base: 49294 rules (4524 with conclusion selected). Queue: 4948 rules.
151400 rules inserted. Base: 49209 rules (4530 with conclusion selected). Queue: 4858 rules.
151600 rules inserted. Base: 49242 rules (4530 with conclusion selected). Queue: 4666 rules.
151800 rules inserted. Base: 49204 rules (4531 with conclusion selected). Queue: 4689 rules.
152000 rules inserted. Base: 49227 rules (4543 with conclusion selected). Queue: 4697 rules.
152200 rules inserted. Base: 49247 rules (4549 with conclusion selected). Queue: 4705 rules.
152400 rules inserted. Base: 49304 rules (4555 with conclusion selected). Queue: 4604 rules.
152600 rules inserted. Base: 49334 rules (4562 with conclusion selected). Queue: 4738 rules.
152800 rules inserted. Base: 49359 rules (4574 with conclusion selected). Queue: 4746 rules.
153000 rules inserted. Base: 49374 rules (4580 with conclusion selected). Queue: 4716 rules.
153200 rules inserted. Base: 49465 rules (4587 with conclusion selected). Queue: 4725 rules.
153400 rules inserted. Base: 49599 rules (4595 with conclusion selected). Queue: 4599 rules.
153600 rules inserted. Base: 49760 rules (4599 with conclusion selected). Queue: 4442 rules.
153800 rules inserted. Base: 49888 rules (4605 with conclusion selected). Queue: 4438 rules.
154000 rules inserted. Base: 50011 rules (4615 with conclusion selected). Queue: 4510 rules.
154200 rules inserted. Base: 50153 rules (4720 with conclusion selected). Queue: 4502 rules.
154400 rules inserted. Base: 50254 rules (4726 with conclusion selected). Queue: 4453 rules.
154600 rules inserted. Base: 50307 rules (4728 with conclusion selected). Queue: 4433 rules.
154800 rules inserted. Base: 50397 rules (4734 with conclusion selected). Queue: 4692 rules.
155000 rules inserted. Base: 50393 rules (4741 with conclusion selected). Queue: 4782 rules.
155200 rules inserted. Base: 50338 rules (4759 with conclusion selected). Queue: 4841 rules.
155400 rules inserted. Base: 50177 rules (4799 with conclusion selected). Queue: 4845 rules.
155600 rules inserted. Base: 50214 rules (4833 with conclusion selected). Queue: 4838 rules.
155800 rules inserted. Base: 50294 rules (4833 with conclusion selected). Queue: 4750 rules.
156000 rules inserted. Base: 50323 rules (4845 with conclusion selected). Queue: 4762 rules.
156200 rules inserted. Base: 50339 rules (4851 with conclusion selected). Queue: 4766 rules.
156400 rules inserted. Base: 50353 rules (4857 with conclusion selected). Queue: 4736 rules.
156600 rules inserted. Base: 50468 rules (4865 with conclusion selected). Queue: 4620 rules.
156800 rules inserted. Base: 50631 rules (4869 with conclusion selected). Queue: 4467 rules.
157000 rules inserted. Base: 50750 rules (4877 with conclusion selected). Queue: 4351 rules.
157200 rules inserted. Base: 50810 rules (4881 with conclusion selected). Queue: 4285 rules.
157400 rules inserted. Base: 50957 rules (4889 with conclusion selected). Queue: 4154 rules.
157600 rules inserted. Base: 51106 rules (4893 with conclusion selected). Queue: 4002 rules.
157800 rules inserted. Base: 51158 rules (4900 with conclusion selected). Queue: 3989 rules.
158000 rules inserted. Base: 51109 rules (4928 with conclusion selected). Queue: 3957 rules.
158200 rules inserted. Base: 51280 rules (4945 with conclusion selected). Queue: 4061 rules.
158400 rules inserted. Base: 51381 rules (4947 with conclusion selected). Queue: 3942 rules.
158600 rules inserted. Base: 51487 rules (4951 with conclusion selected). Queue: 3949 rules.
158800 rules inserted. Base: 51577 rules (4952 with conclusion selected). Queue: 3952 rules.
159000 rules inserted. Base: 51718 rules (5064 with conclusion selected). Queue: 3925 rules.
159200 rules inserted. Base: 51854 rules (5065 with conclusion selected). Queue: 3898 rules.
159400 rules inserted. Base: 51808 rules (5065 with conclusion selected). Queue: 3701 rules.
159600 rules inserted. Base: 51817 rules (5068 with conclusion selected). Queue: 3633 rules.
159800 rules inserted. Base: 51933 rules (5074 with conclusion selected). Queue: 3553 rules.
160000 rules inserted. Base: 52009 rules (5076 with conclusion selected). Queue: 3541 rules.
160200 rules inserted. Base: 51962 rules (5077 with conclusion selected). Queue: 3524 rules.
160400 rules inserted. Base: 51898 rules (5079 with conclusion selected). Queue: 3820 rules.
160600 rules inserted. Base: 52022 rules (5088 with conclusion selected). Queue: 3973 rules.
160800 rules inserted. Base: 52166 rules (5092 with conclusion selected). Queue: 3820 rules.
161000 rules inserted. Base: 52314 rules (5100 with conclusion selected). Queue: 3700 rules.
161200 rules inserted. Base: 52282 rules (5125 with conclusion selected). Queue: 3810 rules.
161400 rules inserted. Base: 52280 rules (5152 with conclusion selected). Queue: 3820 rules.
161600 rules inserted. Base: 52220 rules (5197 with conclusion selected). Queue: 3944 rules.
161800 rules inserted. Base: 52367 rules (5316 with conclusion selected). Queue: 3943 rules.
162000 rules inserted. Base: 52327 rules (5316 with conclusion selected). Queue: 3939 rules.
162200 rules inserted. Base: 52523 rules (5316 with conclusion selected). Queue: 3940 rules.
162400 rules inserted. Base: 52566 rules (5320 with conclusion selected). Queue: 4065 rules.
162600 rules inserted. Base: 52740 rules (5327 with conclusion selected). Queue: 4219 rules.
162800 rules inserted. Base: 52804 rules (5331 with conclusion selected). Queue: 4215 rules.
163000 rules inserted. Base: 52897 rules (5333 with conclusion selected). Queue: 4155 rules.
163200 rules inserted. Base: 52912 rules (5341 with conclusion selected). Queue: 4162 rules.
163400 rules inserted. Base: 53003 rules (5341 with conclusion selected). Queue: 4056 rules.
163600 rules inserted. Base: 53162 rules (5348 with conclusion selected). Queue: 3941 rules.
163800 rules inserted. Base: 53302 rules (5357 with conclusion selected). Queue: 3880 rules.
164000 rules inserted. Base: 53384 rules (5360 with conclusion selected). Queue: 3755 rules.
164200 rules inserted. Base: 53333 rules (5360 with conclusion selected). Queue: 3552 rules.
164400 rules inserted. Base: 53350 rules (5360 with conclusion selected). Queue: 3701 rules.
164600 rules inserted. Base: 53330 rules (5384 with conclusion selected). Queue: 3726 rules.
164800 rules inserted. Base: 53306 rules (5409 with conclusion selected). Queue: 3744 rules.
165000 rules inserted. Base: 53346 rules (5412 with conclusion selected). Queue: 3694 rules.
165200 rules inserted. Base: 53344 rules (5412 with conclusion selected). Queue: 3691 rules.
165400 rules inserted. Base: 53463 rules (5415 with conclusion selected). Queue: 3635 rules.
165600 rules inserted. Base: 53436 rules (5415 with conclusion selected). Queue: 3636 rules.
165800 rules inserted. Base: 53552 rules (5421 with conclusion selected). Queue: 3608 rules.
166000 rules inserted. Base: 53640 rules (5426 with conclusion selected). Queue: 3675 rules.
166200 rules inserted. Base: 53718 rules (5434 with conclusion selected). Queue: 3581 rules.
166400 rules inserted. Base: 53662 rules (5434 with conclusion selected). Queue: 3471 rules.
166600 rules inserted. Base: 53772 rules (5437 with conclusion selected). Queue: 3401 rules.
166800 rules inserted. Base: 53895 rules (5439 with conclusion selected). Queue: 3308 rules.
167000 rules inserted. Base: 53995 rules (5446 with conclusion selected). Queue: 3488 rules.
167200 rules inserted. Base: 54047 rules (5455 with conclusion selected). Queue: 3608 rules.
167400 rules inserted. Base: 54187 rules (5563 with conclusion selected). Queue: 3576 rules.
167600 rules inserted. Base: 54298 rules (5564 with conclusion selected). Queue: 3557 rules.
167800 rules inserted. Base: 54437 rules (5568 with conclusion selected). Queue: 3420 rules.
168000 rules inserted. Base: 54377 rules (5570 with conclusion selected). Queue: 3394 rules.
168200 rules inserted. Base: 54387 rules (5577 with conclusion selected). Queue: 3417 rules.
168400 rules inserted. Base: 54339 rules (5577 with conclusion selected). Queue: 3411 rules.
168600 rules inserted. Base: 54372 rules (5577 with conclusion selected). Queue: 3403 rules.
168800 rules inserted. Base: 54497 rules (5599 with conclusion selected). Queue: 3346 rules.
169000 rules inserted. Base: 54637 rules (5691 with conclusion selected). Queue: 3332 rules.
169200 rules inserted. Base: 54778 rules (5697 with conclusion selected). Queue: 3347 rules.
169400 rules inserted. Base: 54935 rules (5699 with conclusion selected). Queue: 3304 rules.
169600 rules inserted. Base: 54940 rules (5703 with conclusion selected). Queue: 3270 rules.
169800 rules inserted. Base: 54936 rules (5740 with conclusion selected). Queue: 3182 rules.
170000 rules inserted. Base: 55030 rules (5823 with conclusion selected). Queue: 3152 rules.
170200 rules inserted. Base: 55070 rules (5830 with conclusion selected). Queue: 3118 rules.
170400 rules inserted. Base: 55238 rules (5830 with conclusion selected). Queue: 3068 rules.
170600 rules inserted. Base: 55356 rules (5834 with conclusion selected). Queue: 3228 rules.
170800 rules inserted. Base: 55463 rules (5837 with conclusion selected). Queue: 3348 rules.
171000 rules inserted. Base: 55580 rules (5837 with conclusion selected). Queue: 3300 rules.
171200 rules inserted. Base: 55635 rules (5846 with conclusion selected). Queue: 3307 rules.
171400 rules inserted. Base: 55616 rules (5855 with conclusion selected). Queue: 3157 rules.
171600 rules inserted. Base: 55712 rules (5858 with conclusion selected). Queue: 3106 rules.
171800 rules inserted. Base: 55827 rules (5883 with conclusion selected). Queue: 3046 rules.
172000 rules inserted. Base: 55965 rules (5978 with conclusion selected). Queue: 3004 rules.
172200 rules inserted. Base: 56101 rules (5979 with conclusion selected). Queue: 3062 rules.
172400 rules inserted. Base: 56195 rules (5979 with conclusion selected). Queue: 2952 rules.
172600 rules inserted. Base: 56391 rules (5980 with conclusion selected). Queue: 3066 rules.
172800 rules inserted. Base: 56446 rules (5984 with conclusion selected). Queue: 3201 rules.
173000 rules inserted. Base: 56596 rules (5997 with conclusion selected). Queue: 3270 rules.
173200 rules inserted. Base: 56740 rules (6041 with conclusion selected). Queue: 3218 rules.
173400 rules inserted. Base: 56839 rules (6105 with conclusion selected). Queue: 3193 rules.
173600 rules inserted. Base: 56902 rules (6113 with conclusion selected). Queue: 3112 rules.
173800 rules inserted. Base: 56860 rules (6113 with conclusion selected). Queue: 2982 rules.
174000 rules inserted. Base: 56955 rules (6113 with conclusion selected). Queue: 2890 rules.
174200 rules inserted. Base: 56979 rules (6113 with conclusion selected). Queue: 3079 rules.
174400 rules inserted. Base: 57001 rules (6120 with conclusion selected). Queue: 3162 rules.
174600 rules inserted. Base: 57021 rules (6139 with conclusion selected). Queue: 3317 rules.
174800 rules inserted. Base: 57116 rules (6139 with conclusion selected). Queue: 3210 rules.
175000 rules inserted. Base: 57270 rules (6141 with conclusion selected). Queue: 3154 rules.
175200 rules inserted. Base: 57333 rules (6145 with conclusion selected). Queue: 3219 rules.
175400 rules inserted. Base: 57425 rules (6145 with conclusion selected). Queue: 3199 rules.
175600 rules inserted. Base: 57468 rules (6149 with conclusion selected). Queue: 3170 rules.
175800 rules inserted. Base: 57499 rules (6157 with conclusion selected). Queue: 3039 rules.
176000 rules inserted. Base: 57482 rules (6160 with conclusion selected). Queue: 2981 rules.
176200 rules inserted. Base: 57624 rules (6166 with conclusion selected). Queue: 2960 rules.
176400 rules inserted. Base: 57798 rules (6172 with conclusion selected). Queue: 3001 rules.
176600 rules inserted. Base: 57796 rules (6172 with conclusion selected). Queue: 2926 rules.
176800 rules inserted. Base: 57912 rules (6289 with conclusion selected). Queue: 2898 rules.
177000 rules inserted. Base: 57959 rules (6294 with conclusion selected). Queue: 2755 rules.
177200 rules inserted. Base: 58032 rules (6294 with conclusion selected). Queue: 2636 rules.
177400 rules inserted. Base: 58098 rules (6299 with conclusion selected). Queue: 2604 rules.
177600 rules inserted. Base: 58237 rules (6302 with conclusion selected). Queue: 2456 rules.
177800 rules inserted. Base: 58262 rules (6336 with conclusion selected). Queue: 2460 rules.
178000 rules inserted. Base: 58388 rules (6421 with conclusion selected). Queue: 2558 rules.
178200 rules inserted. Base: 58490 rules (6423 with conclusion selected). Queue: 2642 rules.
178400 rules inserted. Base: 58603 rules (6430 with conclusion selected). Queue: 2679 rules.
178600 rules inserted. Base: 58666 rules (6432 with conclusion selected). Queue: 2626 rules.
178800 rules inserted. Base: 58610 rules (6443 with conclusion selected). Queue: 2612 rules.
179000 rules inserted. Base: 58762 rules (6559 with conclusion selected). Queue: 2606 rules.
179200 rules inserted. Base: 58926 rules (6559 with conclusion selected). Queue: 2604 rules.
179400 rules inserted. Base: 59104 rules (6563 with conclusion selected). Queue: 2850 rules.
179600 rules inserted. Base: 59262 rules (6569 with conclusion selected). Queue: 2802 rules.
179800 rules inserted. Base: 59376 rules (6579 with conclusion selected). Queue: 2738 rules.
180000 rules inserted. Base: 59404 rules (6583 with conclusion selected). Queue: 2706 rules.
180200 rules inserted. Base: 59482 rules (6587 with conclusion selected). Queue: 2536 rules.
180400 rules inserted. Base: 59556 rules (6591 with conclusion selected). Queue: 2468 rules.
180600 rules inserted. Base: 59657 rules (6595 with conclusion selected). Queue: 2474 rules.
180800 rules inserted. Base: 59797 rules (6599 with conclusion selected). Queue: 2642 rules.
181000 rules inserted. Base: 59871 rules (6602 with conclusion selected). Queue: 2589 rules.
181200 rules inserted. Base: 59888 rules (6606 with conclusion selected). Queue: 2537 rules.
181400 rules inserted. Base: 60025 rules (6611 with conclusion selected). Queue: 2447 rules.
181600 rules inserted. Base: 60140 rules (6617 with conclusion selected). Queue: 2437 rules.
181800 rules inserted. Base: 60175 rules (6617 with conclusion selected). Queue: 2390 rules.
182000 rules inserted. Base: 60214 rules (6625 with conclusion selected). Queue: 2252 rules.
182200 rules inserted. Base: 60275 rules (6625 with conclusion selected). Queue: 2145 rules.
182400 rules inserted. Base: 60425 rules (6633 with conclusion selected). Queue: 2158 rules.
182600 rules inserted. Base: 60603 rules (6701 with conclusion selected). Queue: 2166 rules.
182800 rules inserted. Base: 60745 rules (6759 with conclusion selected). Queue: 2315 rules.
183000 rules inserted. Base: 60804 rules (6766 with conclusion selected). Queue: 2431 rules.
183200 rules inserted. Base: 60834 rules (6772 with conclusion selected). Queue: 2377 rules.
183400 rules inserted. Base: 60834 rules (6774 with conclusion selected). Queue: 2203 rules.
183600 rules inserted. Base: 60878 rules (6774 with conclusion selected). Queue: 2163 rules.
183800 rules inserted. Base: 61034 rules (6884 with conclusion selected). Queue: 2147 rules.
184000 rules inserted. Base: 61196 rules (6886 with conclusion selected). Queue: 2227 rules.
184200 rules inserted. Base: 61115 rules (6888 with conclusion selected). Queue: 2106 rules.
184400 rules inserted. Base: 61198 rules (6900 with conclusion selected). Queue: 2030 rules.
184600 rules inserted. Base: 61378 rules (6900 with conclusion selected). Queue: 2030 rules.
184800 rules inserted. Base: 61556 rules (6912 with conclusion selected). Queue: 2198 rules.
185000 rules inserted. Base: 61641 rules (6922 with conclusion selected). Queue: 2132 rules.
185200 rules inserted. Base: 61757 rules (6924 with conclusion selected). Queue: 2053 rules.
185400 rules inserted. Base: 61820 rules (6927 with conclusion selected). Queue: 1992 rules.
185600 rules inserted. Base: 61801 rules (6962 with conclusion selected). Queue: 1909 rules.
185800 rules inserted. Base: 61939 rules (7051 with conclusion selected). Queue: 1896 rules.
186000 rules inserted. Base: 62068 rules (7051 with conclusion selected). Queue: 1882 rules.
186200 rules inserted. Base: 62264 rules (7051 with conclusion selected). Queue: 1878 rules.
186400 rules inserted. Base: 62412 rules (7071 with conclusion selected). Queue: 1959 rules.
186600 rules inserted. Base: 62438 rules (7071 with conclusion selected). Queue: 1911 rules.
186800 rules inserted. Base: 62470 rules (7079 with conclusion selected). Queue: 1774 rules.
187000 rules inserted. Base: 62555 rules (7079 with conclusion selected). Queue: 1813 rules.
187200 rules inserted. Base: 62560 rules (7086 with conclusion selected). Queue: 1671 rules.
187400 rules inserted. Base: 62609 rules (7090 with conclusion selected). Queue: 1636 rules.
187600 rules inserted. Base: 62761 rules (7096 with conclusion selected). Queue: 1618 rules.
187800 rules inserted. Base: 62942 rules (7098 with conclusion selected). Queue: 1657 rules.
188000 rules inserted. Base: 62971 rules (7098 with conclusion selected). Queue: 1610 rules.
188200 rules inserted. Base: 63000 rules (7106 with conclusion selected). Queue: 1484 rules.
188400 rules inserted. Base: 63026 rules (7124 with conclusion selected). Queue: 1395 rules.
188600 rules inserted. Base: 62996 rules (7132 with conclusion selected). Queue: 1297 rules.
188800 rules inserted. Base: 63138 rules (7132 with conclusion selected). Queue: 1199 rules.
189000 rules inserted. Base: 63315 rules (7244 with conclusion selected). Queue: 1142 rules.
189200 rules inserted. Base: 63463 rules (7250 with conclusion selected). Queue: 1248 rules.
189400 rules inserted. Base: 63593 rules (7252 with conclusion selected). Queue: 1167 rules.
189600 rules inserted. Base: 63550 rules (7254 with conclusion selected). Queue: 1061 rules.
189800 rules inserted. Base: 63647 rules (7270 with conclusion selected). Queue: 1166 rules.
190000 rules inserted. Base: 63714 rules (7279 with conclusion selected). Queue: 1078 rules.
190200 rules inserted. Base: 63888 rules (7285 with conclusion selected). Queue: 1130 rules.
190400 rules inserted. Base: 64068 rules (7285 with conclusion selected). Queue: 1130 rules.
190600 rules inserted. Base: 64146 rules (7293 with conclusion selected). Queue: 1239 rules.
190800 rules inserted. Base: 64312 rules (7308 with conclusion selected). Queue: 1105 rules.
191000 rules inserted. Base: 64256 rules (7321 with conclusion selected). Queue: 1179 rules.
191200 rules inserted. Base: 64338 rules (7325 with conclusion selected). Queue: 1130 rules.
191400 rules inserted. Base: 64437 rules (7325 with conclusion selected). Queue: 1207 rules.
191600 rules inserted. Base: 64480 rules (7333 with conclusion selected). Queue: 1146 rules.
191800 rules inserted. Base: 64486 rules (7333 with conclusion selected). Queue: 963 rules.
192000 rules inserted. Base: 64578 rules (7357 with conclusion selected). Queue: 834 rules.
192200 rules inserted. Base: 64614 rules (7361 with conclusion selected). Queue: 902 rules.
192400 rules inserted. Base: 64685 rules (7362 with conclusion selected). Queue: 765 rules.
192600 rules inserted. Base: 64753 rules (7364 with conclusion selected). Queue: 671 rules.
192800 rules inserted. Base: 64749 rules (7376 with conclusion selected). Queue: 765 rules.
193000 rules inserted. Base: 64828 rules (7394 with conclusion selected). Queue: 703 rules.
193200 rules inserted. Base: 64781 rules (7396 with conclusion selected). Queue: 691 rules.
193400 rules inserted. Base: 64924 rules (7415 with conclusion selected). Queue: 586 rules.
193600 rules inserted. Base: 64880 rules (7422 with conclusion selected). Queue: 613 rules.
193800 rules inserted. Base: 64890 rules (7434 with conclusion selected). Queue: 428 rules.
194000 rules inserted. Base: 65021 rules (7455 with conclusion selected). Queue: 339 rules.
194200 rules inserted. Base: 65008 rules (7459 with conclusion selected). Queue: 159 rules.
194400 rules inserted. Base: 65138 rules (7496 with conclusion selected). Queue: 437 rules.
194600 rules inserted. Base: 65144 rules (7508 with conclusion selected). Queue: 446 rules.
194800 rules inserted. Base: 65116 rules (7509 with conclusion selected). Queue: 452 rules.
195000 rules inserted. Base: 65206 rules (7527 with conclusion selected). Queue: 284 rules.
195200 rules inserted. Base: 65210 rules (7535 with conclusion selected). Queue: 288 rules.
195400 rules inserted. Base: 65183 rules (7545 with conclusion selected). Queue: 396 rules.
195600 rules inserted. Base: 65275 rules (7562 with conclusion selected). Queue: 309 rules.
195800 rules inserted. Base: 65195 rules (7573 with conclusion selected). Queue: 302 rules.
196000 rules inserted. Base: 65301 rules (7587 with conclusion selected). Queue: 115 rules.
196200 rules inserted. Base: 65313 rules (7610 with conclusion selected). Queue: 112 rules.
196400 rules inserted. Base: 65325 rules (7617 with conclusion selected). Queue: 101 rules.
Starting query inj-event(userCompletesProtocol(m_96,m_97,m_98,m_99,m_100,m_101,m_102)) ==> inj-event(appSendsLastMessageToUser(m_96,m_97,m_98)) && inj-event(issuerSendsLastMessageToUser(m_99,m_100,m_101,m_102))
goal reachable: e2_3 ≠ i[] && e1_3 ≠ u[] && begin(issuerSendsLastMessageToUser((tag4,bitG(g(x_12))),(tag5,bitG(g(y_12)),enc(sign((g(y_12),g(x_12)),ski[]),GtoSymK(exp(g(y_12),x_12)))),enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),GtoSymK(exp(g(y_12),x_12))),enc((tag7,code_12),GtoSymK(exp(g(y_12),x_12)))),@occ439_1) && begin(appSendsLastMessageToUser((tag1,bitG(g(x_13))),(tag2,bitG(g(y_13)),enc(sign((g(y_13),g(x_13)),ska[]),GtoSymK(exp(g(y_13),x_13)))),enc((tag3,a[],hash(pkce_8),scope_12),GtoSymK(exp(g(y_13),x_13)))),@occ195_1) && attacker(pke2_6) && attacker(pke1_6) && attacker(e2_3) && attacker(e1_3) -> end(@occ280_1,userCompletesProtocol((tag1,bitG(g(x_13))),(tag2,bitG(g(y_13)),enc(sign((g(y_13),g(x_13)),ska[]),GtoSymK(exp(g(y_13),x_13)))),enc((tag3,a[],hash(pkce_8),scope_12),GtoSymK(exp(g(y_13),x_13))),(tag4,bitG(g(x_12))),(tag5,bitG(g(y_12)),enc(sign((g(y_12),g(x_12)),ski[]),GtoSymK(exp(g(y_12),x_12)))),enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),GtoSymK(exp(g(y_12),x_12))),enc((tag7,code_12),GtoSymK(exp(g(y_12),x_12)))))
The 1st, 2nd hypotheses occur strictly before the conclusion.
The 3rd, 4th, 5th, 6th hypotheses occur before the conclusion.
Abbreviations:
x_13 = x_4[e2_1 = i[],e1_1 = a[],!1 = @sid]
pkce_8 = pkce_3[m_24 = (tag1,bitG(g(x_13))),pke2_1 = pke2_6,pke1_1 = pke1_6,e2 = e2_3,e1 = e1_3,!1 = @sid_1]
scope_12 = scope_3[m_24 = (tag1,bitG(g(x_13))),pke2_1 = pke2_6,pke1_1 = pke1_6,e2 = e2_3,e1 = e1_3,!1 = @sid_1]
y_13 = y_3[m_24 = (tag1,bitG(g(x_13))),pke2_1 = pke2_6,pke1_1 = pke1_6,e2 = e2_3,e1 = e1_3,!1 = @sid_1]
x_12 = x_5[m_34 = enc((tag3,a[],hash(pkce_8),scope_12),GtoSymK(exp(g(y_13),x_13))),m_33 = (tag2,bitG(g(y_13)),enc(sign((g(y_13),g(x_13)),ska[]),GtoSymK(exp(g(y_13),x_13)))),e2_1 = i[],e1_1 = a[],!1 = @sid]
y_12 = y_4[m_64 = (tag4,bitG(g(x_12))),e2_2 = u[],e1_2 = a[],!1 = @sid_2]
code_12 = code_8[m_66 = enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),GtoSymK(exp(g(y_12),x_12))),m_64 = (tag4,bitG(g(x_12))),e2_2 = u[],e1_2 = a[],!1 = @sid_2]
@occ280_1 = @occ280[m_38 = enc((tag7,code_12),GtoSymK(exp(g(y_12),x_12))),m_36 = (tag5,bitG(g(y_12)),enc(sign((g(y_12),g(x_12)),ski[]),GtoSymK(exp(g(y_12),x_12)))),m_34 = enc((tag3,a[],hash(pkce_8),scope_12),GtoSymK(exp(g(y_13),x_13))),m_33 = (tag2,bitG(g(y_13)),enc(sign((g(y_13),g(x_13)),ska[]),GtoSymK(exp(g(y_13),x_13)))),e2_1 = i[],e1_1 = a[],!1 = @sid]
@occ439_1 = @occ439[m_66 = enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),GtoSymK(exp(g(y_12),x_12))),m_64 = (tag4,bitG(g(x_12))),e2_2 = u[],e1_2 = a[],!1 = @sid_2]
@occ195_1 = @occ195[m_24 = (tag1,bitG(g(x_13))),pke2_1 = pke2_6,pke1_1 = pke1_6,e2 = e2_3,e1 = e1_3,!1 = @sid_1]
goal reachable: e2_3 ≠ i[] && begin(issuerSendsLastMessageToUser((tag4,bitG(g(x_12))),(tag5,bitG(g(y_12)),enc(sign((g(y_12),g(x_12)),ski[]),GtoSymK(exp(g(y_12),x_12)))),enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),GtoSymK(exp(g(y_12),x_12))),enc((tag7,code_12),GtoSymK(exp(g(y_12),x_12)))),@occ439_1) && begin(appSendsLastMessageToUser((tag1,bitG(g(x_13))),(tag2,bitG(g(y_13)),enc(sign((g(y_13),g(x_13)),ska[]),GtoSymK(exp(g(y_13),x_13)))),enc((tag3,a[],hash(pkce_8),scope_12),GtoSymK(exp(g(y_13),x_13)))),@occ142_1) && attacker(pke2_6) && attacker(e2_3) -> end(@occ280_1,userCompletesProtocol((tag1,bitG(g(x_13))),(tag2,bitG(g(y_13)),enc(sign((g(y_13),g(x_13)),ska[]),GtoSymK(exp(g(y_13),x_13)))),enc((tag3,a[],hash(pkce_8),scope_12),GtoSymK(exp(g(y_13),x_13))),(tag4,bitG(g(x_12))),(tag5,bitG(g(y_12)),enc(sign((g(y_12),g(x_12)),ski[]),GtoSymK(exp(g(y_12),x_12)))),enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),GtoSymK(exp(g(y_12),x_12))),enc((tag7,code_12),GtoSymK(exp(g(y_12),x_12)))))
The 1st, 2nd hypotheses occur strictly before the conclusion.
The 3rd, 4th hypotheses occur before the conclusion.
Abbreviations:
x_13 = x_4[e2_1 = i[],e1_1 = a[],!1 = @sid]
pkce_8 = pkce_2[m_16 = (tag1,bitG(g(x_13))),pke2 = pke2_6,e2 = e2_3,e1 = u[],!1 = @sid_1]
scope_12 = scope_2[m_16 = (tag1,bitG(g(x_13))),pke2 = pke2_6,e2 = e2_3,e1 = u[],!1 = @sid_1]
y_13 = y_2[m_16 = (tag1,bitG(g(x_13))),pke2 = pke2_6,e2 = e2_3,e1 = u[],!1 = @sid_1]
x_12 = x_5[m_34 = enc((tag3,a[],hash(pkce_8),scope_12),GtoSymK(exp(g(y_13),x_13))),m_33 = (tag2,bitG(g(y_13)),enc(sign((g(y_13),g(x_13)),ska[]),GtoSymK(exp(g(y_13),x_13)))),e2_1 = i[],e1_1 = a[],!1 = @sid]
y_12 = y_4[m_64 = (tag4,bitG(g(x_12))),e2_2 = u[],e1_2 = a[],!1 = @sid_2]
code_12 = code_8[m_66 = enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),GtoSymK(exp(g(y_12),x_12))),m_64 = (tag4,bitG(g(x_12))),e2_2 = u[],e1_2 = a[],!1 = @sid_2]
@occ280_1 = @occ280[m_38 = enc((tag7,code_12),GtoSymK(exp(g(y_12),x_12))),m_36 = (tag5,bitG(g(y_12)),enc(sign((g(y_12),g(x_12)),ski[]),GtoSymK(exp(g(y_12),x_12)))),m_34 = enc((tag3,a[],hash(pkce_8),scope_12),GtoSymK(exp(g(y_13),x_13))),m_33 = (tag2,bitG(g(y_13)),enc(sign((g(y_13),g(x_13)),ska[]),GtoSymK(exp(g(y_13),x_13)))),e2_1 = i[],e1_1 = a[],!1 = @sid]
@occ439_1 = @occ439[m_66 = enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),GtoSymK(exp(g(y_12),x_12))),m_64 = (tag4,bitG(g(x_12))),e2_2 = u[],e1_2 = a[],!1 = @sid_2]
@occ142_1 = @occ142[m_16 = (tag1,bitG(g(x_13))),pke2 = pke2_6,e2 = e2_3,e1 = u[],!1 = @sid_1]
goal reachable: e1_3 ≠ u[] && begin(issuerSendsLastMessageToUser((tag4,bitG(g(x_12))),(tag5,bitG(g(y_12)),enc(sign((g(y_12),g(x_12)),ski[]),GtoSymK(exp(g(y_12),x_12)))),enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),GtoSymK(exp(g(y_12),x_12))),enc((tag7,code_12),GtoSymK(exp(g(y_12),x_12)))),@occ439_1) && begin(appSendsLastMessageToUser((tag1,bitG(g(x_13))),(tag2,bitG(g(y_13)),enc(sign((g(y_13),g(x_13)),ska[]),GtoSymK(exp(g(y_13),x_13)))),enc((tag3,a[],hash(pkce_8),scope_12),GtoSymK(exp(g(y_13),x_13)))),@occ90_1) && attacker(pke1_6) && attacker(e1_3) -> end(@occ280_1,userCompletesProtocol((tag1,bitG(g(x_13))),(tag2,bitG(g(y_13)),enc(sign((g(y_13),g(x_13)),ska[]),GtoSymK(exp(g(y_13),x_13)))),enc((tag3,a[],hash(pkce_8),scope_12),GtoSymK(exp(g(y_13),x_13))),(tag4,bitG(g(x_12))),(tag5,bitG(g(y_12)),enc(sign((g(y_12),g(x_12)),ski[]),GtoSymK(exp(g(y_12),x_12)))),enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),GtoSymK(exp(g(y_12),x_12))),enc((tag7,code_12),GtoSymK(exp(g(y_12),x_12)))))
The 1st, 2nd hypotheses occur strictly before the conclusion.
The 3rd, 4th hypotheses occur before the conclusion.
Abbreviations:
x_13 = x_4[e2_1 = i[],e1_1 = a[],!1 = @sid]
pkce_8 = pkce_1[m = (tag1,bitG(g(x_13))),pke1 = pke1_6,e2 = i[],e1 = e1_3,!1 = @sid_1]
scope_12 = scope_1[m = (tag1,bitG(g(x_13))),pke1 = pke1_6,e2 = i[],e1 = e1_3,!1 = @sid_1]
y_13 = y_1[m = (tag1,bitG(g(x_13))),pke1 = pke1_6,e2 = i[],e1 = e1_3,!1 = @sid_1]
x_12 = x_5[m_34 = enc((tag3,a[],hash(pkce_8),scope_12),GtoSymK(exp(g(y_13),x_13))),m_33 = (tag2,bitG(g(y_13)),enc(sign((g(y_13),g(x_13)),ska[]),GtoSymK(exp(g(y_13),x_13)))),e2_1 = i[],e1_1 = a[],!1 = @sid]
y_12 = y_4[m_64 = (tag4,bitG(g(x_12))),e2_2 = u[],e1_2 = a[],!1 = @sid_2]
code_12 = code_8[m_66 = enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),GtoSymK(exp(g(y_12),x_12))),m_64 = (tag4,bitG(g(x_12))),e2_2 = u[],e1_2 = a[],!1 = @sid_2]
@occ280_1 = @occ280[m_38 = enc((tag7,code_12),GtoSymK(exp(g(y_12),x_12))),m_36 = (tag5,bitG(g(y_12)),enc(sign((g(y_12),g(x_12)),ski[]),GtoSymK(exp(g(y_12),x_12)))),m_34 = enc((tag3,a[],hash(pkce_8),scope_12),GtoSymK(exp(g(y_13),x_13))),m_33 = (tag2,bitG(g(y_13)),enc(sign((g(y_13),g(x_13)),ska[]),GtoSymK(exp(g(y_13),x_13)))),e2_1 = i[],e1_1 = a[],!1 = @sid]
@occ439_1 = @occ439[m_66 = enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),GtoSymK(exp(g(y_12),x_12))),m_64 = (tag4,bitG(g(x_12))),e2_2 = u[],e1_2 = a[],!1 = @sid_2]
@occ90_1 = @occ90[m = (tag1,bitG(g(x_13))),pke1 = pke1_6,e2 = i[],e1 = e1_3,!1 = @sid_1]
goal reachable: begin(issuerSendsLastMessageToUser((tag4,bitG(g(x_12))),(tag5,bitG(g(y_12)),enc(sign((g(y_12),g(x_12)),ski[]),GtoSymK(exp(g(y_12),x_12)))),enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),GtoSymK(exp(g(y_12),x_12))),enc((tag7,code_12),GtoSymK(exp(g(y_12),x_12)))),@occ439_1) && begin(appSendsLastMessageToUser((tag1,bitG(g(x_13))),(tag2,bitG(g(y_13)),enc(sign((g(y_13),g(x_13)),ska[]),GtoSymK(exp(g(y_13),x_13)))),enc((tag3,a[],hash(pkce_8),scope_12),GtoSymK(exp(g(y_13),x_13)))),@occ38_1) -> end(@occ280_1,userCompletesProtocol((tag1,bitG(g(x_13))),(tag2,bitG(g(y_13)),enc(sign((g(y_13),g(x_13)),ska[]),GtoSymK(exp(g(y_13),x_13)))),enc((tag3,a[],hash(pkce_8),scope_12),GtoSymK(exp(g(y_13),x_13))),(tag4,bitG(g(x_12))),(tag5,bitG(g(y_12)),enc(sign((g(y_12),g(x_12)),ski[]),GtoSymK(exp(g(y_12),x_12)))),enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),GtoSymK(exp(g(y_12),x_12))),enc((tag7,code_12),GtoSymK(exp(g(y_12),x_12)))))
The 1st, 2nd hypotheses occur strictly before the conclusion.
Abbreviations:
x_13 = x_4[e2_1 = i[],e1_1 = a[],!1 = @sid]
pkce_8 = pkce[m_1 = (tag1,bitG(g(x_13))),e2 = i[],e1 = u[],!1 = @sid_1]
scope_12 = scope[m_1 = (tag1,bitG(g(x_13))),e2 = i[],e1 = u[],!1 = @sid_1]
y_13 = y[m_1 = (tag1,bitG(g(x_13))),e2 = i[],e1 = u[],!1 = @sid_1]
x_12 = x_5[m_34 = enc((tag3,a[],hash(pkce_8),scope_12),GtoSymK(exp(g(y_13),x_13))),m_33 = (tag2,bitG(g(y_13)),enc(sign((g(y_13),g(x_13)),ska[]),GtoSymK(exp(g(y_13),x_13)))),e2_1 = i[],e1_1 = a[],!1 = @sid]
y_12 = y_4[m_64 = (tag4,bitG(g(x_12))),e2_2 = u[],e1_2 = a[],!1 = @sid_2]
code_12 = code_8[m_66 = enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),GtoSymK(exp(g(y_12),x_12))),m_64 = (tag4,bitG(g(x_12))),e2_2 = u[],e1_2 = a[],!1 = @sid_2]
@occ280_1 = @occ280[m_38 = enc((tag7,code_12),GtoSymK(exp(g(y_12),x_12))),m_36 = (tag5,bitG(g(y_12)),enc(sign((g(y_12),g(x_12)),ski[]),GtoSymK(exp(g(y_12),x_12)))),m_34 = enc((tag3,a[],hash(pkce_8),scope_12),GtoSymK(exp(g(y_13),x_13))),m_33 = (tag2,bitG(g(y_13)),enc(sign((g(y_13),g(x_13)),ska[]),GtoSymK(exp(g(y_13),x_13)))),e2_1 = i[],e1_1 = a[],!1 = @sid]
@occ439_1 = @occ439[m_66 = enc((tag6,a[],hash(pkce_8),scope_12,u[],password[]),GtoSymK(exp(g(y_12),x_12))),m_64 = (tag4,bitG(g(x_12))),e2_2 = u[],e1_2 = a[],!1 = @sid_2]
@occ38_1 = @occ38[m_1 = (tag1,bitG(g(x_13))),e2 = i[],e1 = u[],!1 = @sid_1]
RESULT inj-event(userCompletesProtocol(m_96,m_97,m_98,m_99,m_100,m_101,m_102)) ==> inj-event(appSendsLastMessageToUser(m_96,m_97,m_98)) && inj-event(issuerSendsLastMessageToUser(m_99,m_100,m_101,m_102)) is true.

--------------------------------------------------------------
Verification summary:

Query inj-event(userCompletesProtocol(m_96,m_97,m_98,m_99,m_100,m_101,m_102)) ==> inj-event(appSendsLastMessageToUser(m_96,m_97,m_98)) && inj-event(issuerSendsLastMessageToUser(m_99,m_100,m_101,m_102)) is true.

--------------------------------------------------------------

