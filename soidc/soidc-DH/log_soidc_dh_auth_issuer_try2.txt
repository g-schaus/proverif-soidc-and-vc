File "soidc_dh.pv", line 132, characters 9-10:
Warning: identifier gx rebound.
File "soidc_dh.pv", line 140, characters 9-10:
Warning: identifier gy rebound.
File "soidc_dh.pv", line 211, character 9:
Warning: identifier x rebound.
File "soidc_dh.pv", line 212, characters 9-10:
Warning: identifier gx rebound.
File "soidc_dh.pv", line 218, characters 27-32:
Warning: identifier bit_gy rebound.
File "soidc_dh.pv", line 218, characters 45-57:
Warning: identifier enc_signature rebound.
File "soidc_dh.pv", line 220, characters 9-10:
Warning: identifier gy rebound.
File "soidc_dh.pv", line 297, characters 27-31:
Warning: identifier bitgx rebound.
File "soidc_dh.pv", line 299, characters 9-10:
Warning: identifier gx rebound.
File "soidc_dh.pv", line 302, character 9:
Warning: identifier y rebound.
File "soidc_dh.pv", line 303, characters 9-10:
Warning: identifier gy rebound.
Linear part:
exp(g(x),y) = exp(g(y),x)
Completing equations...
Completed equations:
exp(g(x),y) = exp(g(y),x)
Convergent part: No equation.
Process 0 (that is, the initial process):
{1}new a: bitstring;
{2}new u: bitstring;
{3}new i: bitstring;
{4}out(c, a);
{5}out(c, u);
{6}out(c, i);
{7}new ska: SecretKey;
{8}new sku: SecretKey;
{9}new ski: SecretKey;
{10}out(c, pk(ska));
{11}out(c, pk(sku));
{12}out(c, pk(ski));
{13}new password: bitstring;
(
    {14}!
    {15}let c_1: channel = c in
    {16}let a_1: bitstring = a in
    {17}let ska_1: SecretKey = ska in
    {18}let u_1: bitstring = u in
    {19}let pku: PublicKey = pk(sku) in
    {20}let i_1: bitstring = i in
    {21}let pki: PublicKey = pk(ski) in
    {22}in(c_1, e1: bitstring);
    {23}in(c_1, e2: bitstring);
    {24}if ((e1 = u_1) && (e2 = i_1)) then
    (
        {25}let talksOnlyToHonest: bool = true in
        {26}in(c_1, m_1: bitstring);
        {27}let (tag1': bitstring,bitgx: bitstring) = m_1 in
        {28}if (tag1 = tag1') then
        {29}let gx: G = unbitG(bitgx) in
        {30}new y: exponent;
        {31}let gy: G = g(y) in
        {32}let k1: SymmetricKey = GtoSymK(exp(gx,y)) in
        {33}let m_2: bitstring = (tag2,bitG(gy),enc(sign((gy,gx),ska_1),k1)) in
        {34}out(c_1, m_2);
        {35}new pkce: bitstring;
        {36}new scope: bitstring;
        {37}let m_3: bitstring = enc((tag3,a_1,hash(pkce),scope),k1) in
        {38}event appSendsLastMessageToUser(m_1,m_2,m_3);
        {39}out(c_1, m_3);
        {40}in(c_1, m_8: bitstring);
        {41}let (tag8': bitstring,code: bitstring) = dec(m_8,k1) in
        {42}if (tag8 = tag8') then
        {43}new x: exponent;
        {44}let gx_1: G = g(x) in
        {45}let m_9: bitstring = (tag9,bitG(gx_1)) in
        {46}out(c_1, m_9);
        {47}in(c_1, m_10: bitstring);
        {48}let (tag10': bitstring,bit_gy: bitstring,enc_signature: bitstring) = m_10 in
        {49}if (tag10 = tag10') then
        {50}let gy_1: G = unbitG(bit_gy) in
        {51}let k3: SymmetricKey = GtoSymK(exp(gy_1,x)) in
        {52}if ((gy_1,gx_1) = check(dec(enc_signature,k3),pki)) then
        {53}new sks: SecretKey;
        {54}new jti: bitstring;
        {55}let T2: bitstring = (a_1,jti,code,pkce) in
        {56}let m_11: bitstring = enc((tag11,pk(sks),sign(T2,sks)),k3) in
        {57}event appSendsLastMessageToIssuer(m_9,m_10,m_11);
        {58}out(c_1, m_11);
        {59}in(c_1, m_12: bitstring);
        {60}out(c_1, check_reach_app);
        {61}let (tag12': bitstring,signed_M: bitstring) = dec(m_12,k3) in
        {62}if (tag12 = tag12') then
        {63}let M: bitstring = check(signed_M,pki) in
        {64}let (jtk: bitstring,jti': bitstring,scope': bitstring,a': bitstring,i': bitstring,u': bitstring) = M in
        {65}if (jtk = hash_pk(pk(sks))) then
        {66}if (jti = jti') then
        {67}if (scope = scope') then
        {68}if (a_1 = a') then
        {69}if (i_1 = i') then
        {70}if (u_1 = u') then
        {71}if talksOnlyToHonest then
        {72}out(c_1, check_reach_app);
        {73}event appCompletesProtocol(m_1,m_2,m_3,m_8,m_9,m_10,m_11,m_12);
        {74}out(ch(code), free_code)
    )
    else
        {75}if ((e1 ≠ u_1) && (e2 = i_1)) then
        (
            {76}in(c_1, pke1: PublicKey);
            {77}let talksOnlyToHonest_1: bool = false in
            {78}in(c_1, m: bitstring);
            {79}let (tag1'_1: bitstring,bitgx_1: bitstring) = m in
            {80}if (tag1 = tag1'_1) then
            {81}let gx_2: G = unbitG(bitgx_1) in
            {82}new y_1: exponent;
            {83}let gy_2: G = g(y_1) in
            {84}let k1_1: SymmetricKey = GtoSymK(exp(gx_2,y_1)) in
            {85}let m_4: bitstring = (tag2,bitG(gy_2),enc(sign((gy_2,gx_2),ska_1),k1_1)) in
            {86}out(c_1, m_4);
            {87}new pkce_1: bitstring;
            {88}new scope_1: bitstring;
            {89}let m_5: bitstring = enc((tag3,a_1,hash(pkce_1),scope_1),k1_1) in
            {90}event appSendsLastMessageToUser(m,m_4,m_5);
            {91}out(c_1, m_5);
            {92}in(c_1, m_6: bitstring);
            {93}let (tag8'_1: bitstring,code_1: bitstring) = dec(m_6,k1_1) in
            {94}if (tag8 = tag8'_1) then
            {95}new x_1: exponent;
            {96}let gx_3: G = g(x_1) in
            {97}let m_7: bitstring = (tag9,bitG(gx_3)) in
            {98}out(c_1, m_7);
            {99}in(c_1, m_13: bitstring);
            {100}let (tag10'_1: bitstring,bit_gy_1: bitstring,enc_signature_1: bitstring) = m_13 in
            {101}if (tag10 = tag10'_1) then
            {102}let gy_3: G = unbitG(bit_gy_1) in
            {103}let k3_1: SymmetricKey = GtoSymK(exp(gy_3,x_1)) in
            {104}if ((gy_3,gx_3) = check(dec(enc_signature_1,k3_1),pki)) then
            {105}new sks_1: SecretKey;
            {106}new jti_1: bitstring;
            {107}let T2_1: bitstring = (a_1,jti_1,code_1,pkce_1) in
            {108}let m_14: bitstring = enc((tag11,pk(sks_1),sign(T2_1,sks_1)),k3_1) in
            {109}event appSendsLastMessageToIssuer(m_7,m_13,m_14);
            {110}out(c_1, m_14);
            {111}in(c_1, m_15: bitstring);
            {112}out(c_1, check_reach_app);
            {113}let (tag12'_1: bitstring,signed_M_1: bitstring) = dec(m_15,k3_1) in
            {114}if (tag12 = tag12'_1) then
            {115}let M_1: bitstring = check(signed_M_1,pki) in
            {116}let (jtk_1: bitstring,jti'_1: bitstring,scope'_1: bitstring,a'_1: bitstring,i'_1: bitstring,u'_1: bitstring) = M_1 in
            {117}if (jtk_1 = hash_pk(pk(sks_1))) then
            {118}if (jti_1 = jti'_1) then
            {119}if (scope_1 = scope'_1) then
            {120}if (a_1 = a'_1) then
            {121}if (i_1 = i'_1) then
            {122}if (e1 = u'_1) then
            {123}if talksOnlyToHonest_1 then
            {124}out(c_1, check_reach_app);
            {125}event appCompletesProtocol(m,m_4,m_5,m_6,m_7,m_13,m_14,m_15);
            {126}out(ch(code_1), free_code)
        )
        else
            {127}if ((e1 = u_1) && (e2 ≠ i_1)) then
            (
                {128}in(c_1, pke2: PublicKey);
                {129}let talksOnlyToHonest_2: bool = false in
                {130}in(c_1, m_16: bitstring);
                {131}let (tag1'_2: bitstring,bitgx_2: bitstring) = m_16 in
                {132}if (tag1 = tag1'_2) then
                {133}let gx_4: G = unbitG(bitgx_2) in
                {134}new y_2: exponent;
                {135}let gy_4: G = g(y_2) in
                {136}let k1_2: SymmetricKey = GtoSymK(exp(gx_4,y_2)) in
                {137}let m_17: bitstring = (tag2,bitG(gy_4),enc(sign((gy_4,gx_4),ska_1),k1_2)) in
                {138}out(c_1, m_17);
                {139}new pkce_2: bitstring;
                {140}new scope_2: bitstring;
                {141}let m_18: bitstring = enc((tag3,a_1,hash(pkce_2),scope_2),k1_2) in
                {142}event appSendsLastMessageToUser(m_16,m_17,m_18);
                {143}out(c_1, m_18);
                {144}in(c_1, m_19: bitstring);
                {145}let (tag8'_2: bitstring,code_2: bitstring) = dec(m_19,k1_2) in
                {146}if (tag8 = tag8'_2) then
                {147}new x_2: exponent;
                {148}let gx_5: G = g(x_2) in
                {149}let m_20: bitstring = (tag9,bitG(gx_5)) in
                {150}out(c_1, m_20);
                {151}in(c_1, m_21: bitstring);
                {152}let (tag10'_2: bitstring,bit_gy_2: bitstring,enc_signature_2: bitstring) = m_21 in
                {153}if (tag10 = tag10'_2) then
                {154}let gy_5: G = unbitG(bit_gy_2) in
                {155}let k3_2: SymmetricKey = GtoSymK(exp(gy_5,x_2)) in
                {156}if ((gy_5,gx_5) = check(dec(enc_signature_2,k3_2),pke2)) then
                {157}new sks_2: SecretKey;
                {158}new jti_2: bitstring;
                {159}let T2_2: bitstring = (a_1,jti_2,code_2,pkce_2) in
                {160}let m_22: bitstring = enc((tag11,pk(sks_2),sign(T2_2,sks_2)),k3_2) in
                {161}event appSendsLastMessageToIssuer(m_20,m_21,m_22);
                {162}out(c_1, m_22);
                {163}in(c_1, m_23: bitstring);
                {164}out(c_1, check_reach_app);
                {165}let (tag12'_2: bitstring,signed_M_2: bitstring) = dec(m_23,k3_2) in
                {166}if (tag12 = tag12'_2) then
                {167}let M_2: bitstring = check(signed_M_2,pke2) in
                {168}let (jtk_2: bitstring,jti'_2: bitstring,scope'_2: bitstring,a'_2: bitstring,i'_2: bitstring,u'_2: bitstring) = M_2 in
                {169}if (jtk_2 = hash_pk(pk(sks_2))) then
                {170}if (jti_2 = jti'_2) then
                {171}if (scope_2 = scope'_2) then
                {172}if (a_1 = a'_2) then
                {173}if (e2 = i'_2) then
                {174}if (u_1 = u'_2) then
                {175}if talksOnlyToHonest_2 then
                {176}out(c_1, check_reach_app);
                {177}event appCompletesProtocol(m_16,m_17,m_18,m_19,m_20,m_21,m_22,m_23);
                {178}out(ch(code_2), free_code)
            )
            else
                {179}if ((e1 ≠ u_1) && (e2 ≠ i_1)) then
                {180}in(c_1, pke1_1: PublicKey);
                {181}in(c_1, pke2_1: PublicKey);
                {182}let talksOnlyToHonest_3: bool = false in
                {183}in(c_1, m_24: bitstring);
                {184}let (tag1'_3: bitstring,bitgx_3: bitstring) = m_24 in
                {185}if (tag1 = tag1'_3) then
                {186}let gx_6: G = unbitG(bitgx_3) in
                {187}new y_3: exponent;
                {188}let gy_6: G = g(y_3) in
                {189}let k1_3: SymmetricKey = GtoSymK(exp(gx_6,y_3)) in
                {190}let m_25: bitstring = (tag2,bitG(gy_6),enc(sign((gy_6,gx_6),ska_1),k1_3)) in
                {191}out(c_1, m_25);
                {192}new pkce_3: bitstring;
                {193}new scope_3: bitstring;
                {194}let m_26: bitstring = enc((tag3,a_1,hash(pkce_3),scope_3),k1_3) in
                {195}event appSendsLastMessageToUser(m_24,m_25,m_26);
                {196}out(c_1, m_26);
                {197}in(c_1, m_27: bitstring);
                {198}let (tag8'_3: bitstring,code_3: bitstring) = dec(m_27,k1_3) in
                {199}if (tag8 = tag8'_3) then
                {200}new x_3: exponent;
                {201}let gx_7: G = g(x_3) in
                {202}let m_28: bitstring = (tag9,bitG(gx_7)) in
                {203}out(c_1, m_28);
                {204}in(c_1, m_29: bitstring);
                {205}let (tag10'_3: bitstring,bit_gy_3: bitstring,enc_signature_3: bitstring) = m_29 in
                {206}if (tag10 = tag10'_3) then
                {207}let gy_7: G = unbitG(bit_gy_3) in
                {208}let k3_3: SymmetricKey = GtoSymK(exp(gy_7,x_3)) in
                {209}if ((gy_7,gx_7) = check(dec(enc_signature_3,k3_3),pke2_1)) then
                {210}new sks_3: SecretKey;
                {211}new jti_3: bitstring;
                {212}let T2_3: bitstring = (a_1,jti_3,code_3,pkce_3) in
                {213}let m_30: bitstring = enc((tag11,pk(sks_3),sign(T2_3,sks_3)),k3_3) in
                {214}event appSendsLastMessageToIssuer(m_28,m_29,m_30);
                {215}out(c_1, m_30);
                {216}in(c_1, m_31: bitstring);
                {217}out(c_1, check_reach_app);
                {218}let (tag12'_3: bitstring,signed_M_3: bitstring) = dec(m_31,k3_3) in
                {219}if (tag12 = tag12'_3) then
                {220}let M_3: bitstring = check(signed_M_3,pke2_1) in
                {221}let (jtk_3: bitstring,jti'_3: bitstring,scope'_3: bitstring,a'_3: bitstring,i'_3: bitstring,u'_3: bitstring) = M_3 in
                {222}if (jtk_3 = hash_pk(pk(sks_3))) then
                {223}if (jti_3 = jti'_3) then
                {224}if (scope_3 = scope'_3) then
                {225}if (a_1 = a'_3) then
                {226}if (e2 = i'_3) then
                {227}if (e1 = u'_3) then
                {228}if talksOnlyToHonest_3 then
                {229}out(c_1, check_reach_app);
                {230}event appCompletesProtocol(m_24,m_25,m_26,m_27,m_28,m_29,m_30,m_31);
                {231}out(ch(code_3), free_code)
) | (
    {232}!
    {233}let c_2: channel = c in
    {234}let u_2: bitstring = u in
    {235}let sku_1: SecretKey = sku in
    {236}let a_2: bitstring = a in
    {237}let pka: PublicKey = pk(ska) in
    {238}let i_2: bitstring = i in
    {239}let pki_1: PublicKey = pk(ski) in
    {240}let password_1: bitstring = password in
    {241}in(c_2, e1_1: bitstring);
    {242}in(c_2, e2_1: bitstring);
    {243}if ((e1_1 = a_2) && (e2_1 = i_2)) then
    (
        {244}let talksOnlyToHonest_4: bool = true in
        {245}new x_4: exponent;
        {246}let gx_8: G = g(x_4) in
        {247}let m_32: bitstring = (tag1,bitG(gx_8)) in
        {248}out(c_2, m_32);
        {249}in(c_2, m_33: bitstring);
        {250}let (tag2': bitstring,bit_gy_4: bitstring,enc_signature_4: bitstring) = m_33 in
        {251}if (tag2 = tag2') then
        {252}let gy_8: G = unbitG(bit_gy_4) in
        {253}let k1_4: SymmetricKey = GtoSymK(exp(gy_8,x_4)) in
        {254}if ((gy_8,gx_8) = check(dec(enc_signature_4,k1_4),pka)) then
        {255}in(c_2, m_34: bitstring);
        {256}let (tag3': bitstring,a'_4: bitstring,h_pkce: bitstring,scope_4: bitstring) = dec(m_34,k1_4) in
        {257}if (tag3 = tag3') then
        {258}if (a_2 = a'_4) then
        {259}new x_5: exponent;
        {260}let gx_9: G = g(x_5) in
        {261}let m_35: bitstring = (tag4,bitG(gx_9)) in
        {262}out(c_2, m_35);
        {263}in(c_2, m_36: bitstring);
        {264}let (tag5': bitstring,bit_gy_5: bitstring,enc_signature_5: bitstring) = m_36 in
        {265}if (tag5 = tag5') then
        {266}let gy_9: G = unbitG(bit_gy_5) in
        {267}let k2: SymmetricKey = GtoSymK(exp(gy_9,x_5)) in
        {268}if ((gy_9,gx_9) = check(dec(enc_signature_5,k2),pki_1)) then
        {269}let m_37: bitstring = enc((tag6,a_2,h_pkce,scope_4,u_2,password_1),k2) in
        {270}event userSendsLastMessageToIssuer(m_35,m_36,m_37);
        {271}out(c_2, m_37);
        {272}in(c_2, m_38: bitstring);
        {273}let (tag7': bitstring,code_4: bitstring) = dec(m_38,k2) in
        {274}if (tag7 = tag7') then
        {275}let m_39: bitstring = enc((tag8,code_4),k1_4) in
        {276}event userSendsLastMessageToApp(m_32,m_33,m_34,m_39);
        {277}out(c_2, m_39);
        {278}if talksOnlyToHonest_4 then
        {279}out(c_2, check_reach_user);
        {280}event userCompletesProtocol(m_32,m_33,m_34,m_35,m_36,m_37,m_38);
        {281}out(ch(code_4), free_code);
        {282}out(ch(password_1), free_password)
    )
    else
        {283}if ((e1_1 ≠ a_2) && (e2_1 = i_2)) then
        (
            {284}in(c_2, pke1_2: PublicKey);
            {285}let talksOnlyToHonest_5: bool = false in
            {286}new x_6: exponent;
            {287}let gx_10: G = g(x_6) in
            {288}let m_40: bitstring = (tag1,bitG(gx_10)) in
            {289}out(c_2, m_40);
            {290}in(c_2, m_41: bitstring);
            {291}let (tag2'_1: bitstring,bit_gy_6: bitstring,enc_signature_6: bitstring) = m_41 in
            {292}if (tag2 = tag2'_1) then
            {293}let gy_10: G = unbitG(bit_gy_6) in
            {294}let k1_5: SymmetricKey = GtoSymK(exp(gy_10,x_6)) in
            {295}if ((gy_10,gx_10) = check(dec(enc_signature_6,k1_5),pke1_2)) then
            {296}in(c_2, m_42: bitstring);
            {297}let (tag3'_1: bitstring,a'_5: bitstring,h_pkce_1: bitstring,scope_5: bitstring) = dec(m_42,k1_5) in
            {298}if (tag3 = tag3'_1) then
            {299}if (e1_1 = a'_5) then
            {300}new x_7: exponent;
            {301}let gx_11: G = g(x_7) in
            {302}let m_43: bitstring = (tag4,bitG(gx_11)) in
            {303}out(c_2, m_43);
            {304}in(c_2, m_44: bitstring);
            {305}let (tag5'_1: bitstring,bit_gy_7: bitstring,enc_signature_7: bitstring) = m_44 in
            {306}if (tag5 = tag5'_1) then
            {307}let gy_11: G = unbitG(bit_gy_7) in
            {308}let k2_1: SymmetricKey = GtoSymK(exp(gy_11,x_7)) in
            {309}if ((gy_11,gx_11) = check(dec(enc_signature_7,k2_1),pki_1)) then
            {310}let m_45: bitstring = enc((tag6,e1_1,h_pkce_1,scope_5,u_2,password_1),k2_1) in
            {311}event userSendsLastMessageToIssuer(m_43,m_44,m_45);
            {312}out(c_2, m_45);
            {313}in(c_2, m_46: bitstring);
            {314}let (tag7'_1: bitstring,code_5: bitstring) = dec(m_46,k2_1) in
            {315}if (tag7 = tag7'_1) then
            {316}let m_47: bitstring = enc((tag8,code_5),k1_5) in
            {317}event userSendsLastMessageToApp(m_40,m_41,m_42,m_47);
            {318}out(c_2, m_47);
            {319}if talksOnlyToHonest_5 then
            {320}out(c_2, check_reach_user);
            {321}event userCompletesProtocol(m_40,m_41,m_42,m_43,m_44,m_45,m_46);
            {322}out(ch(code_5), free_code);
            {323}out(ch(password_1), free_password)
        )
        else
            {324}if ((e1_1 = a_2) && (e2_1 ≠ i_2)) then
            (
                {325}in(c_2, pke2_2: PublicKey);
                {326}in(c_2, wrong_pw: bitstring);
                {327}let talksOnlyToHonest_6: bool = false in
                {328}new x_8: exponent;
                {329}let gx_12: G = g(x_8) in
                {330}let m_48: bitstring = (tag1,bitG(gx_12)) in
                {331}out(c_2, m_48);
                {332}in(c_2, m_49: bitstring);
                {333}let (tag2'_2: bitstring,bit_gy_8: bitstring,enc_signature_8: bitstring) = m_49 in
                {334}if (tag2 = tag2'_2) then
                {335}let gy_12: G = unbitG(bit_gy_8) in
                {336}let k1_6: SymmetricKey = GtoSymK(exp(gy_12,x_8)) in
                {337}if ((gy_12,gx_12) = check(dec(enc_signature_8,k1_6),pka)) then
                {338}in(c_2, m_50: bitstring);
                {339}let (tag3'_2: bitstring,a'_6: bitstring,h_pkce_2: bitstring,scope_6: bitstring) = dec(m_50,k1_6) in
                {340}if (tag3 = tag3'_2) then
                {341}if (a_2 = a'_6) then
                {342}new x_9: exponent;
                {343}let gx_13: G = g(x_9) in
                {344}let m_51: bitstring = (tag4,bitG(gx_13)) in
                {345}out(c_2, m_51);
                {346}in(c_2, m_52: bitstring);
                {347}let (tag5'_2: bitstring,bit_gy_9: bitstring,enc_signature_9: bitstring) = m_52 in
                {348}if (tag5 = tag5'_2) then
                {349}let gy_13: G = unbitG(bit_gy_9) in
                {350}let k2_2: SymmetricKey = GtoSymK(exp(gy_13,x_9)) in
                {351}if ((gy_13,gx_13) = check(dec(enc_signature_9,k2_2),pke2_2)) then
                {352}let m_53: bitstring = enc((tag6,a_2,h_pkce_2,scope_6,u_2,wrong_pw),k2_2) in
                {353}event userSendsLastMessageToIssuer(m_51,m_52,m_53);
                {354}out(c_2, m_53);
                {355}in(c_2, m_54: bitstring);
                {356}let (tag7'_2: bitstring,code_6: bitstring) = dec(m_54,k2_2) in
                {357}if (tag7 = tag7'_2) then
                {358}let m_55: bitstring = enc((tag8,code_6),k1_6) in
                {359}event userSendsLastMessageToApp(m_48,m_49,m_50,m_55);
                {360}out(c_2, m_55);
                {361}if talksOnlyToHonest_6 then
                {362}out(c_2, check_reach_user);
                {363}event userCompletesProtocol(m_48,m_49,m_50,m_51,m_52,m_53,m_54);
                {364}out(ch(code_6), free_code);
                {365}out(ch(wrong_pw), free_password)
            )
            else
                {366}if ((e1_1 ≠ a_2) && (e2_1 ≠ i_2)) then
                {367}in(c_2, pke1_3: PublicKey);
                {368}in(c_2, pke2_3: PublicKey);
                {369}in(c_2, wrong_pw_1: bitstring);
                {370}let talksOnlyToHonest_7: bool = false in
                {371}new x_10: exponent;
                {372}let gx_14: G = g(x_10) in
                {373}let m_56: bitstring = (tag1,bitG(gx_14)) in
                {374}out(c_2, m_56);
                {375}in(c_2, m_57: bitstring);
                {376}let (tag2'_3: bitstring,bit_gy_10: bitstring,enc_signature_10: bitstring) = m_57 in
                {377}if (tag2 = tag2'_3) then
                {378}let gy_14: G = unbitG(bit_gy_10) in
                {379}let k1_7: SymmetricKey = GtoSymK(exp(gy_14,x_10)) in
                {380}if ((gy_14,gx_14) = check(dec(enc_signature_10,k1_7),pke1_3)) then
                {381}in(c_2, m_58: bitstring);
                {382}let (tag3'_3: bitstring,a'_7: bitstring,h_pkce_3: bitstring,scope_7: bitstring) = dec(m_58,k1_7) in
                {383}if (tag3 = tag3'_3) then
                {384}if (e1_1 = a'_7) then
                {385}new x_11: exponent;
                {386}let gx_15: G = g(x_11) in
                {387}let m_59: bitstring = (tag4,bitG(gx_15)) in
                {388}out(c_2, m_59);
                {389}in(c_2, m_60: bitstring);
                {390}let (tag5'_3: bitstring,bit_gy_11: bitstring,enc_signature_11: bitstring) = m_60 in
                {391}if (tag5 = tag5'_3) then
                {392}let gy_15: G = unbitG(bit_gy_11) in
                {393}let k2_3: SymmetricKey = GtoSymK(exp(gy_15,x_11)) in
                {394}if ((gy_15,gx_15) = check(dec(enc_signature_11,k2_3),pke2_3)) then
                {395}let m_61: bitstring = enc((tag6,e1_1,h_pkce_3,scope_7,u_2,wrong_pw_1),k2_3) in
                {396}event userSendsLastMessageToIssuer(m_59,m_60,m_61);
                {397}out(c_2, m_61);
                {398}in(c_2, m_62: bitstring);
                {399}let (tag7'_3: bitstring,code_7: bitstring) = dec(m_62,k2_3) in
                {400}if (tag7 = tag7'_3) then
                {401}let m_63: bitstring = enc((tag8,code_7),k1_7) in
                {402}event userSendsLastMessageToApp(m_56,m_57,m_58,m_63);
                {403}out(c_2, m_63);
                {404}if talksOnlyToHonest_7 then
                {405}out(c_2, check_reach_user);
                {406}event userCompletesProtocol(m_56,m_57,m_58,m_59,m_60,m_61,m_62);
                {407}out(ch(code_7), free_code);
                {408}out(ch(wrong_pw_1), free_password)
) | (
    {409}!
    {410}let c_3: channel = c in
    {411}let i_3: bitstring = i in
    {412}let ski_1: SecretKey = ski in
    {413}let a_3: bitstring = a in
    {414}let pka_1: PublicKey = pk(ska) in
    {415}let u_3: bitstring = u in
    {416}let pku_1: PublicKey = pk(sku) in
    {417}let password_2: bitstring = password in
    {418}in(c_3, e1_2: bitstring);
    {419}in(c_3, e2_2: bitstring);
    {420}if ((e1_2 = a_3) && (e2_2 = u_3)) then
    (
        {421}let talksOnlyToHonest_8: bool = true in
        {422}in(c_3, m_64: bitstring);
        {423}let (tag4': bitstring,bitgx_4: bitstring) = m_64 in
        {424}if (tag4 = tag4') then
        {425}let gx_16: G = unbitG(bitgx_4) in
        {426}new y_4: exponent;
        {427}let gy_16: G = g(y_4) in
        {428}let k2_4: SymmetricKey = GtoSymK(exp(gx_16,y_4)) in
        {429}let m_65: bitstring = (tag5,bitG(gy_16),enc(sign((gy_16,gx_16),ski_1),k2_4)) in
        {430}out(c_3, m_65);
        {431}in(c_3, m_66: bitstring);
        {432}let (tag6': bitstring,a'_8: bitstring,h_pkce_4: bitstring,scope_8: bitstring,u'_4: bitstring,password': bitstring) = dec(m_66,k2_4) in
        {433}if (tag6 = tag6') then
        {434}if (a_3 = a'_8) then
        {435}if (u_3 = u'_4) then
        {436}if (password_2 = password') then
        {437}new code_8: bitstring;
        {438}let m_67: bitstring = enc((tag7,code_8),k2_4) in
        {439}event issuerSendsLastMessageToUser(m_64,m_65,m_66,m_67);
        {440}out(c_3, m_67);
        {441}in(c_3, m_68: bitstring);
        {442}let (tag9': bitstring,bitgx_5: bitstring) = m_68 in
        {443}if (tag9 = tag9') then
        {444}let gx_17: G = unbitG(bitgx_5) in
        {445}new y_5: exponent;
        {446}let gy_17: G = g(y_5) in
        {447}let k3_4: SymmetricKey = GtoSymK(exp(gx_17,y_5)) in
        {448}let m_69: bitstring = (tag10,bitG(gy_17),enc(sign((gy_17,gx_17),ski_1),k3_4)) in
        {449}out(c_3, m_69);
        {450}in(c_3, m_70: bitstring);
        {451}let (tag11': bitstring,pksks: PublicKey,signature: bitstring) = dec(m_70,k3_4) in
        {452}if (tag11 = tag11') then
        {453}let (a'': bitstring,jti_4: bitstring,code': bitstring,pkce_4: bitstring) = check(signature,pksks) in
        {454}if (a_3 = a'') then
        {455}if (code_8 = code') then
        {456}if (h_pkce_4 = hash(pkce_4)) then
        {457}let jtk_4: bitstring = hash_pk(pksks) in
        {458}let M_4: bitstring = (jtk_4,jti_4,scope_8,a_3,i_3,u_3) in
        {459}let m_71: bitstring = enc((tag12,sign(M_4,ski_1)),k3_4) in
        {460}event issuerSendsLastMessageToApp(m_68,m_69,m_70,m_71);
        {461}out(c_3, m_71);
        {462}if talksOnlyToHonest_8 then
        {463}out(c_3, check_reach_issuer);
        {464}event issuerCompletesProtocol(m_64,m_65,m_66,m_68,m_69,m_70);
        {465}out(ch(code_8), free_code);
        {466}out(ch(password_2), free_password)
    )
    else
        {467}if ((e1_2 ≠ a_3) && (e2_2 = u_3)) then
        (
            {468}in(c_3, pke1_4: PublicKey);
            {469}let talksOnlyToHonest_9: bool = false in
            {470}in(c_3, m_72: bitstring);
            {471}let (tag4'_1: bitstring,bitgx_6: bitstring) = m_72 in
            {472}if (tag4 = tag4'_1) then
            {473}let gx_18: G = unbitG(bitgx_6) in
            {474}new y_6: exponent;
            {475}let gy_18: G = g(y_6) in
            {476}let k2_5: SymmetricKey = GtoSymK(exp(gx_18,y_6)) in
            {477}let m_73: bitstring = (tag5,bitG(gy_18),enc(sign((gy_18,gx_18),ski_1),k2_5)) in
            {478}out(c_3, m_73);
            {479}in(c_3, m_74: bitstring);
            {480}let (tag6'_1: bitstring,a'_9: bitstring,h_pkce_5: bitstring,scope_9: bitstring,u'_5: bitstring,password'_1: bitstring) = dec(m_74,k2_5) in
            {481}if (tag6 = tag6'_1) then
            {482}if (e1_2 = a'_9) then
            {483}if (u_3 = u'_5) then
            {484}if (password_2 = password'_1) then
            {485}new code_9: bitstring;
            {486}let m_75: bitstring = enc((tag7,code_9),k2_5) in
            {487}event issuerSendsLastMessageToUser(m_72,m_73,m_74,m_75);
            {488}out(c_3, m_75);
            {489}in(c_3, m_76: bitstring);
            {490}let (tag9'_1: bitstring,bitgx_7: bitstring) = m_76 in
            {491}if (tag9 = tag9'_1) then
            {492}let gx_19: G = unbitG(bitgx_7) in
            {493}new y_7: exponent;
            {494}let gy_19: G = g(y_7) in
            {495}let k3_5: SymmetricKey = GtoSymK(exp(gx_19,y_7)) in
            {496}let m_77: bitstring = (tag10,bitG(gy_19),enc(sign((gy_19,gx_19),ski_1),k3_5)) in
            {497}out(c_3, m_77);
            {498}in(c_3, m_78: bitstring);
            {499}let (tag11'_1: bitstring,pksks_1: PublicKey,signature_1: bitstring) = dec(m_78,k3_5) in
            {500}if (tag11 = tag11'_1) then
            {501}let (a''_1: bitstring,jti_5: bitstring,code'_1: bitstring,pkce_5: bitstring) = check(signature_1,pksks_1) in
            {502}if (e1_2 = a''_1) then
            {503}if (code_9 = code'_1) then
            {504}if (h_pkce_5 = hash(pkce_5)) then
            {505}let jtk_5: bitstring = hash_pk(pksks_1) in
            {506}let M_5: bitstring = (jtk_5,jti_5,scope_9,e1_2,i_3,u_3) in
            {507}let m_79: bitstring = enc((tag12,sign(M_5,ski_1)),k3_5) in
            {508}event issuerSendsLastMessageToApp(m_76,m_77,m_78,m_79);
            {509}out(c_3, m_79);
            {510}if talksOnlyToHonest_9 then
            {511}out(c_3, check_reach_issuer);
            {512}event issuerCompletesProtocol(m_72,m_73,m_74,m_76,m_77,m_78);
            {513}out(ch(code_9), free_code);
            {514}out(ch(password_2), free_password)
        )
        else
            {515}if ((e1_2 = a_3) && (e2_2 ≠ u_3)) then
            (
                {516}in(c_3, pke2_4: PublicKey);
                {517}in(c_3, wrong_pw_2: bitstring);
                {518}let talksOnlyToHonest_10: bool = false in
                {519}in(c_3, m_80: bitstring);
                {520}let (tag4'_2: bitstring,bitgx_8: bitstring) = m_80 in
                {521}if (tag4 = tag4'_2) then
                {522}let gx_20: G = unbitG(bitgx_8) in
                {523}new y_8: exponent;
                {524}let gy_20: G = g(y_8) in
                {525}let k2_6: SymmetricKey = GtoSymK(exp(gx_20,y_8)) in
                {526}let m_81: bitstring = (tag5,bitG(gy_20),enc(sign((gy_20,gx_20),ski_1),k2_6)) in
                {527}out(c_3, m_81);
                {528}in(c_3, m_82: bitstring);
                {529}let (tag6'_2: bitstring,a'_10: bitstring,h_pkce_6: bitstring,scope_10: bitstring,u'_6: bitstring,password'_2: bitstring) = dec(m_82,k2_6) in
                {530}if (tag6 = tag6'_2) then
                {531}if (a_3 = a'_10) then
                {532}if (e2_2 = u'_6) then
                {533}if (wrong_pw_2 = password'_2) then
                {534}new code_10: bitstring;
                {535}let m_83: bitstring = enc((tag7,code_10),k2_6) in
                {536}event issuerSendsLastMessageToUser(m_80,m_81,m_82,m_83);
                {537}out(c_3, m_83);
                {538}in(c_3, m_84: bitstring);
                {539}let (tag9'_2: bitstring,bitgx_9: bitstring) = m_84 in
                {540}if (tag9 = tag9'_2) then
                {541}let gx_21: G = unbitG(bitgx_9) in
                {542}new y_9: exponent;
                {543}let gy_21: G = g(y_9) in
                {544}let k3_6: SymmetricKey = GtoSymK(exp(gx_21,y_9)) in
                {545}let m_85: bitstring = (tag10,bitG(gy_21),enc(sign((gy_21,gx_21),ski_1),k3_6)) in
                {546}out(c_3, m_85);
                {547}in(c_3, m_86: bitstring);
                {548}let (tag11'_2: bitstring,pksks_2: PublicKey,signature_2: bitstring) = dec(m_86,k3_6) in
                {549}if (tag11 = tag11'_2) then
                {550}let (a''_2: bitstring,jti_6: bitstring,code'_2: bitstring,pkce_6: bitstring) = check(signature_2,pksks_2) in
                {551}if (a_3 = a''_2) then
                {552}if (code_10 = code'_2) then
                {553}if (h_pkce_6 = hash(pkce_6)) then
                {554}let jtk_6: bitstring = hash_pk(pksks_2) in
                {555}let M_6: bitstring = (jtk_6,jti_6,scope_10,a_3,i_3,e2_2) in
                {556}let m_87: bitstring = enc((tag12,sign(M_6,ski_1)),k3_6) in
                {557}event issuerSendsLastMessageToApp(m_84,m_85,m_86,m_87);
                {558}out(c_3, m_87);
                {559}if talksOnlyToHonest_10 then
                {560}out(c_3, check_reach_issuer);
                {561}event issuerCompletesProtocol(m_80,m_81,m_82,m_84,m_85,m_86);
                {562}out(ch(code_10), free_code);
                {563}out(ch(wrong_pw_2), free_password)
            )
            else
                {564}if ((e1_2 ≠ a_3) && (e2_2 ≠ u_3)) then
                {565}in(c_3, pke1_5: PublicKey);
                {566}in(c_3, pke2_5: PublicKey);
                {567}in(c_3, wrong_pw_3: bitstring);
                {568}let talksOnlyToHonest_11: bool = false in
                {569}in(c_3, m_88: bitstring);
                {570}let (tag4'_3: bitstring,bitgx_10: bitstring) = m_88 in
                {571}if (tag4 = tag4'_3) then
                {572}let gx_22: G = unbitG(bitgx_10) in
                {573}new y_10: exponent;
                {574}let gy_22: G = g(y_10) in
                {575}let k2_7: SymmetricKey = GtoSymK(exp(gx_22,y_10)) in
                {576}let m_89: bitstring = (tag5,bitG(gy_22),enc(sign((gy_22,gx_22),ski_1),k2_7)) in
                {577}out(c_3, m_89);
                {578}in(c_3, m_90: bitstring);
                {579}let (tag6'_3: bitstring,a'_11: bitstring,h_pkce_7: bitstring,scope_11: bitstring,u'_7: bitstring,password'_3: bitstring) = dec(m_90,k2_7) in
                {580}if (tag6 = tag6'_3) then
                {581}if (e1_2 = a'_11) then
                {582}if (e2_2 = u'_7) then
                {583}if (wrong_pw_3 = password'_3) then
                {584}new code_11: bitstring;
                {585}let m_91: bitstring = enc((tag7,code_11),k2_7) in
                {586}event issuerSendsLastMessageToUser(m_88,m_89,m_90,m_91);
                {587}out(c_3, m_91);
                {588}in(c_3, m_92: bitstring);
                {589}let (tag9'_3: bitstring,bitgx_11: bitstring) = m_92 in
                {590}if (tag9 = tag9'_3) then
                {591}let gx_23: G = unbitG(bitgx_11) in
                {592}new y_11: exponent;
                {593}let gy_23: G = g(y_11) in
                {594}let k3_7: SymmetricKey = GtoSymK(exp(gx_23,y_11)) in
                {595}let m_93: bitstring = (tag10,bitG(gy_23),enc(sign((gy_23,gx_23),ski_1),k3_7)) in
                {596}out(c_3, m_93);
                {597}in(c_3, m_94: bitstring);
                {598}let (tag11'_3: bitstring,pksks_3: PublicKey,signature_3: bitstring) = dec(m_94,k3_7) in
                {599}if (tag11 = tag11'_3) then
                {600}let (a''_3: bitstring,jti_7: bitstring,code'_3: bitstring,pkce_7: bitstring) = check(signature_3,pksks_3) in
                {601}if (e1_2 = a''_3) then
                {602}if (code_11 = code'_3) then
                {603}if (h_pkce_7 = hash(pkce_7)) then
                {604}let jtk_7: bitstring = hash_pk(pksks_3) in
                {605}let M_7: bitstring = (jtk_7,jti_7,scope_11,e1_2,i_3,e2_2) in
                {606}let m_95: bitstring = enc((tag12,sign(M_7,ski_1)),k3_7) in
                {607}event issuerSendsLastMessageToApp(m_92,m_93,m_94,m_95);
                {608}out(c_3, m_95);
                {609}if talksOnlyToHonest_11 then
                {610}out(c_3, check_reach_issuer);
                {611}event issuerCompletesProtocol(m_88,m_89,m_90,m_92,m_93,m_94);
                {612}out(ch(code_11), free_code);
                {613}out(ch(wrong_pw_3), free_password)
)

--  Process 1 (that is, process 0, with let moved downwards):
{1}new a: bitstring;
{2}new u: bitstring;
{3}new i: bitstring;
{4}out(c, a);
{5}out(c, u);
{6}out(c, i);
{7}new ska: SecretKey;
{8}new sku: SecretKey;
{9}new ski: SecretKey;
{10}out(c, pk(ska));
{11}out(c, pk(sku));
{12}out(c, pk(ski));
{13}new password: bitstring;
(
    {14}!
    {15}let c_1: channel = c in
    {22}in(c_1, e1: bitstring);
    {23}in(c_1, e2: bitstring);
    {21}let pki: PublicKey = pk(ski) in
    {20}let i_1: bitstring = i in
    {18}let u_1: bitstring = u in
    {17}let ska_1: SecretKey = ska in
    {16}let a_1: bitstring = a in
    {24}if ((e1 = u_1) && (e2 = i_1)) then
    (
        {26}in(c_1, m_1: bitstring);
        {27}let (tag1': bitstring,bitgx: bitstring) = m_1 in
        {28}if (tag1 = tag1') then
        {29}let gx: G = unbitG(bitgx) in
        {30}new y: exponent;
        {32}let k1: SymmetricKey = GtoSymK(exp(gx,y)) in
        {31}let gy: G = g(y) in
        {33}let m_2: bitstring = (tag2,bitG(gy),enc(sign((gy,gx),ska_1),k1)) in
        {34}out(c_1, m_2);
        {35}new pkce: bitstring;
        {36}new scope: bitstring;
        {37}let m_3: bitstring = enc((tag3,a_1,hash(pkce),scope),k1) in
        {38}event appSendsLastMessageToUser(m_1,m_2,m_3);
        {39}out(c_1, m_3);
        {40}in(c_1, m_8: bitstring);
        {41}let (tag8': bitstring,code: bitstring) = dec(m_8,k1) in
        {42}if (tag8 = tag8') then
        {43}new x: exponent;
        {44}let gx_1: G = g(x) in
        {45}let m_9: bitstring = (tag9,bitG(gx_1)) in
        {46}out(c_1, m_9);
        {47}in(c_1, m_10: bitstring);
        {48}let (tag10': bitstring,bit_gy: bitstring,enc_signature: bitstring) = m_10 in
        {49}if (tag10 = tag10') then
        {50}let gy_1: G = unbitG(bit_gy) in
        {51}let k3: SymmetricKey = GtoSymK(exp(gy_1,x)) in
        {52}if ((gy_1,gx_1) = check(dec(enc_signature,k3),pki)) then
        {53}new sks: SecretKey;
        {54}new jti: bitstring;
        {55}let T2: bitstring = (a_1,jti,code,pkce) in
        {56}let m_11: bitstring = enc((tag11,pk(sks),sign(T2,sks)),k3) in
        {57}event appSendsLastMessageToIssuer(m_9,m_10,m_11);
        {58}out(c_1, m_11);
        {59}in(c_1, m_12: bitstring);
        {60}out(c_1, check_reach_app);
        {61}let (tag12': bitstring,signed_M: bitstring) = dec(m_12,k3) in
        {62}if (tag12 = tag12') then
        {63}let M: bitstring = check(signed_M,pki) in
        {64}let (jtk: bitstring,jti': bitstring,scope': bitstring,a': bitstring,i': bitstring,u': bitstring) = M in
        {65}if (jtk = hash_pk(pk(sks))) then
        {66}if (jti = jti') then
        {67}if (scope = scope') then
        {68}if (a_1 = a') then
        {69}if (i_1 = i') then
        {70}if (u_1 = u') then
        {25}let talksOnlyToHonest: bool = true in
        {71}if talksOnlyToHonest then
        {72}out(c_1, check_reach_app);
        {73}event appCompletesProtocol(m_1,m_2,m_3,m_8,m_9,m_10,m_11,m_12);
        {74}out(ch(code), free_code)
    )
    else
        {75}if ((e1 ≠ u_1) && (e2 = i_1)) then
        (
            {76}in(c_1, pke1: PublicKey);
            {78}in(c_1, m: bitstring);
            {79}let (tag1'_1: bitstring,bitgx_1: bitstring) = m in
            {80}if (tag1 = tag1'_1) then
            {81}let gx_2: G = unbitG(bitgx_1) in
            {82}new y_1: exponent;
            {84}let k1_1: SymmetricKey = GtoSymK(exp(gx_2,y_1)) in
            {83}let gy_2: G = g(y_1) in
            {85}let m_4: bitstring = (tag2,bitG(gy_2),enc(sign((gy_2,gx_2),ska_1),k1_1)) in
            {86}out(c_1, m_4);
            {87}new pkce_1: bitstring;
            {88}new scope_1: bitstring;
            {89}let m_5: bitstring = enc((tag3,a_1,hash(pkce_1),scope_1),k1_1) in
            {90}event appSendsLastMessageToUser(m,m_4,m_5);
            {91}out(c_1, m_5);
            {92}in(c_1, m_6: bitstring);
            {93}let (tag8'_1: bitstring,code_1: bitstring) = dec(m_6,k1_1) in
            {94}if (tag8 = tag8'_1) then
            {95}new x_1: exponent;
            {96}let gx_3: G = g(x_1) in
            {97}let m_7: bitstring = (tag9,bitG(gx_3)) in
            {98}out(c_1, m_7);
            {99}in(c_1, m_13: bitstring);
            {100}let (tag10'_1: bitstring,bit_gy_1: bitstring,enc_signature_1: bitstring) = m_13 in
            {101}if (tag10 = tag10'_1) then
            {102}let gy_3: G = unbitG(bit_gy_1) in
            {103}let k3_1: SymmetricKey = GtoSymK(exp(gy_3,x_1)) in
            {104}if ((gy_3,gx_3) = check(dec(enc_signature_1,k3_1),pki)) then
            {105}new sks_1: SecretKey;
            {106}new jti_1: bitstring;
            {107}let T2_1: bitstring = (a_1,jti_1,code_1,pkce_1) in
            {108}let m_14: bitstring = enc((tag11,pk(sks_1),sign(T2_1,sks_1)),k3_1) in
            {109}event appSendsLastMessageToIssuer(m_7,m_13,m_14);
            {110}out(c_1, m_14);
            {111}in(c_1, m_15: bitstring);
            {112}out(c_1, check_reach_app);
            {113}let (tag12'_1: bitstring,signed_M_1: bitstring) = dec(m_15,k3_1) in
            {114}if (tag12 = tag12'_1) then
            {115}let M_1: bitstring = check(signed_M_1,pki) in
            {116}let (jtk_1: bitstring,jti'_1: bitstring,scope'_1: bitstring,a'_1: bitstring,i'_1: bitstring,u'_1: bitstring) = M_1 in
            {117}if (jtk_1 = hash_pk(pk(sks_1))) then
            {118}if (jti_1 = jti'_1) then
            {119}if (scope_1 = scope'_1) then
            {120}if (a_1 = a'_1) then
            {121}if (i_1 = i'_1) then
            {122}if (e1 = u'_1) then
            {77}let talksOnlyToHonest_1: bool = false in
            {123}if talksOnlyToHonest_1 then
            {124}out(c_1, check_reach_app);
            {125}event appCompletesProtocol(m,m_4,m_5,m_6,m_7,m_13,m_14,m_15);
            {126}out(ch(code_1), free_code)
        )
        else
            {127}if ((e1 = u_1) && (e2 ≠ i_1)) then
            (
                {128}in(c_1, pke2: PublicKey);
                {130}in(c_1, m_16: bitstring);
                {131}let (tag1'_2: bitstring,bitgx_2: bitstring) = m_16 in
                {132}if (tag1 = tag1'_2) then
                {133}let gx_4: G = unbitG(bitgx_2) in
                {134}new y_2: exponent;
                {136}let k1_2: SymmetricKey = GtoSymK(exp(gx_4,y_2)) in
                {135}let gy_4: G = g(y_2) in
                {137}let m_17: bitstring = (tag2,bitG(gy_4),enc(sign((gy_4,gx_4),ska_1),k1_2)) in
                {138}out(c_1, m_17);
                {139}new pkce_2: bitstring;
                {140}new scope_2: bitstring;
                {141}let m_18: bitstring = enc((tag3,a_1,hash(pkce_2),scope_2),k1_2) in
                {142}event appSendsLastMessageToUser(m_16,m_17,m_18);
                {143}out(c_1, m_18);
                {144}in(c_1, m_19: bitstring);
                {145}let (tag8'_2: bitstring,code_2: bitstring) = dec(m_19,k1_2) in
                {146}if (tag8 = tag8'_2) then
                {147}new x_2: exponent;
                {148}let gx_5: G = g(x_2) in
                {149}let m_20: bitstring = (tag9,bitG(gx_5)) in
                {150}out(c_1, m_20);
                {151}in(c_1, m_21: bitstring);
                {152}let (tag10'_2: bitstring,bit_gy_2: bitstring,enc_signature_2: bitstring) = m_21 in
                {153}if (tag10 = tag10'_2) then
                {154}let gy_5: G = unbitG(bit_gy_2) in
                {155}let k3_2: SymmetricKey = GtoSymK(exp(gy_5,x_2)) in
                {156}if ((gy_5,gx_5) = check(dec(enc_signature_2,k3_2),pke2)) then
                {157}new sks_2: SecretKey;
                {158}new jti_2: bitstring;
                {159}let T2_2: bitstring = (a_1,jti_2,code_2,pkce_2) in
                {160}let m_22: bitstring = enc((tag11,pk(sks_2),sign(T2_2,sks_2)),k3_2) in
                {161}event appSendsLastMessageToIssuer(m_20,m_21,m_22);
                {162}out(c_1, m_22);
                {163}in(c_1, m_23: bitstring);
                {164}out(c_1, check_reach_app);
                {165}let (tag12'_2: bitstring,signed_M_2: bitstring) = dec(m_23,k3_2) in
                {166}if (tag12 = tag12'_2) then
                {167}let M_2: bitstring = check(signed_M_2,pke2) in
                {168}let (jtk_2: bitstring,jti'_2: bitstring,scope'_2: bitstring,a'_2: bitstring,i'_2: bitstring,u'_2: bitstring) = M_2 in
                {169}if (jtk_2 = hash_pk(pk(sks_2))) then
                {170}if (jti_2 = jti'_2) then
                {171}if (scope_2 = scope'_2) then
                {172}if (a_1 = a'_2) then
                {173}if (e2 = i'_2) then
                {174}if (u_1 = u'_2) then
                {129}let talksOnlyToHonest_2: bool = false in
                {175}if talksOnlyToHonest_2 then
                {176}out(c_1, check_reach_app);
                {177}event appCompletesProtocol(m_16,m_17,m_18,m_19,m_20,m_21,m_22,m_23);
                {178}out(ch(code_2), free_code)
            )
            else
                {179}if ((e1 ≠ u_1) && (e2 ≠ i_1)) then
                {180}in(c_1, pke1_1: PublicKey);
                {181}in(c_1, pke2_1: PublicKey);
                {183}in(c_1, m_24: bitstring);
                {184}let (tag1'_3: bitstring,bitgx_3: bitstring) = m_24 in
                {185}if (tag1 = tag1'_3) then
                {186}let gx_6: G = unbitG(bitgx_3) in
                {187}new y_3: exponent;
                {189}let k1_3: SymmetricKey = GtoSymK(exp(gx_6,y_3)) in
                {188}let gy_6: G = g(y_3) in
                {190}let m_25: bitstring = (tag2,bitG(gy_6),enc(sign((gy_6,gx_6),ska_1),k1_3)) in
                {191}out(c_1, m_25);
                {192}new pkce_3: bitstring;
                {193}new scope_3: bitstring;
                {194}let m_26: bitstring = enc((tag3,a_1,hash(pkce_3),scope_3),k1_3) in
                {195}event appSendsLastMessageToUser(m_24,m_25,m_26);
                {196}out(c_1, m_26);
                {197}in(c_1, m_27: bitstring);
                {198}let (tag8'_3: bitstring,code_3: bitstring) = dec(m_27,k1_3) in
                {199}if (tag8 = tag8'_3) then
                {200}new x_3: exponent;
                {201}let gx_7: G = g(x_3) in
                {202}let m_28: bitstring = (tag9,bitG(gx_7)) in
                {203}out(c_1, m_28);
                {204}in(c_1, m_29: bitstring);
                {205}let (tag10'_3: bitstring,bit_gy_3: bitstring,enc_signature_3: bitstring) = m_29 in
                {206}if (tag10 = tag10'_3) then
                {207}let gy_7: G = unbitG(bit_gy_3) in
                {208}let k3_3: SymmetricKey = GtoSymK(exp(gy_7,x_3)) in
                {209}if ((gy_7,gx_7) = check(dec(enc_signature_3,k3_3),pke2_1)) then
                {210}new sks_3: SecretKey;
                {211}new jti_3: bitstring;
                {212}let T2_3: bitstring = (a_1,jti_3,code_3,pkce_3) in
                {213}let m_30: bitstring = enc((tag11,pk(sks_3),sign(T2_3,sks_3)),k3_3) in
                {214}event appSendsLastMessageToIssuer(m_28,m_29,m_30);
                {215}out(c_1, m_30);
                {216}in(c_1, m_31: bitstring);
                {217}out(c_1, check_reach_app);
                {218}let (tag12'_3: bitstring,signed_M_3: bitstring) = dec(m_31,k3_3) in
                {219}if (tag12 = tag12'_3) then
                {220}let M_3: bitstring = check(signed_M_3,pke2_1) in
                {221}let (jtk_3: bitstring,jti'_3: bitstring,scope'_3: bitstring,a'_3: bitstring,i'_3: bitstring,u'_3: bitstring) = M_3 in
                {222}if (jtk_3 = hash_pk(pk(sks_3))) then
                {223}if (jti_3 = jti'_3) then
                {224}if (scope_3 = scope'_3) then
                {225}if (a_1 = a'_3) then
                {226}if (e2 = i'_3) then
                {227}if (e1 = u'_3) then
                {182}let talksOnlyToHonest_3: bool = false in
                {228}if talksOnlyToHonest_3 then
                {229}out(c_1, check_reach_app);
                {230}event appCompletesProtocol(m_24,m_25,m_26,m_27,m_28,m_29,m_30,m_31);
                {231}out(ch(code_3), free_code)
) | (
    {232}!
    {233}let c_2: channel = c in
    {241}in(c_2, e1_1: bitstring);
    {242}in(c_2, e2_1: bitstring);
    {240}let password_1: bitstring = password in
    {239}let pki_1: PublicKey = pk(ski) in
    {238}let i_2: bitstring = i in
    {237}let pka: PublicKey = pk(ska) in
    {236}let a_2: bitstring = a in
    {234}let u_2: bitstring = u in
    {243}if ((e1_1 = a_2) && (e2_1 = i_2)) then
    (
        {245}new x_4: exponent;
        {246}let gx_8: G = g(x_4) in
        {247}let m_32: bitstring = (tag1,bitG(gx_8)) in
        {248}out(c_2, m_32);
        {249}in(c_2, m_33: bitstring);
        {250}let (tag2': bitstring,bit_gy_4: bitstring,enc_signature_4: bitstring) = m_33 in
        {251}if (tag2 = tag2') then
        {252}let gy_8: G = unbitG(bit_gy_4) in
        {253}let k1_4: SymmetricKey = GtoSymK(exp(gy_8,x_4)) in
        {254}if ((gy_8,gx_8) = check(dec(enc_signature_4,k1_4),pka)) then
        {255}in(c_2, m_34: bitstring);
        {256}let (tag3': bitstring,a'_4: bitstring,h_pkce: bitstring,scope_4: bitstring) = dec(m_34,k1_4) in
        {257}if (tag3 = tag3') then
        {258}if (a_2 = a'_4) then
        {259}new x_5: exponent;
        {260}let gx_9: G = g(x_5) in
        {261}let m_35: bitstring = (tag4,bitG(gx_9)) in
        {262}out(c_2, m_35);
        {263}in(c_2, m_36: bitstring);
        {264}let (tag5': bitstring,bit_gy_5: bitstring,enc_signature_5: bitstring) = m_36 in
        {265}if (tag5 = tag5') then
        {266}let gy_9: G = unbitG(bit_gy_5) in
        {267}let k2: SymmetricKey = GtoSymK(exp(gy_9,x_5)) in
        {268}if ((gy_9,gx_9) = check(dec(enc_signature_5,k2),pki_1)) then
        {269}let m_37: bitstring = enc((tag6,a_2,h_pkce,scope_4,u_2,password_1),k2) in
        {270}event userSendsLastMessageToIssuer(m_35,m_36,m_37);
        {271}out(c_2, m_37);
        {272}in(c_2, m_38: bitstring);
        {273}let (tag7': bitstring,code_4: bitstring) = dec(m_38,k2) in
        {274}if (tag7 = tag7') then
        {275}let m_39: bitstring = enc((tag8,code_4),k1_4) in
        {276}event userSendsLastMessageToApp(m_32,m_33,m_34,m_39);
        {277}out(c_2, m_39);
        {244}let talksOnlyToHonest_4: bool = true in
        {278}if talksOnlyToHonest_4 then
        {279}out(c_2, check_reach_user);
        {280}event userCompletesProtocol(m_32,m_33,m_34,m_35,m_36,m_37,m_38);
        {281}out(ch(code_4), free_code);
        {282}out(ch(password_1), free_password)
    )
    else
        {283}if ((e1_1 ≠ a_2) && (e2_1 = i_2)) then
        (
            {284}in(c_2, pke1_2: PublicKey);
            {286}new x_6: exponent;
            {287}let gx_10: G = g(x_6) in
            {288}let m_40: bitstring = (tag1,bitG(gx_10)) in
            {289}out(c_2, m_40);
            {290}in(c_2, m_41: bitstring);
            {291}let (tag2'_1: bitstring,bit_gy_6: bitstring,enc_signature_6: bitstring) = m_41 in
            {292}if (tag2 = tag2'_1) then
            {293}let gy_10: G = unbitG(bit_gy_6) in
            {294}let k1_5: SymmetricKey = GtoSymK(exp(gy_10,x_6)) in
            {295}if ((gy_10,gx_10) = check(dec(enc_signature_6,k1_5),pke1_2)) then
            {296}in(c_2, m_42: bitstring);
            {297}let (tag3'_1: bitstring,a'_5: bitstring,h_pkce_1: bitstring,scope_5: bitstring) = dec(m_42,k1_5) in
            {298}if (tag3 = tag3'_1) then
            {299}if (e1_1 = a'_5) then
            {300}new x_7: exponent;
            {301}let gx_11: G = g(x_7) in
            {302}let m_43: bitstring = (tag4,bitG(gx_11)) in
            {303}out(c_2, m_43);
            {304}in(c_2, m_44: bitstring);
            {305}let (tag5'_1: bitstring,bit_gy_7: bitstring,enc_signature_7: bitstring) = m_44 in
            {306}if (tag5 = tag5'_1) then
            {307}let gy_11: G = unbitG(bit_gy_7) in
            {308}let k2_1: SymmetricKey = GtoSymK(exp(gy_11,x_7)) in
            {309}if ((gy_11,gx_11) = check(dec(enc_signature_7,k2_1),pki_1)) then
            {310}let m_45: bitstring = enc((tag6,e1_1,h_pkce_1,scope_5,u_2,password_1),k2_1) in
            {311}event userSendsLastMessageToIssuer(m_43,m_44,m_45);
            {312}out(c_2, m_45);
            {313}in(c_2, m_46: bitstring);
            {314}let (tag7'_1: bitstring,code_5: bitstring) = dec(m_46,k2_1) in
            {315}if (tag7 = tag7'_1) then
            {316}let m_47: bitstring = enc((tag8,code_5),k1_5) in
            {317}event userSendsLastMessageToApp(m_40,m_41,m_42,m_47);
            {318}out(c_2, m_47);
            {285}let talksOnlyToHonest_5: bool = false in
            {319}if talksOnlyToHonest_5 then
            {320}out(c_2, check_reach_user);
            {321}event userCompletesProtocol(m_40,m_41,m_42,m_43,m_44,m_45,m_46);
            {322}out(ch(code_5), free_code);
            {323}out(ch(password_1), free_password)
        )
        else
            {324}if ((e1_1 = a_2) && (e2_1 ≠ i_2)) then
            (
                {325}in(c_2, pke2_2: PublicKey);
                {326}in(c_2, wrong_pw: bitstring);
                {328}new x_8: exponent;
                {329}let gx_12: G = g(x_8) in
                {330}let m_48: bitstring = (tag1,bitG(gx_12)) in
                {331}out(c_2, m_48);
                {332}in(c_2, m_49: bitstring);
                {333}let (tag2'_2: bitstring,bit_gy_8: bitstring,enc_signature_8: bitstring) = m_49 in
                {334}if (tag2 = tag2'_2) then
                {335}let gy_12: G = unbitG(bit_gy_8) in
                {336}let k1_6: SymmetricKey = GtoSymK(exp(gy_12,x_8)) in
                {337}if ((gy_12,gx_12) = check(dec(enc_signature_8,k1_6),pka)) then
                {338}in(c_2, m_50: bitstring);
                {339}let (tag3'_2: bitstring,a'_6: bitstring,h_pkce_2: bitstring,scope_6: bitstring) = dec(m_50,k1_6) in
                {340}if (tag3 = tag3'_2) then
                {341}if (a_2 = a'_6) then
                {342}new x_9: exponent;
                {343}let gx_13: G = g(x_9) in
                {344}let m_51: bitstring = (tag4,bitG(gx_13)) in
                {345}out(c_2, m_51);
                {346}in(c_2, m_52: bitstring);
                {347}let (tag5'_2: bitstring,bit_gy_9: bitstring,enc_signature_9: bitstring) = m_52 in
                {348}if (tag5 = tag5'_2) then
                {349}let gy_13: G = unbitG(bit_gy_9) in
                {350}let k2_2: SymmetricKey = GtoSymK(exp(gy_13,x_9)) in
                {351}if ((gy_13,gx_13) = check(dec(enc_signature_9,k2_2),pke2_2)) then
                {352}let m_53: bitstring = enc((tag6,a_2,h_pkce_2,scope_6,u_2,wrong_pw),k2_2) in
                {353}event userSendsLastMessageToIssuer(m_51,m_52,m_53);
                {354}out(c_2, m_53);
                {355}in(c_2, m_54: bitstring);
                {356}let (tag7'_2: bitstring,code_6: bitstring) = dec(m_54,k2_2) in
                {357}if (tag7 = tag7'_2) then
                {358}let m_55: bitstring = enc((tag8,code_6),k1_6) in
                {359}event userSendsLastMessageToApp(m_48,m_49,m_50,m_55);
                {360}out(c_2, m_55);
                {327}let talksOnlyToHonest_6: bool = false in
                {361}if talksOnlyToHonest_6 then
                {362}out(c_2, check_reach_user);
                {363}event userCompletesProtocol(m_48,m_49,m_50,m_51,m_52,m_53,m_54);
                {364}out(ch(code_6), free_code);
                {365}out(ch(wrong_pw), free_password)
            )
            else
                {366}if ((e1_1 ≠ a_2) && (e2_1 ≠ i_2)) then
                {367}in(c_2, pke1_3: PublicKey);
                {368}in(c_2, pke2_3: PublicKey);
                {369}in(c_2, wrong_pw_1: bitstring);
                {371}new x_10: exponent;
                {372}let gx_14: G = g(x_10) in
                {373}let m_56: bitstring = (tag1,bitG(gx_14)) in
                {374}out(c_2, m_56);
                {375}in(c_2, m_57: bitstring);
                {376}let (tag2'_3: bitstring,bit_gy_10: bitstring,enc_signature_10: bitstring) = m_57 in
                {377}if (tag2 = tag2'_3) then
                {378}let gy_14: G = unbitG(bit_gy_10) in
                {379}let k1_7: SymmetricKey = GtoSymK(exp(gy_14,x_10)) in
                {380}if ((gy_14,gx_14) = check(dec(enc_signature_10,k1_7),pke1_3)) then
                {381}in(c_2, m_58: bitstring);
                {382}let (tag3'_3: bitstring,a'_7: bitstring,h_pkce_3: bitstring,scope_7: bitstring) = dec(m_58,k1_7) in
                {383}if (tag3 = tag3'_3) then
                {384}if (e1_1 = a'_7) then
                {385}new x_11: exponent;
                {386}let gx_15: G = g(x_11) in
                {387}let m_59: bitstring = (tag4,bitG(gx_15)) in
                {388}out(c_2, m_59);
                {389}in(c_2, m_60: bitstring);
                {390}let (tag5'_3: bitstring,bit_gy_11: bitstring,enc_signature_11: bitstring) = m_60 in
                {391}if (tag5 = tag5'_3) then
                {392}let gy_15: G = unbitG(bit_gy_11) in
                {393}let k2_3: SymmetricKey = GtoSymK(exp(gy_15,x_11)) in
                {394}if ((gy_15,gx_15) = check(dec(enc_signature_11,k2_3),pke2_3)) then
                {395}let m_61: bitstring = enc((tag6,e1_1,h_pkce_3,scope_7,u_2,wrong_pw_1),k2_3) in
                {396}event userSendsLastMessageToIssuer(m_59,m_60,m_61);
                {397}out(c_2, m_61);
                {398}in(c_2, m_62: bitstring);
                {399}let (tag7'_3: bitstring,code_7: bitstring) = dec(m_62,k2_3) in
                {400}if (tag7 = tag7'_3) then
                {401}let m_63: bitstring = enc((tag8,code_7),k1_7) in
                {402}event userSendsLastMessageToApp(m_56,m_57,m_58,m_63);
                {403}out(c_2, m_63);
                {370}let talksOnlyToHonest_7: bool = false in
                {404}if talksOnlyToHonest_7 then
                {405}out(c_2, check_reach_user);
                {406}event userCompletesProtocol(m_56,m_57,m_58,m_59,m_60,m_61,m_62);
                {407}out(ch(code_7), free_code);
                {408}out(ch(wrong_pw_1), free_password)
) | (
    {409}!
    {410}let c_3: channel = c in
    {418}in(c_3, e1_2: bitstring);
    {419}in(c_3, e2_2: bitstring);
    {417}let password_2: bitstring = password in
    {415}let u_3: bitstring = u in
    {413}let a_3: bitstring = a in
    {412}let ski_1: SecretKey = ski in
    {411}let i_3: bitstring = i in
    {420}if ((e1_2 = a_3) && (e2_2 = u_3)) then
    (
        {422}in(c_3, m_64: bitstring);
        {423}let (tag4': bitstring,bitgx_4: bitstring) = m_64 in
        {424}if (tag4 = tag4') then
        {425}let gx_16: G = unbitG(bitgx_4) in
        {426}new y_4: exponent;
        {428}let k2_4: SymmetricKey = GtoSymK(exp(gx_16,y_4)) in
        {427}let gy_16: G = g(y_4) in
        {429}let m_65: bitstring = (tag5,bitG(gy_16),enc(sign((gy_16,gx_16),ski_1),k2_4)) in
        {430}out(c_3, m_65);
        {431}in(c_3, m_66: bitstring);
        {432}let (tag6': bitstring,a'_8: bitstring,h_pkce_4: bitstring,scope_8: bitstring,u'_4: bitstring,password': bitstring) = dec(m_66,k2_4) in
        {433}if (tag6 = tag6') then
        {434}if (a_3 = a'_8) then
        {435}if (u_3 = u'_4) then
        {436}if (password_2 = password') then
        {437}new code_8: bitstring;
        {438}let m_67: bitstring = enc((tag7,code_8),k2_4) in
        {439}event issuerSendsLastMessageToUser(m_64,m_65,m_66,m_67);
        {440}out(c_3, m_67);
        {441}in(c_3, m_68: bitstring);
        {442}let (tag9': bitstring,bitgx_5: bitstring) = m_68 in
        {443}if (tag9 = tag9') then
        {444}let gx_17: G = unbitG(bitgx_5) in
        {445}new y_5: exponent;
        {447}let k3_4: SymmetricKey = GtoSymK(exp(gx_17,y_5)) in
        {446}let gy_17: G = g(y_5) in
        {448}let m_69: bitstring = (tag10,bitG(gy_17),enc(sign((gy_17,gx_17),ski_1),k3_4)) in
        {449}out(c_3, m_69);
        {450}in(c_3, m_70: bitstring);
        {451}let (tag11': bitstring,pksks: PublicKey,signature: bitstring) = dec(m_70,k3_4) in
        {452}if (tag11 = tag11') then
        {453}let (a'': bitstring,jti_4: bitstring,code': bitstring,pkce_4: bitstring) = check(signature,pksks) in
        {454}if (a_3 = a'') then
        {455}if (code_8 = code') then
        {456}if (h_pkce_4 = hash(pkce_4)) then
        {457}let jtk_4: bitstring = hash_pk(pksks) in
        {458}let M_4: bitstring = (jtk_4,jti_4,scope_8,a_3,i_3,u_3) in
        {459}let m_71: bitstring = enc((tag12,sign(M_4,ski_1)),k3_4) in
        {460}event issuerSendsLastMessageToApp(m_68,m_69,m_70,m_71);
        {461}out(c_3, m_71);
        {421}let talksOnlyToHonest_8: bool = true in
        {462}if talksOnlyToHonest_8 then
        {463}out(c_3, check_reach_issuer);
        {464}event issuerCompletesProtocol(m_64,m_65,m_66,m_68,m_69,m_70);
        {465}out(ch(code_8), free_code);
        {466}out(ch(password_2), free_password)
    )
    else
        {467}if ((e1_2 ≠ a_3) && (e2_2 = u_3)) then
        (
            {468}in(c_3, pke1_4: PublicKey);
            {470}in(c_3, m_72: bitstring);
            {471}let (tag4'_1: bitstring,bitgx_6: bitstring) = m_72 in
            {472}if (tag4 = tag4'_1) then
            {473}let gx_18: G = unbitG(bitgx_6) in
            {474}new y_6: exponent;
            {476}let k2_5: SymmetricKey = GtoSymK(exp(gx_18,y_6)) in
            {475}let gy_18: G = g(y_6) in
            {477}let m_73: bitstring = (tag5,bitG(gy_18),enc(sign((gy_18,gx_18),ski_1),k2_5)) in
            {478}out(c_3, m_73);
            {479}in(c_3, m_74: bitstring);
            {480}let (tag6'_1: bitstring,a'_9: bitstring,h_pkce_5: bitstring,scope_9: bitstring,u'_5: bitstring,password'_1: bitstring) = dec(m_74,k2_5) in
            {481}if (tag6 = tag6'_1) then
            {482}if (e1_2 = a'_9) then
            {483}if (u_3 = u'_5) then
            {484}if (password_2 = password'_1) then
            {485}new code_9: bitstring;
            {486}let m_75: bitstring = enc((tag7,code_9),k2_5) in
            {487}event issuerSendsLastMessageToUser(m_72,m_73,m_74,m_75);
            {488}out(c_3, m_75);
            {489}in(c_3, m_76: bitstring);
            {490}let (tag9'_1: bitstring,bitgx_7: bitstring) = m_76 in
            {491}if (tag9 = tag9'_1) then
            {492}let gx_19: G = unbitG(bitgx_7) in
            {493}new y_7: exponent;
            {495}let k3_5: SymmetricKey = GtoSymK(exp(gx_19,y_7)) in
            {494}let gy_19: G = g(y_7) in
            {496}let m_77: bitstring = (tag10,bitG(gy_19),enc(sign((gy_19,gx_19),ski_1),k3_5)) in
            {497}out(c_3, m_77);
            {498}in(c_3, m_78: bitstring);
            {499}let (tag11'_1: bitstring,pksks_1: PublicKey,signature_1: bitstring) = dec(m_78,k3_5) in
            {500}if (tag11 = tag11'_1) then
            {501}let (a''_1: bitstring,jti_5: bitstring,code'_1: bitstring,pkce_5: bitstring) = check(signature_1,pksks_1) in
            {502}if (e1_2 = a''_1) then
            {503}if (code_9 = code'_1) then
            {504}if (h_pkce_5 = hash(pkce_5)) then
            {505}let jtk_5: bitstring = hash_pk(pksks_1) in
            {506}let M_5: bitstring = (jtk_5,jti_5,scope_9,e1_2,i_3,u_3) in
            {507}let m_79: bitstring = enc((tag12,sign(M_5,ski_1)),k3_5) in
            {508}event issuerSendsLastMessageToApp(m_76,m_77,m_78,m_79);
            {509}out(c_3, m_79);
            {469}let talksOnlyToHonest_9: bool = false in
            {510}if talksOnlyToHonest_9 then
            {511}out(c_3, check_reach_issuer);
            {512}event issuerCompletesProtocol(m_72,m_73,m_74,m_76,m_77,m_78);
            {513}out(ch(code_9), free_code);
            {514}out(ch(password_2), free_password)
        )
        else
            {515}if ((e1_2 = a_3) && (e2_2 ≠ u_3)) then
            (
                {516}in(c_3, pke2_4: PublicKey);
                {517}in(c_3, wrong_pw_2: bitstring);
                {519}in(c_3, m_80: bitstring);
                {520}let (tag4'_2: bitstring,bitgx_8: bitstring) = m_80 in
                {521}if (tag4 = tag4'_2) then
                {522}let gx_20: G = unbitG(bitgx_8) in
                {523}new y_8: exponent;
                {525}let k2_6: SymmetricKey = GtoSymK(exp(gx_20,y_8)) in
                {524}let gy_20: G = g(y_8) in
                {526}let m_81: bitstring = (tag5,bitG(gy_20),enc(sign((gy_20,gx_20),ski_1),k2_6)) in
                {527}out(c_3, m_81);
                {528}in(c_3, m_82: bitstring);
                {529}let (tag6'_2: bitstring,a'_10: bitstring,h_pkce_6: bitstring,scope_10: bitstring,u'_6: bitstring,password'_2: bitstring) = dec(m_82,k2_6) in
                {530}if (tag6 = tag6'_2) then
                {531}if (a_3 = a'_10) then
                {532}if (e2_2 = u'_6) then
                {533}if (wrong_pw_2 = password'_2) then
                {534}new code_10: bitstring;
                {535}let m_83: bitstring = enc((tag7,code_10),k2_6) in
                {536}event issuerSendsLastMessageToUser(m_80,m_81,m_82,m_83);
                {537}out(c_3, m_83);
                {538}in(c_3, m_84: bitstring);
                {539}let (tag9'_2: bitstring,bitgx_9: bitstring) = m_84 in
                {540}if (tag9 = tag9'_2) then
                {541}let gx_21: G = unbitG(bitgx_9) in
                {542}new y_9: exponent;
                {544}let k3_6: SymmetricKey = GtoSymK(exp(gx_21,y_9)) in
                {543}let gy_21: G = g(y_9) in
                {545}let m_85: bitstring = (tag10,bitG(gy_21),enc(sign((gy_21,gx_21),ski_1),k3_6)) in
                {546}out(c_3, m_85);
                {547}in(c_3, m_86: bitstring);
                {548}let (tag11'_2: bitstring,pksks_2: PublicKey,signature_2: bitstring) = dec(m_86,k3_6) in
                {549}if (tag11 = tag11'_2) then
                {550}let (a''_2: bitstring,jti_6: bitstring,code'_2: bitstring,pkce_6: bitstring) = check(signature_2,pksks_2) in
                {551}if (a_3 = a''_2) then
                {552}if (code_10 = code'_2) then
                {553}if (h_pkce_6 = hash(pkce_6)) then
                {554}let jtk_6: bitstring = hash_pk(pksks_2) in
                {555}let M_6: bitstring = (jtk_6,jti_6,scope_10,a_3,i_3,e2_2) in
                {556}let m_87: bitstring = enc((tag12,sign(M_6,ski_1)),k3_6) in
                {557}event issuerSendsLastMessageToApp(m_84,m_85,m_86,m_87);
                {558}out(c_3, m_87);
                {518}let talksOnlyToHonest_10: bool = false in
                {559}if talksOnlyToHonest_10 then
                {560}out(c_3, check_reach_issuer);
                {561}event issuerCompletesProtocol(m_80,m_81,m_82,m_84,m_85,m_86);
                {562}out(ch(code_10), free_code);
                {563}out(ch(wrong_pw_2), free_password)
            )
            else
                {564}if ((e1_2 ≠ a_3) && (e2_2 ≠ u_3)) then
                {565}in(c_3, pke1_5: PublicKey);
                {566}in(c_3, pke2_5: PublicKey);
                {567}in(c_3, wrong_pw_3: bitstring);
                {569}in(c_3, m_88: bitstring);
                {570}let (tag4'_3: bitstring,bitgx_10: bitstring) = m_88 in
                {571}if (tag4 = tag4'_3) then
                {572}let gx_22: G = unbitG(bitgx_10) in
                {573}new y_10: exponent;
                {575}let k2_7: SymmetricKey = GtoSymK(exp(gx_22,y_10)) in
                {574}let gy_22: G = g(y_10) in
                {576}let m_89: bitstring = (tag5,bitG(gy_22),enc(sign((gy_22,gx_22),ski_1),k2_7)) in
                {577}out(c_3, m_89);
                {578}in(c_3, m_90: bitstring);
                {579}let (tag6'_3: bitstring,a'_11: bitstring,h_pkce_7: bitstring,scope_11: bitstring,u'_7: bitstring,password'_3: bitstring) = dec(m_90,k2_7) in
                {580}if (tag6 = tag6'_3) then
                {581}if (e1_2 = a'_11) then
                {582}if (e2_2 = u'_7) then
                {583}if (wrong_pw_3 = password'_3) then
                {584}new code_11: bitstring;
                {585}let m_91: bitstring = enc((tag7,code_11),k2_7) in
                {586}event issuerSendsLastMessageToUser(m_88,m_89,m_90,m_91);
                {587}out(c_3, m_91);
                {588}in(c_3, m_92: bitstring);
                {589}let (tag9'_3: bitstring,bitgx_11: bitstring) = m_92 in
                {590}if (tag9 = tag9'_3) then
                {591}let gx_23: G = unbitG(bitgx_11) in
                {592}new y_11: exponent;
                {594}let k3_7: SymmetricKey = GtoSymK(exp(gx_23,y_11)) in
                {593}let gy_23: G = g(y_11) in
                {595}let m_93: bitstring = (tag10,bitG(gy_23),enc(sign((gy_23,gx_23),ski_1),k3_7)) in
                {596}out(c_3, m_93);
                {597}in(c_3, m_94: bitstring);
                {598}let (tag11'_3: bitstring,pksks_3: PublicKey,signature_3: bitstring) = dec(m_94,k3_7) in
                {599}if (tag11 = tag11'_3) then
                {600}let (a''_3: bitstring,jti_7: bitstring,code'_3: bitstring,pkce_7: bitstring) = check(signature_3,pksks_3) in
                {601}if (e1_2 = a''_3) then
                {602}if (code_11 = code'_3) then
                {603}if (h_pkce_7 = hash(pkce_7)) then
                {604}let jtk_7: bitstring = hash_pk(pksks_3) in
                {605}let M_7: bitstring = (jtk_7,jti_7,scope_11,e1_2,i_3,e2_2) in
                {606}let m_95: bitstring = enc((tag12,sign(M_7,ski_1)),k3_7) in
                {607}event issuerSendsLastMessageToApp(m_92,m_93,m_94,m_95);
                {608}out(c_3, m_95);
                {568}let talksOnlyToHonest_11: bool = false in
                {609}if talksOnlyToHonest_11 then
                {610}out(c_3, check_reach_issuer);
                {611}event issuerCompletesProtocol(m_88,m_89,m_90,m_92,m_93,m_94);
                {612}out(ch(code_11), free_code);
                {613}out(ch(wrong_pw_3), free_password)
)

-- Query inj-event(issuerCompletesProtocol(m_96,m_97,m_98,m_99,m_100,m_101)) ==> inj-event(appSendsLastMessageToIssuer(m_99,m_100,m_101)) && inj-event(userSendsLastMessageToIssuer(m_96,m_97,m_98)) in process 1.
Translating the process into Horn clauses...
select attacker(bitG(gx_24))/-5000
Completing...
Termination warning: attacker(bitG(elem)) -> attacker(elem)
Selecting 0
200 rules inserted. Base: 188 rules (49 with conclusion selected). Queue: 285 rules.
400 rules inserted. Base: 353 rules (63 with conclusion selected). Queue: 392 rules.
600 rules inserted. Base: 501 rules (82 with conclusion selected). Queue: 527 rules.
800 rules inserted. Base: 640 rules (105 with conclusion selected). Queue: 588 rules.
1000 rules inserted. Base: 778 rules (125 with conclusion selected). Queue: 691 rules.
select attacker(bitG(g(y_12)))/-5000
1200 rules inserted. Base: 953 rules (146 with conclusion selected). Queue: 1026 rules.
1400 rules inserted. Base: 1110 rules (172 with conclusion selected). Queue: 1233 rules.
1600 rules inserted. Base: 1299 rules (187 with conclusion selected). Queue: 1443 rules.
1800 rules inserted. Base: 1458 rules (202 with conclusion selected). Queue: 1497 rules.
2000 rules inserted. Base: 1572 rules (210 with conclusion selected). Queue: 1481 rules.
2200 rules inserted. Base: 1729 rules (216 with conclusion selected). Queue: 1436 rules.
2400 rules inserted. Base: 1868 rules (231 with conclusion selected). Queue: 1523 rules.
2600 rules inserted. Base: 1966 rules (241 with conclusion selected). Queue: 1666 rules.
2800 rules inserted. Base: 2099 rules (245 with conclusion selected). Queue: 1797 rules.
3000 rules inserted. Base: 2230 rules (252 with conclusion selected). Queue: 1780 rules.
3200 rules inserted. Base: 2398 rules (256 with conclusion selected). Queue: 1795 rules.
3400 rules inserted. Base: 2532 rules (279 with conclusion selected). Queue: 1967 rules.
3600 rules inserted. Base: 2701 rules (283 with conclusion selected). Queue: 2048 rules.
3800 rules inserted. Base: 2862 rules (289 with conclusion selected). Queue: 1978 rules.
4000 rules inserted. Base: 2990 rules (289 with conclusion selected). Queue: 1900 rules.
4200 rules inserted. Base: 3085 rules (293 with conclusion selected). Queue: 1851 rules.
4400 rules inserted. Base: 3068 rules (293 with conclusion selected). Queue: 1804 rules.
4600 rules inserted. Base: 3226 rules (304 with conclusion selected). Queue: 1907 rules.
4800 rules inserted. Base: 3391 rules (304 with conclusion selected). Queue: 1863 rules.
5000 rules inserted. Base: 3556 rules (312 with conclusion selected). Queue: 2064 rules.
5200 rules inserted. Base: 3706 rules (323 with conclusion selected). Queue: 2126 rules.
5400 rules inserted. Base: 3764 rules (332 with conclusion selected). Queue: 2077 rules.
5600 rules inserted. Base: 3853 rules (345 with conclusion selected). Queue: 2122 rules.
5800 rules inserted. Base: 3990 rules (346 with conclusion selected). Queue: 2044 rules.
6000 rules inserted. Base: 4137 rules (351 with conclusion selected). Queue: 1956 rules.
6200 rules inserted. Base: 4317 rules (358 with conclusion selected). Queue: 2049 rules.
6400 rules inserted. Base: 4408 rules (362 with conclusion selected). Queue: 1987 rules.
6600 rules inserted. Base: 4402 rules (363 with conclusion selected). Queue: 1905 rules.
6800 rules inserted. Base: 4468 rules (371 with conclusion selected). Queue: 1884 rules.
7000 rules inserted. Base: 4617 rules (371 with conclusion selected). Queue: 1863 rules.
7200 rules inserted. Base: 4722 rules (374 with conclusion selected). Queue: 1987 rules.
7400 rules inserted. Base: 4853 rules (394 with conclusion selected). Queue: 2281 rules.
7600 rules inserted. Base: 4933 rules (416 with conclusion selected). Queue: 2479 rules.
7800 rules inserted. Base: 5034 rules (430 with conclusion selected). Queue: 2690 rules.
8000 rules inserted. Base: 5140 rules (437 with conclusion selected). Queue: 2660 rules.
8200 rules inserted. Base: 5277 rules (438 with conclusion selected). Queue: 2606 rules.
8400 rules inserted. Base: 5396 rules (438 with conclusion selected). Queue: 2517 rules.
8600 rules inserted. Base: 5547 rules (445 with conclusion selected). Queue: 2682 rules.
8800 rules inserted. Base: 5585 rules (452 with conclusion selected). Queue: 2778 rules.
9000 rules inserted. Base: 5593 rules (452 with conclusion selected). Queue: 2604 rules.
9200 rules inserted. Base: 5672 rules (458 with conclusion selected). Queue: 2516 rules.
9400 rules inserted. Base: 5757 rules (466 with conclusion selected). Queue: 2660 rules.
9600 rules inserted. Base: 5888 rules (482 with conclusion selected). Queue: 3169 rules.
9800 rules inserted. Base: 5967 rules (487 with conclusion selected). Queue: 3110 rules.
10000 rules inserted. Base: 6101 rules (512 with conclusion selected). Queue: 3409 rules.
10200 rules inserted. Base: 6164 rules (527 with conclusion selected). Queue: 3478 rules.
10400 rules inserted. Base: 6298 rules (534 with conclusion selected). Queue: 3572 rules.
10600 rules inserted. Base: 6417 rules (535 with conclusion selected). Queue: 3493 rules.
10800 rules inserted. Base: 6505 rules (537 with conclusion selected). Queue: 3806 rules.
11000 rules inserted. Base: 6628 rules (540 with conclusion selected). Queue: 3725 rules.
11200 rules inserted. Base: 6804 rules (544 with conclusion selected). Queue: 3738 rules.
11400 rules inserted. Base: 6904 rules (548 with conclusion selected). Queue: 3676 rules.
11600 rules inserted. Base: 6939 rules (548 with conclusion selected). Queue: 3518 rules.
11800 rules inserted. Base: 7021 rules (551 with conclusion selected). Queue: 3436 rules.
12000 rules inserted. Base: 7040 rules (551 with conclusion selected). Queue: 3299 rules.
12200 rules inserted. Base: 7154 rules (561 with conclusion selected). Queue: 3422 rules.
12400 rules inserted. Base: 7194 rules (561 with conclusion selected). Queue: 3273 rules.
12600 rules inserted. Base: 7191 rules (561 with conclusion selected). Queue: 3052 rules.
12800 rules inserted. Base: 7194 rules (561 with conclusion selected). Queue: 2959 rules.
13000 rules inserted. Base: 7323 rules (571 with conclusion selected). Queue: 3049 rules.
13200 rules inserted. Base: 7431 rules (574 with conclusion selected). Queue: 3361 rules.
13400 rules inserted. Base: 7552 rules (605 with conclusion selected). Queue: 4109 rules.
13600 rules inserted. Base: 7593 rules (622 with conclusion selected). Queue: 4275 rules.
13800 rules inserted. Base: 7604 rules (624 with conclusion selected). Queue: 4342 rules.
14000 rules inserted. Base: 7663 rules (624 with conclusion selected). Queue: 4701 rules.
14200 rules inserted. Base: 7660 rules (624 with conclusion selected). Queue: 4491 rules.
14400 rules inserted. Base: 7675 rules (624 with conclusion selected). Queue: 4337 rules.
14600 rules inserted. Base: 7795 rules (625 with conclusion selected). Queue: 4289 rules.
14800 rules inserted. Base: 7922 rules (625 with conclusion selected). Queue: 4217 rules.
15000 rules inserted. Base: 8064 rules (639 with conclusion selected). Queue: 4266 rules.
15200 rules inserted. Base: 8048 rules (641 with conclusion selected). Queue: 4136 rules.
15400 rules inserted. Base: 8155 rules (652 with conclusion selected). Queue: 4155 rules.
15600 rules inserted. Base: 8189 rules (652 with conclusion selected). Queue: 4097 rules.
15800 rules inserted. Base: 8236 rules (655 with conclusion selected). Queue: 4098 rules.
16000 rules inserted. Base: 8290 rules (655 with conclusion selected). Queue: 4054 rules.
16200 rules inserted. Base: 8286 rules (655 with conclusion selected). Queue: 3842 rules.
16400 rules inserted. Base: 8272 rules (655 with conclusion selected). Queue: 3718 rules.
16600 rules inserted. Base: 8345 rules (664 with conclusion selected). Queue: 3683 rules.
16800 rules inserted. Base: 8478 rules (670 with conclusion selected). Queue: 3778 rules.
17000 rules inserted. Base: 8662 rules (677 with conclusion selected). Queue: 3925 rules.
17200 rules inserted. Base: 8845 rules (679 with conclusion selected). Queue: 3929 rules.
17400 rules inserted. Base: 8952 rules (711 with conclusion selected). Queue: 4635 rules.
17600 rules inserted. Base: 9032 rules (713 with conclusion selected). Queue: 4593 rules.
17800 rules inserted. Base: 9117 rules (719 with conclusion selected). Queue: 4657 rules.
18000 rules inserted. Base: 9077 rules (719 with conclusion selected). Queue: 4452 rules.
18200 rules inserted. Base: 9081 rules (719 with conclusion selected). Queue: 4240 rules.
18400 rules inserted. Base: 9062 rules (719 with conclusion selected). Queue: 4027 rules.
18600 rules inserted. Base: 8917 rules (727 with conclusion selected). Queue: 3876 rules.
18800 rules inserted. Base: 8988 rules (727 with conclusion selected). Queue: 4674 rules.
19000 rules inserted. Base: 9099 rules (729 with conclusion selected). Queue: 5265 rules.
19200 rules inserted. Base: 9125 rules (743 with conclusion selected). Queue: 5359 rules.
19400 rules inserted. Base: 9195 rules (743 with conclusion selected). Queue: 5218 rules.
19600 rules inserted. Base: 9269 rules (743 with conclusion selected). Queue: 5335 rules.
19800 rules inserted. Base: 9327 rules (759 with conclusion selected). Queue: 5216 rules.
20000 rules inserted. Base: 9373 rules (759 with conclusion selected). Queue: 5169 rules.
20200 rules inserted. Base: 9415 rules (761 with conclusion selected). Queue: 5168 rules.
20400 rules inserted. Base: 9469 rules (762 with conclusion selected). Queue: 5113 rules.
20600 rules inserted. Base: 9650 rules (762 with conclusion selected). Queue: 5128 rules.
20800 rules inserted. Base: 9798 rules (765 with conclusion selected). Queue: 5122 rules.
21000 rules inserted. Base: 9996 rules (768 with conclusion selected). Queue: 5129 rules.
21200 rules inserted. Base: 10141 rules (768 with conclusion selected). Queue: 5111 rules.
21400 rules inserted. Base: 10324 rules (775 with conclusion selected). Queue: 5275 rules.
21600 rules inserted. Base: 10485 rules (792 with conclusion selected). Queue: 5571 rules.
21800 rules inserted. Base: 10561 rules (795 with conclusion selected). Queue: 5537 rules.
22000 rules inserted. Base: 10643 rules (800 with conclusion selected). Queue: 5540 rules.
22200 rules inserted. Base: 10682 rules (813 with conclusion selected). Queue: 5713 rules.
22400 rules inserted. Base: 10773 rules (831 with conclusion selected). Queue: 5668 rules.
22600 rules inserted. Base: 10781 rules (831 with conclusion selected). Queue: 5475 rules.
22800 rules inserted. Base: 10747 rules (831 with conclusion selected). Queue: 5273 rules.
23000 rules inserted. Base: 10739 rules (831 with conclusion selected). Queue: 5068 rules.
23200 rules inserted. Base: 10705 rules (831 with conclusion selected). Queue: 4865 rules.
23400 rules inserted. Base: 10654 rules (831 with conclusion selected). Queue: 4658 rules.
23600 rules inserted. Base: 10669 rules (831 with conclusion selected). Queue: 4495 rules.
23800 rules inserted. Base: 10677 rules (831 with conclusion selected). Queue: 4302 rules.
24000 rules inserted. Base: 10620 rules (831 with conclusion selected). Queue: 4228 rules.
24200 rules inserted. Base: 10608 rules (831 with conclusion selected). Queue: 4101 rules.
24400 rules inserted. Base: 10599 rules (841 with conclusion selected). Queue: 4222 rules.
24600 rules inserted. Base: 10678 rules (841 with conclusion selected). Queue: 4177 rules.
24800 rules inserted. Base: 10696 rules (857 with conclusion selected). Queue: 4342 rules.
25000 rules inserted. Base: 10762 rules (857 with conclusion selected). Queue: 4301 rules.
25200 rules inserted. Base: 10809 rules (857 with conclusion selected). Queue: 4250 rules.
25400 rules inserted. Base: 10845 rules (857 with conclusion selected). Queue: 4212 rules.
25600 rules inserted. Base: 11028 rules (857 with conclusion selected). Queue: 4365 rules.
25800 rules inserted. Base: 11127 rules (857 with conclusion selected). Queue: 4411 rules.
26000 rules inserted. Base: 10807 rules (857 with conclusion selected). Queue: 4421 rules.
26200 rules inserted. Base: 10970 rules (857 with conclusion selected). Queue: 4420 rules.
26400 rules inserted. Base: 11124 rules (860 with conclusion selected). Queue: 4392 rules.
26600 rules inserted. Base: 11317 rules (863 with conclusion selected). Queue: 4418 rules.
26800 rules inserted. Base: 11444 rules (866 with conclusion selected). Queue: 4389 rules.
27000 rules inserted. Base: 11472 rules (866 with conclusion selected). Queue: 4337 rules.
27200 rules inserted. Base: 11510 rules (880 with conclusion selected). Queue: 4364 rules.
27400 rules inserted. Base: 11623 rules (895 with conclusion selected). Queue: 4597 rules.
27600 rules inserted. Base: 11715 rules (901 with conclusion selected). Queue: 4461 rules.
27800 rules inserted. Base: 11738 rules (922 with conclusion selected). Queue: 4478 rules.
28000 rules inserted. Base: 11812 rules (930 with conclusion selected). Queue: 4380 rules.
28200 rules inserted. Base: 11804 rules (940 with conclusion selected). Queue: 4246 rules.
28400 rules inserted. Base: 11864 rules (940 with conclusion selected). Queue: 4217 rules.
28600 rules inserted. Base: 11878 rules (942 with conclusion selected). Queue: 4077 rules.
28800 rules inserted. Base: 11890 rules (952 with conclusion selected). Queue: 4028 rules.
29000 rules inserted. Base: 11904 rules (952 with conclusion selected). Queue: 3916 rules.
29200 rules inserted. Base: 11948 rules (974 with conclusion selected). Queue: 3888 rules.
29400 rules inserted. Base: 12011 rules (992 with conclusion selected). Queue: 3940 rules.
29600 rules inserted. Base: 12066 rules (992 with conclusion selected). Queue: 3894 rules.
29800 rules inserted. Base: 12052 rules (992 with conclusion selected). Queue: 3894 rules.
30000 rules inserted. Base: 12071 rules (992 with conclusion selected). Queue: 3933 rules.
30200 rules inserted. Base: 12201 rules (992 with conclusion selected). Queue: 4014 rules.
30400 rules inserted. Base: 12265 rules (992 with conclusion selected). Queue: 4113 rules.
30600 rules inserted. Base: 12449 rules (992 with conclusion selected). Queue: 4249 rules.
30800 rules inserted. Base: 12412 rules (992 with conclusion selected). Queue: 4262 rules.
31000 rules inserted. Base: 12322 rules (992 with conclusion selected). Queue: 4265 rules.
31200 rules inserted. Base: 12361 rules (992 with conclusion selected). Queue: 4233 rules.
31400 rules inserted. Base: 12444 rules (992 with conclusion selected). Queue: 4178 rules.
31600 rules inserted. Base: 12542 rules (1002 with conclusion selected). Queue: 4274 rules.
31800 rules inserted. Base: 12642 rules (1005 with conclusion selected). Queue: 4237 rules.
32000 rules inserted. Base: 12755 rules (1028 with conclusion selected). Queue: 4244 rules.
32200 rules inserted. Base: 12814 rules (1056 with conclusion selected). Queue: 4151 rules.
select attacker(pk(sk))/-5000
32400 rules inserted. Base: 12936 rules (1072 with conclusion selected). Queue: 4185 rules.
32600 rules inserted. Base: 12991 rules (1086 with conclusion selected). Queue: 4089 rules.
32800 rules inserted. Base: 13011 rules (1086 with conclusion selected). Queue: 3939 rules.
33000 rules inserted. Base: 13077 rules (1102 with conclusion selected). Queue: 3938 rules.
33200 rules inserted. Base: 13083 rules (1102 with conclusion selected). Queue: 3846 rules.
33400 rules inserted. Base: 13180 rules (1114 with conclusion selected). Queue: 3765 rules.
33600 rules inserted. Base: 13372 rules (1114 with conclusion selected). Queue: 3581 rules.
33800 rules inserted. Base: 13564 rules (1114 with conclusion selected). Queue: 3433 rules.
34000 rules inserted. Base: 13665 rules (1114 with conclusion selected). Queue: 3429 rules.
34200 rules inserted. Base: 13628 rules (1114 with conclusion selected). Queue: 3314 rules.
34400 rules inserted. Base: 13689 rules (1114 with conclusion selected). Queue: 3275 rules.
34600 rules inserted. Base: 13675 rules (1114 with conclusion selected). Queue: 3267 rules.
34800 rules inserted. Base: 13667 rules (1114 with conclusion selected). Queue: 3289 rules.
35000 rules inserted. Base: 13796 rules (1114 with conclusion selected). Queue: 3353 rules.
35200 rules inserted. Base: 13850 rules (1114 with conclusion selected). Queue: 3406 rules.
35400 rules inserted. Base: 13922 rules (1114 with conclusion selected). Queue: 3355 rules.
35600 rules inserted. Base: 14041 rules (1131 with conclusion selected). Queue: 3345 rules.
35800 rules inserted. Base: 14106 rules (1131 with conclusion selected). Queue: 3280 rules.
36000 rules inserted. Base: 14174 rules (1131 with conclusion selected). Queue: 3248 rules.
36200 rules inserted. Base: 14323 rules (1148 with conclusion selected). Queue: 3314 rules.
36400 rules inserted. Base: 14441 rules (1183 with conclusion selected). Queue: 3321 rules.
36600 rules inserted. Base: 14521 rules (1193 with conclusion selected). Queue: 3305 rules.
36800 rules inserted. Base: 14598 rules (1211 with conclusion selected). Queue: 3383 rules.
37000 rules inserted. Base: 14652 rules (1227 with conclusion selected). Queue: 3368 rules.
37200 rules inserted. Base: 14720 rules (1229 with conclusion selected). Queue: 3361 rules.
37400 rules inserted. Base: 14852 rules (1229 with conclusion selected). Queue: 3269 rules.
37600 rules inserted. Base: 14954 rules (1229 with conclusion selected). Queue: 3191 rules.
37800 rules inserted. Base: 15090 rules (1229 with conclusion selected). Queue: 3060 rules.
38000 rules inserted. Base: 15282 rules (1229 with conclusion selected). Queue: 2910 rules.
38200 rules inserted. Base: 15351 rules (1229 with conclusion selected). Queue: 2862 rules.
38400 rules inserted. Base: 15322 rules (1229 with conclusion selected). Queue: 2765 rules.
38600 rules inserted. Base: 15403 rules (1229 with conclusion selected). Queue: 2711 rules.
38800 rules inserted. Base: 15513 rules (1267 with conclusion selected). Queue: 2729 rules.
39000 rules inserted. Base: 15582 rules (1267 with conclusion selected). Queue: 2698 rules.
39200 rules inserted. Base: 15670 rules (1267 with conclusion selected). Queue: 2658 rules.
39400 rules inserted. Base: 15773 rules (1269 with conclusion selected). Queue: 2627 rules.
39600 rules inserted. Base: 15950 rules (1270 with conclusion selected). Queue: 2655 rules.
39800 rules inserted. Base: 16121 rules (1276 with conclusion selected). Queue: 2602 rules.
40000 rules inserted. Base: 16221 rules (1290 with conclusion selected). Queue: 2646 rules.
40200 rules inserted. Base: 16288 rules (1292 with conclusion selected). Queue: 2634 rules.
40400 rules inserted. Base: 16013 rules (1298 with conclusion selected). Queue: 2600 rules.
40600 rules inserted. Base: 15908 rules (1298 with conclusion selected). Queue: 2598 rules.
40800 rules inserted. Base: 15800 rules (1298 with conclusion selected). Queue: 2561 rules.
41000 rules inserted. Base: 15473 rules (1298 with conclusion selected). Queue: 2510 rules.
41200 rules inserted. Base: 15543 rules (1298 with conclusion selected). Queue: 2407 rules.
41400 rules inserted. Base: 15667 rules (1318 with conclusion selected). Queue: 2457 rules.
41600 rules inserted. Base: 15713 rules (1325 with conclusion selected). Queue: 2580 rules.
41800 rules inserted. Base: 15821 rules (1337 with conclusion selected). Queue: 2500 rules.
42000 rules inserted. Base: 15923 rules (1339 with conclusion selected). Queue: 2460 rules.
42200 rules inserted. Base: 16092 rules (1341 with conclusion selected). Queue: 2506 rules.
42400 rules inserted. Base: 16142 rules (1348 with conclusion selected). Queue: 2455 rules.
42600 rules inserted. Base: 16217 rules (1354 with conclusion selected). Queue: 2487 rules.
42800 rules inserted. Base: 16332 rules (1363 with conclusion selected). Queue: 2490 rules.
43000 rules inserted. Base: 16483 rules (1389 with conclusion selected). Queue: 2587 rules.
43200 rules inserted. Base: 16460 rules (1405 with conclusion selected). Queue: 2539 rules.
43400 rules inserted. Base: 16520 rules (1405 with conclusion selected). Queue: 2536 rules.
43600 rules inserted. Base: 16549 rules (1405 with conclusion selected). Queue: 2453 rules.
43800 rules inserted. Base: 16681 rules (1411 with conclusion selected). Queue: 2508 rules.
44000 rules inserted. Base: 16774 rules (1420 with conclusion selected). Queue: 2578 rules.
44200 rules inserted. Base: 16838 rules (1445 with conclusion selected). Queue: 2603 rules.
44400 rules inserted. Base: 16929 rules (1452 with conclusion selected). Queue: 2704 rules.
44600 rules inserted. Base: 17058 rules (1452 with conclusion selected). Queue: 2695 rules.
44800 rules inserted. Base: 17172 rules (1457 with conclusion selected). Queue: 2805 rules.
45000 rules inserted. Base: 17270 rules (1465 with conclusion selected). Queue: 2753 rules.
45200 rules inserted. Base: 17409 rules (1481 with conclusion selected). Queue: 2882 rules.
45400 rules inserted. Base: 17452 rules (1489 with conclusion selected). Queue: 2825 rules.
45600 rules inserted. Base: 17506 rules (1493 with conclusion selected). Queue: 2691 rules.
45800 rules inserted. Base: 17489 rules (1494 with conclusion selected). Queue: 2607 rules.
46000 rules inserted. Base: 17543 rules (1519 with conclusion selected). Queue: 2588 rules.
46200 rules inserted. Base: 17693 rules (1523 with conclusion selected). Queue: 2675 rules.
46400 rules inserted. Base: 17774 rules (1533 with conclusion selected). Queue: 2723 rules.
46600 rules inserted. Base: 17814 rules (1545 with conclusion selected). Queue: 2803 rules.
46800 rules inserted. Base: 17930 rules (1561 with conclusion selected). Queue: 2796 rules.
47000 rules inserted. Base: 18055 rules (1566 with conclusion selected). Queue: 2827 rules.
47200 rules inserted. Base: 18161 rules (1567 with conclusion selected). Queue: 2877 rules.
47400 rules inserted. Base: 18159 rules (1567 with conclusion selected). Queue: 2817 rules.
47600 rules inserted. Base: 18264 rules (1572 with conclusion selected). Queue: 3000 rules.
47800 rules inserted. Base: 18351 rules (1586 with conclusion selected). Queue: 2999 rules.
48000 rules inserted. Base: 18485 rules (1591 with conclusion selected). Queue: 2991 rules.
48200 rules inserted. Base: 18556 rules (1607 with conclusion selected). Queue: 3093 rules.
48400 rules inserted. Base: 18561 rules (1616 with conclusion selected). Queue: 3000 rules.
48600 rules inserted. Base: 18616 rules (1616 with conclusion selected). Queue: 2915 rules.
48800 rules inserted. Base: 18688 rules (1623 with conclusion selected). Queue: 2964 rules.
49000 rules inserted. Base: 18671 rules (1628 with conclusion selected). Queue: 2874 rules.
49200 rules inserted. Base: 18758 rules (1645 with conclusion selected). Queue: 2951 rules.
49400 rules inserted. Base: 18837 rules (1655 with conclusion selected). Queue: 3026 rules.
49600 rules inserted. Base: 18987 rules (1655 with conclusion selected). Queue: 3050 rules.
49800 rules inserted. Base: 19152 rules (1663 with conclusion selected). Queue: 3310 rules.
50000 rules inserted. Base: 19092 rules (1663 with conclusion selected). Queue: 3318 rules.
50200 rules inserted. Base: 19116 rules (1663 with conclusion selected). Queue: 3269 rules.
50400 rules inserted. Base: 19301 rules (1663 with conclusion selected). Queue: 3095 rules.
50600 rules inserted. Base: 19453 rules (1672 with conclusion selected). Queue: 3360 rules.
50800 rules inserted. Base: 19562 rules (1684 with conclusion selected). Queue: 3568 rules.
51000 rules inserted. Base: 19691 rules (1698 with conclusion selected). Queue: 3929 rules.
51200 rules inserted. Base: 19800 rules (1709 with conclusion selected). Queue: 4031 rules.
51400 rules inserted. Base: 19615 rules (1719 with conclusion selected). Queue: 4013 rules.
51600 rules inserted. Base: 19645 rules (1723 with conclusion selected). Queue: 3884 rules.
51800 rules inserted. Base: 19661 rules (1736 with conclusion selected). Queue: 3865 rules.
52000 rules inserted. Base: 19769 rules (1748 with conclusion selected). Queue: 3877 rules.
52200 rules inserted. Base: 19874 rules (1787 with conclusion selected). Queue: 3955 rules.
52400 rules inserted. Base: 19966 rules (1790 with conclusion selected). Queue: 3945 rules.
52600 rules inserted. Base: 20077 rules (1792 with conclusion selected). Queue: 3869 rules.
52800 rules inserted. Base: 20224 rules (1801 with conclusion selected). Queue: 4056 rules.
53000 rules inserted. Base: 20331 rules (1802 with conclusion selected). Queue: 4153 rules.
53200 rules inserted. Base: 20356 rules (1802 with conclusion selected). Queue: 4022 rules.
53400 rules inserted. Base: 20263 rules (1805 with conclusion selected). Queue: 3978 rules.
53600 rules inserted. Base: 20188 rules (1808 with conclusion selected). Queue: 4237 rules.
53800 rules inserted. Base: 20301 rules (1809 with conclusion selected). Queue: 4324 rules.
54000 rules inserted. Base: 20397 rules (1812 with conclusion selected). Queue: 4279 rules.
54200 rules inserted. Base: 20468 rules (1815 with conclusion selected). Queue: 4232 rules.
54400 rules inserted. Base: 20589 rules (1818 with conclusion selected). Queue: 4293 rules.
54600 rules inserted. Base: 20720 rules (1819 with conclusion selected). Queue: 4384 rules.
54800 rules inserted. Base: 20803 rules (1822 with conclusion selected). Queue: 4344 rules.
55000 rules inserted. Base: 20919 rules (1827 with conclusion selected). Queue: 4366 rules.
55200 rules inserted. Base: 21030 rules (1839 with conclusion selected). Queue: 4670 rules.
55400 rules inserted. Base: 20993 rules (1868 with conclusion selected). Queue: 4873 rules.
55600 rules inserted. Base: 21060 rules (1886 with conclusion selected). Queue: 5068 rules.
55800 rules inserted. Base: 21148 rules (1922 with conclusion selected). Queue: 5050 rules.
56000 rules inserted. Base: 21234 rules (1925 with conclusion selected). Queue: 5006 rules.
56200 rules inserted. Base: 21338 rules (1959 with conclusion selected). Queue: 4965 rules.
56400 rules inserted. Base: 21436 rules (1976 with conclusion selected). Queue: 5172 rules.
56600 rules inserted. Base: 21542 rules (1977 with conclusion selected). Queue: 5167 rules.
56800 rules inserted. Base: 21663 rules (1977 with conclusion selected). Queue: 5130 rules.
57000 rules inserted. Base: 21757 rules (1977 with conclusion selected). Queue: 5107 rules.
57200 rules inserted. Base: 21748 rules (1978 with conclusion selected). Queue: 4920 rules.
57400 rules inserted. Base: 21857 rules (1985 with conclusion selected). Queue: 4745 rules.
57600 rules inserted. Base: 22014 rules (1989 with conclusion selected). Queue: 4633 rules.
57800 rules inserted. Base: 22114 rules (1989 with conclusion selected). Queue: 4610 rules.
58000 rules inserted. Base: 22218 rules (1989 with conclusion selected). Queue: 4592 rules.
58200 rules inserted. Base: 22301 rules (2037 with conclusion selected). Queue: 4561 rules.
58400 rules inserted. Base: 22389 rules (2037 with conclusion selected). Queue: 4517 rules.
58600 rules inserted. Base: 22494 rules (2037 with conclusion selected). Queue: 4477 rules.
58800 rules inserted. Base: 22596 rules (2037 with conclusion selected). Queue: 4461 rules.
59000 rules inserted. Base: 22635 rules (2037 with conclusion selected). Queue: 4417 rules.
59200 rules inserted. Base: 22718 rules (2037 with conclusion selected). Queue: 4508 rules.
59400 rules inserted. Base: 22834 rules (2041 with conclusion selected). Queue: 4548 rules.
59600 rules inserted. Base: 22967 rules (2042 with conclusion selected). Queue: 4553 rules.
59800 rules inserted. Base: 23065 rules (2055 with conclusion selected). Queue: 4600 rules.
60000 rules inserted. Base: 23170 rules (2063 with conclusion selected). Queue: 4598 rules.
60200 rules inserted. Base: 23269 rules (2072 with conclusion selected). Queue: 4656 rules.
60400 rules inserted. Base: 23350 rules (2081 with conclusion selected). Queue: 4631 rules.
60600 rules inserted. Base: 23440 rules (2085 with conclusion selected). Queue: 4675 rules.
60800 rules inserted. Base: 23561 rules (2126 with conclusion selected). Queue: 4773 rules.
61000 rules inserted. Base: 23683 rules (2128 with conclusion selected). Queue: 4758 rules.
61200 rules inserted. Base: 23779 rules (2140 with conclusion selected). Queue: 4872 rules.
61400 rules inserted. Base: 23904 rules (2145 with conclusion selected). Queue: 4875 rules.
61600 rules inserted. Base: 24071 rules (2153 with conclusion selected). Queue: 5226 rules.
61800 rules inserted. Base: 24166 rules (2153 with conclusion selected). Queue: 5729 rules.
62000 rules inserted. Base: 24309 rules (2153 with conclusion selected). Queue: 5935 rules.
62200 rules inserted. Base: 24161 rules (2173 with conclusion selected). Queue: 6586 rules.
62400 rules inserted. Base: 24270 rules (2173 with conclusion selected). Queue: 6819 rules.
62600 rules inserted. Base: 24355 rules (2177 with conclusion selected). Queue: 7427 rules.
62800 rules inserted. Base: 24441 rules (2177 with conclusion selected). Queue: 7683 rules.
63000 rules inserted. Base: 24544 rules (2177 with conclusion selected). Queue: 8187 rules.
63200 rules inserted. Base: 24685 rules (2177 with conclusion selected). Queue: 8393 rules.
63400 rules inserted. Base: 24756 rules (2245 with conclusion selected). Queue: 8761 rules.
63600 rules inserted. Base: 24841 rules (2245 with conclusion selected). Queue: 8734 rules.
63800 rules inserted. Base: 24964 rules (2245 with conclusion selected). Queue: 8716 rules.
64000 rules inserted. Base: 25061 rules (2245 with conclusion selected). Queue: 8696 rules.
64200 rules inserted. Base: 25088 rules (2246 with conclusion selected). Queue: 8669 rules.
64400 rules inserted. Base: 25219 rules (2255 with conclusion selected). Queue: 8822 rules.
64600 rules inserted. Base: 25402 rules (2264 with conclusion selected). Queue: 9295 rules.
64800 rules inserted. Base: 25454 rules (2275 with conclusion selected). Queue: 9443 rules.
65000 rules inserted. Base: 25536 rules (2278 with conclusion selected). Queue: 9393 rules.
65200 rules inserted. Base: 25611 rules (2302 with conclusion selected). Queue: 9370 rules.
65400 rules inserted. Base: 25698 rules (2305 with conclusion selected). Queue: 9349 rules.
65600 rules inserted. Base: 25848 rules (2309 with conclusion selected). Queue: 9335 rules.
65800 rules inserted. Base: 25978 rules (2315 with conclusion selected). Queue: 9471 rules.
66000 rules inserted. Base: 26126 rules (2327 with conclusion selected). Queue: 9721 rules.
66200 rules inserted. Base: 26311 rules (2334 with conclusion selected). Queue: 10108 rules.
66400 rules inserted. Base: 26439 rules (2337 with conclusion selected). Queue: 10330 rules.
66600 rules inserted. Base: 26545 rules (2338 with conclusion selected). Queue: 10456 rules.
66800 rules inserted. Base: 26597 rules (2338 with conclusion selected). Queue: 10347 rules.
67000 rules inserted. Base: 26591 rules (2344 with conclusion selected). Queue: 10143 rules.
67200 rules inserted. Base: 26554 rules (2344 with conclusion selected). Queue: 10000 rules.
67400 rules inserted. Base: 26548 rules (2352 with conclusion selected). Queue: 9798 rules.
67600 rules inserted. Base: 26603 rules (2358 with conclusion selected). Queue: 9699 rules.
67800 rules inserted. Base: 26544 rules (2358 with conclusion selected). Queue: 9539 rules.
68000 rules inserted. Base: 26573 rules (2366 with conclusion selected). Queue: 9369 rules.
68200 rules inserted. Base: 26587 rules (2370 with conclusion selected). Queue: 9258 rules.
68400 rules inserted. Base: 26624 rules (2382 with conclusion selected). Queue: 9373 rules.
68600 rules inserted. Base: 26618 rules (2388 with conclusion selected). Queue: 9169 rules.
68800 rules inserted. Base: 26581 rules (2388 with conclusion selected). Queue: 9026 rules.
69000 rules inserted. Base: 26643 rules (2396 with conclusion selected). Queue: 8828 rules.
69200 rules inserted. Base: 26630 rules (2402 with conclusion selected). Queue: 8725 rules.
69400 rules inserted. Base: 26571 rules (2402 with conclusion selected). Queue: 8536 rules.
69600 rules inserted. Base: 26600 rules (2410 with conclusion selected). Queue: 8395 rules.
69800 rules inserted. Base: 26614 rules (2414 with conclusion selected). Queue: 8273 rules.
70000 rules inserted. Base: 26766 rules (2414 with conclusion selected). Queue: 8258 rules.
70200 rules inserted. Base: 26815 rules (2414 with conclusion selected). Queue: 8337 rules.
70400 rules inserted. Base: 26745 rules (2414 with conclusion selected). Queue: 8197 rules.
70600 rules inserted. Base: 26739 rules (2420 with conclusion selected). Queue: 7993 rules.
70800 rules inserted. Base: 26702 rules (2420 with conclusion selected). Queue: 7850 rules.
71000 rules inserted. Base: 26696 rules (2428 with conclusion selected). Queue: 7648 rules.
71200 rules inserted. Base: 26751 rules (2434 with conclusion selected). Queue: 7549 rules.
71400 rules inserted. Base: 26692 rules (2434 with conclusion selected). Queue: 7385 rules.
71600 rules inserted. Base: 26721 rules (2442 with conclusion selected). Queue: 7219 rules.
71800 rules inserted. Base: 26735 rules (2446 with conclusion selected). Queue: 7110 rules.
72000 rules inserted. Base: 26879 rules (2448 with conclusion selected). Queue: 7088 rules.
72200 rules inserted. Base: 27038 rules (2450 with conclusion selected). Queue: 7375 rules.
72400 rules inserted. Base: 27141 rules (2450 with conclusion selected). Queue: 7610 rules.
72600 rules inserted. Base: 27224 rules (2478 with conclusion selected). Queue: 8281 rules.
72800 rules inserted. Base: 27290 rules (2478 with conclusion selected). Queue: 8318 rules.
73000 rules inserted. Base: 27398 rules (2482 with conclusion selected). Queue: 8357 rules.
73200 rules inserted. Base: 27524 rules (2482 with conclusion selected). Queue: 8488 rules.
73400 rules inserted. Base: 27663 rules (2485 with conclusion selected). Queue: 8593 rules.
73600 rules inserted. Base: 27756 rules (2486 with conclusion selected). Queue: 8703 rules.
73800 rules inserted. Base: 27861 rules (2489 with conclusion selected). Queue: 8669 rules.
74000 rules inserted. Base: 27889 rules (2528 with conclusion selected). Queue: 8770 rules.
74200 rules inserted. Base: 27934 rules (2528 with conclusion selected). Queue: 8729 rules.
74400 rules inserted. Base: 28044 rules (2564 with conclusion selected). Queue: 8701 rules.
74600 rules inserted. Base: 28158 rules (2570 with conclusion selected). Queue: 8847 rules.
74800 rules inserted. Base: 28158 rules (2578 with conclusion selected). Queue: 8764 rules.
75000 rules inserted. Base: 28301 rules (2588 with conclusion selected). Queue: 8964 rules.
75200 rules inserted. Base: 28457 rules (2589 with conclusion selected). Queue: 9369 rules.
75400 rules inserted. Base: 28529 rules (2593 with conclusion selected). Queue: 9420 rules.
75600 rules inserted. Base: 28676 rules (2593 with conclusion selected). Queue: 9488 rules.
75800 rules inserted. Base: 28805 rules (2596 with conclusion selected). Queue: 9522 rules.
76000 rules inserted. Base: 28914 rules (2597 with conclusion selected). Queue: 9617 rules.
76200 rules inserted. Base: 29029 rules (2597 with conclusion selected). Queue: 9599 rules.
76400 rules inserted. Base: 29148 rules (2597 with conclusion selected). Queue: 9562 rules.
76600 rules inserted. Base: 29255 rules (2597 with conclusion selected). Queue: 9547 rules.
76800 rules inserted. Base: 29317 rules (2601 with conclusion selected). Queue: 9534 rules.
77000 rules inserted. Base: 29341 rules (2613 with conclusion selected). Queue: 9519 rules.
77200 rules inserted. Base: 29488 rules (2628 with conclusion selected). Queue: 9780 rules.
77400 rules inserted. Base: 29569 rules (2638 with conclusion selected). Queue: 9876 rules.
77600 rules inserted. Base: 29593 rules (2650 with conclusion selected). Queue: 9861 rules.
77800 rules inserted. Base: 29736 rules (2665 with conclusion selected). Queue: 10086 rules.
78000 rules inserted. Base: 29883 rules (2669 with conclusion selected). Queue: 10066 rules.
78200 rules inserted. Base: 29861 rules (2669 with conclusion selected). Queue: 9860 rules.
78400 rules inserted. Base: 29859 rules (2685 with conclusion selected). Queue: 9841 rules.
78600 rules inserted. Base: 29867 rules (2689 with conclusion selected). Queue: 9812 rules.
78800 rules inserted. Base: 30041 rules (2704 with conclusion selected). Queue: 10175 rules.
79000 rules inserted. Base: 30064 rules (2708 with conclusion selected). Queue: 10214 rules.
79200 rules inserted. Base: 30110 rules (2714 with conclusion selected). Queue: 10046 rules.
79400 rules inserted. Base: 30051 rules (2716 with conclusion selected). Queue: 9919 rules.
79600 rules inserted. Base: 30101 rules (2722 with conclusion selected). Queue: 9719 rules.
79800 rules inserted. Base: 30068 rules (2726 with conclusion selected). Queue: 9624 rules.
80000 rules inserted. Base: 30114 rules (2732 with conclusion selected). Queue: 9432 rules.
80200 rules inserted. Base: 30077 rules (2738 with conclusion selected). Queue: 9311 rules.
80400 rules inserted. Base: 30048 rules (2740 with conclusion selected). Queue: 9113 rules.
80600 rules inserted. Base: 30108 rules (2744 with conclusion selected). Queue: 9051 rules.
80800 rules inserted. Base: 30234 rules (2780 with conclusion selected). Queue: 8999 rules.
81000 rules inserted. Base: 30346 rules (2780 with conclusion selected). Queue: 8984 rules.
81200 rules inserted. Base: 30464 rules (2780 with conclusion selected). Queue: 8969 rules.
81400 rules inserted. Base: 30561 rules (2780 with conclusion selected). Queue: 8950 rules.
81600 rules inserted. Base: 30684 rules (2784 with conclusion selected). Queue: 9107 rules.
81800 rules inserted. Base: 30783 rules (2784 with conclusion selected). Queue: 9090 rules.
82000 rules inserted. Base: 30903 rules (2784 with conclusion selected). Queue: 9077 rules.
82200 rules inserted. Base: 30971 rules (2788 with conclusion selected). Queue: 9226 rules.
82400 rules inserted. Base: 31049 rules (2791 with conclusion selected). Queue: 9174 rules.
82600 rules inserted. Base: 31172 rules (2837 with conclusion selected). Queue: 9133 rules.
82800 rules inserted. Base: 31277 rules (2837 with conclusion selected). Queue: 9096 rules.
83000 rules inserted. Base: 31306 rules (2845 with conclusion selected). Queue: 9020 rules.
83200 rules inserted. Base: 31357 rules (2849 with conclusion selected). Queue: 9126 rules.
83400 rules inserted. Base: 31475 rules (2857 with conclusion selected). Queue: 9026 rules.
83600 rules inserted. Base: 31488 rules (2865 with conclusion selected). Queue: 8962 rules.
83800 rules inserted. Base: 31633 rules (2868 with conclusion selected). Queue: 9068 rules.
84000 rules inserted. Base: 31710 rules (2869 with conclusion selected). Queue: 9195 rules.
84200 rules inserted. Base: 31830 rules (2869 with conclusion selected). Queue: 9150 rules.
84400 rules inserted. Base: 31948 rules (2869 with conclusion selected). Queue: 9114 rules.
84600 rules inserted. Base: 32041 rules (2869 with conclusion selected). Queue: 9100 rules.
84800 rules inserted. Base: 32150 rules (2869 with conclusion selected). Queue: 9078 rules.
85000 rules inserted. Base: 32267 rules (2869 with conclusion selected). Queue: 9060 rules.
85200 rules inserted. Base: 32351 rules (2869 with conclusion selected). Queue: 9048 rules.
85400 rules inserted. Base: 32471 rules (2869 with conclusion selected). Queue: 9043 rules.
85600 rules inserted. Base: 32600 rules (2869 with conclusion selected). Queue: 9496 rules.
85800 rules inserted. Base: 32710 rules (2869 with conclusion selected). Queue: 9744 rules.
86000 rules inserted. Base: 32812 rules (2873 with conclusion selected). Queue: 10321 rules.
86200 rules inserted. Base: 32935 rules (2881 with conclusion selected). Queue: 10222 rules.
86400 rules inserted. Base: 33066 rules (2889 with conclusion selected). Queue: 10281 rules.
86600 rules inserted. Base: 33143 rules (2893 with conclusion selected). Queue: 10306 rules.
86800 rules inserted. Base: 33285 rules (2893 with conclusion selected). Queue: 10415 rules.
87000 rules inserted. Base: 33386 rules (2899 with conclusion selected). Queue: 10342 rules.
87200 rules inserted. Base: 33517 rules (2907 with conclusion selected). Queue: 10234 rules.
87400 rules inserted. Base: 33662 rules (2914 with conclusion selected). Queue: 10390 rules.
87600 rules inserted. Base: 33726 rules (2915 with conclusion selected). Queue: 10524 rules.
87800 rules inserted. Base: 33852 rules (2931 with conclusion selected). Queue: 10417 rules.
88000 rules inserted. Base: 33975 rules (2939 with conclusion selected). Queue: 10309 rules.
88200 rules inserted. Base: 34109 rules (2947 with conclusion selected). Queue: 10317 rules.
88400 rules inserted. Base: 34236 rules (2950 with conclusion selected). Queue: 10359 rules.
88600 rules inserted. Base: 34322 rules (2951 with conclusion selected). Queue: 10489 rules.
88800 rules inserted. Base: 34484 rules (2955 with conclusion selected). Queue: 10606 rules.
89000 rules inserted. Base: 34550 rules (2965 with conclusion selected). Queue: 10751 rules.
89200 rules inserted. Base: 34572 rules (2977 with conclusion selected). Queue: 10725 rules.
89400 rules inserted. Base: 34667 rules (2995 with conclusion selected). Queue: 10790 rules.
89600 rules inserted. Base: 34835 rules (2998 with conclusion selected). Queue: 11040 rules.
89800 rules inserted. Base: 34994 rules (2998 with conclusion selected). Queue: 11342 rules.
90000 rules inserted. Base: 35107 rules (2998 with conclusion selected). Queue: 11605 rules.
90200 rules inserted. Base: 35215 rules (2998 with conclusion selected). Queue: 12184 rules.
90400 rules inserted. Base: 35354 rules (3002 with conclusion selected). Queue: 12201 rules.
90600 rules inserted. Base: 35513 rules (3002 with conclusion selected). Queue: 12494 rules.
90800 rules inserted. Base: 35623 rules (3002 with conclusion selected). Queue: 12751 rules.
91000 rules inserted. Base: 35731 rules (3002 with conclusion selected). Queue: 13335 rules.
91200 rules inserted. Base: 35853 rules (3018 with conclusion selected). Queue: 13325 rules.
91400 rules inserted. Base: 35917 rules (3046 with conclusion selected). Queue: 13301 rules.
91600 rules inserted. Base: 36075 rules (3050 with conclusion selected). Queue: 13315 rules.
91800 rules inserted. Base: 36205 rules (3056 with conclusion selected). Queue: 13255 rules.
92000 rules inserted. Base: 36319 rules (3068 with conclusion selected). Queue: 13161 rules.
92200 rules inserted. Base: 36320 rules (3070 with conclusion selected). Queue: 13260 rules.
92400 rules inserted. Base: 36447 rules (3080 with conclusion selected). Queue: 13161 rules.
92600 rules inserted. Base: 36563 rules (3080 with conclusion selected). Queue: 13147 rules.
92800 rules inserted. Base: 36676 rules (3080 with conclusion selected). Queue: 13131 rules.
93000 rules inserted. Base: 36781 rules (3080 with conclusion selected). Queue: 13116 rules.
93200 rules inserted. Base: 36911 rules (3080 with conclusion selected). Queue: 13400 rules.
93400 rules inserted. Base: 37022 rules (3080 with conclusion selected). Queue: 13676 rules.
93600 rules inserted. Base: 37170 rules (3080 with conclusion selected). Queue: 13943 rules.
93800 rules inserted. Base: 37285 rules (3084 with conclusion selected). Queue: 14752 rules.
94000 rules inserted. Base: 37396 rules (3084 with conclusion selected). Queue: 15034 rules.
94200 rules inserted. Base: 37535 rules (3084 with conclusion selected). Queue: 15301 rules.
94400 rules inserted. Base: 37534 rules (3088 with conclusion selected). Queue: 15747 rules.
94600 rules inserted. Base: 37496 rules (3096 with conclusion selected). Queue: 15559 rules.
94800 rules inserted. Base: 37493 rules (3096 with conclusion selected). Queue: 15448 rules.
95000 rules inserted. Base: 37455 rules (3104 with conclusion selected). Queue: 15260 rules.
95200 rules inserted. Base: 37476 rules (3110 with conclusion selected). Queue: 15187 rules.
95400 rules inserted. Base: 37512 rules (3112 with conclusion selected). Queue: 14999 rules.
95600 rules inserted. Base: 37451 rules (3118 with conclusion selected). Queue: 14900 rules.
95800 rules inserted. Base: 37487 rules (3120 with conclusion selected). Queue: 14712 rules.
96000 rules inserted. Base: 37493 rules (3121 with conclusion selected). Queue: 14605 rules.
96200 rules inserted. Base: 37554 rules (3144 with conclusion selected). Queue: 14600 rules.
96400 rules inserted. Base: 37621 rules (3168 with conclusion selected). Queue: 14601 rules.
96600 rules inserted. Base: 37730 rules (3168 with conclusion selected). Queue: 14580 rules.
96800 rules inserted. Base: 37827 rules (3168 with conclusion selected). Queue: 14551 rules.
97000 rules inserted. Base: 37942 rules (3168 with conclusion selected). Queue: 14529 rules.
97200 rules inserted. Base: 37898 rules (3202 with conclusion selected). Queue: 14487 rules.
97400 rules inserted. Base: 38042 rules (3218 with conclusion selected). Queue: 14499 rules.
97600 rules inserted. Base: 38146 rules (3218 with conclusion selected). Queue: 14483 rules.
97800 rules inserted. Base: 38242 rules (3218 with conclusion selected). Queue: 14469 rules.
98000 rules inserted. Base: 38394 rules (3234 with conclusion selected). Queue: 14606 rules.
98200 rules inserted. Base: 38360 rules (3270 with conclusion selected). Queue: 14620 rules.
98400 rules inserted. Base: 38487 rules (3270 with conclusion selected). Queue: 14606 rules.
98600 rules inserted. Base: 38599 rules (3270 with conclusion selected). Queue: 14570 rules.
98800 rules inserted. Base: 38714 rules (3270 with conclusion selected). Queue: 14556 rules.
99000 rules inserted. Base: 38779 rules (3278 with conclusion selected). Queue: 14496 rules.
99200 rules inserted. Base: 38752 rules (3286 with conclusion selected). Queue: 14423 rules.
99400 rules inserted. Base: 38748 rules (3286 with conclusion selected). Queue: 14335 rules.
99600 rules inserted. Base: 38884 rules (3294 with conclusion selected). Queue: 14230 rules.
99800 rules inserted. Base: 39026 rules (3302 with conclusion selected). Queue: 14123 rules.
100000 rules inserted. Base: 39180 rules (3305 with conclusion selected). Queue: 14255 rules.
100200 rules inserted. Base: 39244 rules (3306 with conclusion selected). Queue: 14417 rules.
100400 rules inserted. Base: 39372 rules (3308 with conclusion selected). Queue: 14351 rules.
100600 rules inserted. Base: 39365 rules (3308 with conclusion selected). Queue: 14247 rules.
100800 rules inserted. Base: 39405 rules (3316 with conclusion selected). Queue: 14059 rules.
101000 rules inserted. Base: 39317 rules (3316 with conclusion selected). Queue: 13955 rules.
101200 rules inserted. Base: 39357 rules (3324 with conclusion selected). Queue: 13767 rules.
101400 rules inserted. Base: 39374 rules (3330 with conclusion selected). Queue: 13698 rules.
101600 rules inserted. Base: 39327 rules (3332 with conclusion selected). Queue: 13515 rules.
101800 rules inserted. Base: 39342 rules (3338 with conclusion selected). Queue: 13418 rules.
102000 rules inserted. Base: 39295 rules (3340 with conclusion selected). Queue: 13235 rules.
102200 rules inserted. Base: 39411 rules (3347 with conclusion selected). Queue: 13426 rules.
102400 rules inserted. Base: 39445 rules (3347 with conclusion selected). Queue: 13522 rules.
102600 rules inserted. Base: 39483 rules (3353 with conclusion selected). Queue: 13330 rules.
102800 rules inserted. Base: 39397 rules (3355 with conclusion selected). Queue: 13226 rules.
103000 rules inserted. Base: 39435 rules (3361 with conclusion selected). Queue: 13034 rules.
103200 rules inserted. Base: 39399 rules (3363 with conclusion selected). Queue: 12922 rules.
103400 rules inserted. Base: 39407 rules (3371 with conclusion selected). Queue: 12780 rules.
103600 rules inserted. Base: 39369 rules (3371 with conclusion selected). Queue: 12667 rules.
103800 rules inserted. Base: 39375 rules (3379 with conclusion selected). Queue: 12496 rules.
104000 rules inserted. Base: 39335 rules (3379 with conclusion selected). Queue: 12389 rules.
104200 rules inserted. Base: 39518 rules (3386 with conclusion selected). Queue: 12697 rules.
104400 rules inserted. Base: 39671 rules (3426 with conclusion selected). Queue: 12648 rules.
104600 rules inserted. Base: 39785 rules (3436 with conclusion selected). Queue: 12827 rules.
104800 rules inserted. Base: 39883 rules (3446 with conclusion selected). Queue: 12910 rules.
105000 rules inserted. Base: 39996 rules (3450 with conclusion selected). Queue: 12747 rules.
105200 rules inserted. Base: 40068 rules (3454 with conclusion selected). Queue: 12847 rules.
105400 rules inserted. Base: 40228 rules (3454 with conclusion selected). Queue: 13125 rules.
105600 rules inserted. Base: 40340 rules (3454 with conclusion selected). Queue: 13386 rules.
105800 rules inserted. Base: 40443 rules (3458 with conclusion selected). Queue: 14177 rules.
106000 rules inserted. Base: 40398 rules (3458 with conclusion selected). Queue: 14076 rules.
106200 rules inserted. Base: 40438 rules (3466 with conclusion selected). Queue: 13884 rules.
106400 rules inserted. Base: 40350 rules (3466 with conclusion selected). Queue: 13776 rules.
106600 rules inserted. Base: 40390 rules (3474 with conclusion selected). Queue: 13584 rules.
106800 rules inserted. Base: 40407 rules (3480 with conclusion selected). Queue: 13513 rules.
107000 rules inserted. Base: 40441 rules (3482 with conclusion selected). Queue: 13323 rules.
107200 rules inserted. Base: 40375 rules (3488 with conclusion selected). Queue: 13225 rules.
107400 rules inserted. Base: 40409 rules (3490 with conclusion selected). Queue: 13035 rules.
107600 rules inserted. Base: 40408 rules (3494 with conclusion selected). Queue: 12955 rules.
107800 rules inserted. Base: 40426 rules (3494 with conclusion selected). Queue: 12939 rules.
108000 rules inserted. Base: 40458 rules (3500 with conclusion selected). Queue: 12751 rules.
108200 rules inserted. Base: 40380 rules (3502 with conclusion selected). Queue: 12635 rules.
108400 rules inserted. Base: 40410 rules (3508 with conclusion selected). Queue: 12451 rules.
108600 rules inserted. Base: 40392 rules (3510 with conclusion selected). Queue: 12275 rules.
108800 rules inserted. Base: 40469 rules (3518 with conclusion selected). Queue: 12186 rules.
109000 rules inserted. Base: 40359 rules (3518 with conclusion selected). Queue: 12016 rules.
109200 rules inserted. Base: 40437 rules (3526 with conclusion selected). Queue: 11898 rules.
109400 rules inserted. Base: 40373 rules (3526 with conclusion selected). Queue: 11724 rules.
109600 rules inserted. Base: 40519 rules (3530 with conclusion selected). Queue: 11723 rules.
109800 rules inserted. Base: 40556 rules (3543 with conclusion selected). Queue: 11732 rules.
110000 rules inserted. Base: 40590 rules (3560 with conclusion selected). Queue: 11718 rules.
110200 rules inserted. Base: 40698 rules (3576 with conclusion selected). Queue: 11795 rules.
110400 rules inserted. Base: 40758 rules (3577 with conclusion selected). Queue: 12038 rules.
110600 rules inserted. Base: 40841 rules (3577 with conclusion selected). Queue: 12038 rules.
110800 rules inserted. Base: 40961 rules (3577 with conclusion selected). Queue: 12627 rules.
111000 rules inserted. Base: 41087 rules (3577 with conclusion selected). Queue: 12725 rules.
111200 rules inserted. Base: 41177 rules (3583 with conclusion selected). Queue: 13006 rules.
111400 rules inserted. Base: 41133 rules (3583 with conclusion selected). Queue: 12953 rules.
111600 rules inserted. Base: 41289 rules (3583 with conclusion selected). Queue: 13268 rules.
111800 rules inserted. Base: 41402 rules (3583 with conclusion selected). Queue: 13552 rules.
112000 rules inserted. Base: 41524 rules (3583 with conclusion selected). Queue: 13910 rules.
112200 rules inserted. Base: 41541 rules (3583 with conclusion selected). Queue: 14580 rules.
112400 rules inserted. Base: 41613 rules (3583 with conclusion selected). Queue: 14589 rules.
112600 rules inserted. Base: 41711 rules (3583 with conclusion selected). Queue: 15187 rules.
112800 rules inserted. Base: 41844 rules (3583 with conclusion selected). Queue: 15448 rules.
113000 rules inserted. Base: 41947 rules (3587 with conclusion selected). Queue: 15697 rules.
113200 rules inserted. Base: 42107 rules (3596 with conclusion selected). Queue: 15565 rules.
113400 rules inserted. Base: 42073 rules (3632 with conclusion selected). Queue: 15567 rules.
113600 rules inserted. Base: 42204 rules (3643 with conclusion selected). Queue: 15572 rules.
113800 rules inserted. Base: 42318 rules (3643 with conclusion selected). Queue: 15550 rules.
114000 rules inserted. Base: 42442 rules (3643 with conclusion selected). Queue: 15535 rules.
114200 rules inserted. Base: 42562 rules (3647 with conclusion selected). Queue: 15479 rules.
114400 rules inserted. Base: 42621 rules (3659 with conclusion selected). Queue: 15470 rules.
114600 rules inserted. Base: 42632 rules (3669 with conclusion selected). Queue: 15444 rules.
114800 rules inserted. Base: 42671 rules (3689 with conclusion selected). Queue: 15440 rules.
115000 rules inserted. Base: 42819 rules (3692 with conclusion selected). Queue: 15596 rules.
115200 rules inserted. Base: 42856 rules (3693 with conclusion selected). Queue: 15772 rules.
115400 rules inserted. Base: 42965 rules (3703 with conclusion selected). Queue: 15728 rules.
115600 rules inserted. Base: 42994 rules (3713 with conclusion selected). Queue: 15739 rules.
115800 rules inserted. Base: 43025 rules (3733 with conclusion selected). Queue: 15703 rules.
116000 rules inserted. Base: 43164 rules (3736 with conclusion selected). Queue: 15885 rules.
116200 rules inserted. Base: 43208 rules (3737 with conclusion selected). Queue: 16042 rules.
116400 rules inserted. Base: 43377 rules (3737 with conclusion selected). Queue: 16039 rules.
116600 rules inserted. Base: 43461 rules (3745 with conclusion selected). Queue: 15939 rules.
116800 rules inserted. Base: 43513 rules (3745 with conclusion selected). Queue: 15891 rules.
117000 rules inserted. Base: 43552 rules (3755 with conclusion selected). Queue: 15935 rules.
117200 rules inserted. Base: 43621 rules (3759 with conclusion selected). Queue: 15991 rules.
117400 rules inserted. Base: 43633 rules (3759 with conclusion selected). Queue: 15835 rules.
117600 rules inserted. Base: 43655 rules (3759 with conclusion selected). Queue: 15769 rules.
117800 rules inserted. Base: 43689 rules (3765 with conclusion selected). Queue: 15577 rules.
118000 rules inserted. Base: 43593 rules (3767 with conclusion selected). Queue: 15479 rules.
118200 rules inserted. Base: 43627 rules (3773 with conclusion selected). Queue: 15287 rules.
118400 rules inserted. Base: 43581 rules (3775 with conclusion selected). Queue: 15130 rules.
118600 rules inserted. Base: 43674 rules (3783 with conclusion selected). Queue: 15031 rules.
118800 rules inserted. Base: 43555 rules (3783 with conclusion selected). Queue: 14865 rules.
119000 rules inserted. Base: 43628 rules (3791 with conclusion selected). Queue: 14753 rules.
119200 rules inserted. Base: 43566 rules (3791 with conclusion selected). Queue: 14571 rules.
119400 rules inserted. Base: 43706 rules (3795 with conclusion selected). Queue: 14571 rules.
119600 rules inserted. Base: 43743 rules (3805 with conclusion selected). Queue: 14580 rules.
119800 rules inserted. Base: 43775 rules (3825 with conclusion selected). Queue: 14557 rules.
120000 rules inserted. Base: 43874 rules (3835 with conclusion selected). Queue: 14612 rules.
120200 rules inserted. Base: 43991 rules (3842 with conclusion selected). Queue: 14942 rules.
120400 rules inserted. Base: 44039 rules (3862 with conclusion selected). Queue: 14957 rules.
120600 rules inserted. Base: 44050 rules (3872 with conclusion selected). Queue: 14931 rules.
120800 rules inserted. Base: 44224 rules (3889 with conclusion selected). Queue: 15164 rules.
121000 rules inserted. Base: 44347 rules (3893 with conclusion selected). Queue: 15203 rules.
121200 rules inserted. Base: 44504 rules (3901 with conclusion selected). Queue: 15096 rules.
121400 rules inserted. Base: 44638 rules (3905 with conclusion selected). Queue: 15125 rules.
121600 rules inserted. Base: 44764 rules (3908 with conclusion selected). Queue: 15171 rules.
121800 rules inserted. Base: 44823 rules (3909 with conclusion selected). Queue: 15326 rules.
122000 rules inserted. Base: 44968 rules (3917 with conclusion selected). Queue: 15338 rules.
122200 rules inserted. Base: 44970 rules (3918 with conclusion selected). Queue: 15401 rules.
122400 rules inserted. Base: 45002 rules (3924 with conclusion selected). Queue: 15207 rules.
122600 rules inserted. Base: 44901 rules (3926 with conclusion selected). Queue: 15110 rules.
122800 rules inserted. Base: 44933 rules (3932 with conclusion selected). Queue: 14916 rules.
123000 rules inserted. Base: 44882 rules (3934 with conclusion selected). Queue: 14762 rules.
123200 rules inserted. Base: 44974 rules (3942 with conclusion selected). Queue: 14660 rules.
123400 rules inserted. Base: 44861 rules (3942 with conclusion selected). Queue: 14488 rules.
123600 rules inserted. Base: 44921 rules (3950 with conclusion selected). Queue: 14381 rules.
123800 rules inserted. Base: 44853 rules (3950 with conclusion selected). Queue: 14185 rules.
124000 rules inserted. Base: 44973 rules (3964 with conclusion selected). Queue: 14208 rules.
124200 rules inserted. Base: 44984 rules (3964 with conclusion selected). Queue: 14145 rules.
124400 rules inserted. Base: 45016 rules (3970 with conclusion selected). Queue: 13951 rules.
124600 rules inserted. Base: 44915 rules (3972 with conclusion selected). Queue: 13854 rules.
124800 rules inserted. Base: 44947 rules (3978 with conclusion selected). Queue: 13660 rules.
125000 rules inserted. Base: 44896 rules (3980 with conclusion selected). Queue: 13522 rules.
125200 rules inserted. Base: 44988 rules (3988 with conclusion selected). Queue: 13404 rules.
125400 rules inserted. Base: 44851 rules (3988 with conclusion selected). Queue: 13240 rules.
125600 rules inserted. Base: 44935 rules (3996 with conclusion selected). Queue: 13125 rules.
125800 rules inserted. Base: 44861 rules (3996 with conclusion selected). Queue: 12934 rules.
126000 rules inserted. Base: 44891 rules (3996 with conclusion selected). Queue: 12744 rules.
126200 rules inserted. Base: 44899 rules (4000 with conclusion selected). Queue: 12482 rules.
126400 rules inserted. Base: 44976 rules (4006 with conclusion selected). Queue: 12448 rules.
126600 rules inserted. Base: 44969 rules (4006 with conclusion selected). Queue: 12349 rules.
126800 rules inserted. Base: 45003 rules (4014 with conclusion selected). Queue: 12157 rules.
127000 rules inserted. Base: 44900 rules (4014 with conclusion selected). Queue: 12058 rules.
127200 rules inserted. Base: 44934 rules (4022 with conclusion selected). Queue: 11866 rules.
127400 rules inserted. Base: 44939 rules (4028 with conclusion selected). Queue: 11804 rules.
127600 rules inserted. Base: 44967 rules (4030 with conclusion selected). Queue: 11614 rules.
127800 rules inserted. Base: 44886 rules (4036 with conclusion selected). Queue: 11525 rules.
128000 rules inserted. Base: 44914 rules (4038 with conclusion selected). Queue: 11335 rules.
128200 rules inserted. Base: 44886 rules (4042 with conclusion selected). Queue: 11521 rules.
128400 rules inserted. Base: 44910 rules (4046 with conclusion selected). Queue: 11485 rules.
128600 rules inserted. Base: 44981 rules (4046 with conclusion selected). Queue: 11491 rules.
