Linear part:
exp(g(x),y) = exp(g(y),x)
Completing equations...
Completed equations:
exp(g(x),y) = exp(g(y),x)
Convergent part: No equation.
Process 0 (that is, the initial process):
{1}new i: bitstring;
{2}new r: bitstring;
{3}out(c, i);
{4}out(c, r);
{5}new ski: SecretKey;
{6}new skr: SecretKey;
{7}out(c, pk(ski));
{8}out(c, pk(skr));
(
    {9}!
    {10}let c_1: channel = c in
    {11}let i_1: bitstring = i in
    {12}let ski_1: SecretKey = ski in
    {13}let r_1: bitstring = r in
    {14}let pkr: PublicKey = pk(skr) in
    {15}in(c_1, e: bitstring);
    {16}if (e = r_1) then
    (
        {17}let talksOnlyToHonest: bool = true in
        {18}new x: exponent;
        {19}let gx: G = g(x) in
        {20}let m_1: bitstring = bitG(gx) in
        {21}event initiatorSendsLastMessageToResponder(m_1);
        {22}out(c_1, m_1);
        {23}in(c_1, m_2: bitstring);
        {24}let (bit_gy: bitstring,enc_signature: bitstring) = m_2 in
        {25}let gy: G = unbitG(bit_gy) in
        {26}let k: SymmetricKey = GtoSymK(exp(gy,x)) in
        {27}if ((gy,gx) = check(dec(enc_signature,k),pkr)) then
        {28}if talksOnlyToHonest then
        {29}out(c_1, check_reach_initiator);
        (
            {30}event initiatorCompletesProtocol(m_1,m_2)
        ) | (
            {31}out(chSymK(k), free_k_from_initiator)
        )
    )
    else
        {32}in(c_1, pke: PublicKey);
        {33}let talksOnlyToHonest_1: bool = false in
        {34}new x_1: exponent;
        {35}let gx_1: G = g(x_1) in
        {36}let m: bitstring = bitG(gx_1) in
        {37}event initiatorSendsLastMessageToResponder(m);
        {38}out(c_1, m);
        {39}in(c_1, m_3: bitstring);
        {40}let (bit_gy_1: bitstring,enc_signature_1: bitstring) = m_3 in
        {41}let gy_1: G = unbitG(bit_gy_1) in
        {42}let k_1: SymmetricKey = GtoSymK(exp(gy_1,x_1)) in
        {43}if ((gy_1,gx_1) = check(dec(enc_signature_1,k_1),pke)) then
        {44}if talksOnlyToHonest_1 then
        {45}out(c_1, check_reach_initiator);
        (
            {46}event initiatorCompletesProtocol(m,m_3)
        ) | (
            {47}out(chSymK(k_1), free_k_from_initiator)
        )
) | (
    {48}!
    {49}let c_2: channel = c in
    {50}let r_2: bitstring = r in
    {51}let skr_1: SecretKey = skr in
    {52}let i_2: bitstring = i in
    {53}let pki: PublicKey = pk(ski) in
    {54}in(c_2, e_1: bitstring);
    {55}if (e_1 = i_2) then
    (
        {56}let talksOnlyToHonest_2: bool = true in
        {57}in(c_2, m_4: bitstring);
        {58}let gx_2: G = unbitG(m_4) in
        {59}new y: exponent;
        {60}let gy_2: G = g(y) in
        {61}let k_2: SymmetricKey = GtoSymK(exp(gx_2,y)) in
        {62}let m_5: bitstring = (bitG(gy_2),enc(sign((gy_2,gx_2),skr_1),k_2)) in
        {63}event responderSendsLastMessageToInitiator(m_4,m_5);
        {64}out(c_2, m_5);
        {65}if talksOnlyToHonest_2 then
        {66}out(c_2, check_reach_responder);
        (
            {67}event responderCompletesProtocol(m_4)
        ) | (
            {68}out(chSymK(k_2), free_k_from_responder)
        )
    )
    else
        {69}in(c_2, pke_1: PublicKey);
        {70}let talksOnlyToHonest_3: bool = false in
        {71}in(c_2, m_6: bitstring);
        {72}let gx_3: G = unbitG(m_6) in
        {73}new y_1: exponent;
        {74}let gy_3: G = g(y_1) in
        {75}let k_3: SymmetricKey = GtoSymK(exp(gx_3,y_1)) in
        {76}let m_7: bitstring = (bitG(gy_3),enc(sign((gy_3,gx_3),skr_1),k_3)) in
        {77}event responderSendsLastMessageToInitiator(m_6,m_7);
        {78}out(c_2, m_7);
        {79}if talksOnlyToHonest_3 then
        {80}out(c_2, check_reach_responder);
        (
            {81}event responderCompletesProtocol(m_6)
        ) | (
            {82}out(chSymK(k_3), free_k_from_responder)
        )
)

--  Process 1 (that is, process 0, with let moved downwards):
{1}new i: bitstring;
{2}new r: bitstring;
{3}out(c, i);
{4}out(c, r);
{5}new ski: SecretKey;
{6}new skr: SecretKey;
{7}out(c, pk(ski));
{8}out(c, pk(skr));
(
    {9}!
    {10}let c_1: channel = c in
    {15}in(c_1, e: bitstring);
    {13}let r_1: bitstring = r in
    {16}if (e = r_1) then
    (
        {18}new x: exponent;
        {19}let gx: G = g(x) in
        {20}let m_1: bitstring = bitG(gx) in
        {21}event initiatorSendsLastMessageToResponder(m_1);
        {22}out(c_1, m_1);
        {23}in(c_1, m_2: bitstring);
        {24}let (bit_gy: bitstring,enc_signature: bitstring) = m_2 in
        {25}let gy: G = unbitG(bit_gy) in
        {26}let k: SymmetricKey = GtoSymK(exp(gy,x)) in
        {14}let pkr: PublicKey = pk(skr) in
        {27}if ((gy,gx) = check(dec(enc_signature,k),pkr)) then
        {17}let talksOnlyToHonest: bool = true in
        {28}if talksOnlyToHonest then
        {29}out(c_1, check_reach_initiator);
        (
            {30}event initiatorCompletesProtocol(m_1,m_2)
        ) | (
            {31}out(chSymK(k), free_k_from_initiator)
        )
    )
    else
        {32}in(c_1, pke: PublicKey);
        {34}new x_1: exponent;
        {35}let gx_1: G = g(x_1) in
        {36}let m: bitstring = bitG(gx_1) in
        {37}event initiatorSendsLastMessageToResponder(m);
        {38}out(c_1, m);
        {39}in(c_1, m_3: bitstring);
        {40}let (bit_gy_1: bitstring,enc_signature_1: bitstring) = m_3 in
        {41}let gy_1: G = unbitG(bit_gy_1) in
        {42}let k_1: SymmetricKey = GtoSymK(exp(gy_1,x_1)) in
        {43}if ((gy_1,gx_1) = check(dec(enc_signature_1,k_1),pke)) then
        {33}let talksOnlyToHonest_1: bool = false in
        {44}if talksOnlyToHonest_1 then
        {45}out(c_1, check_reach_initiator);
        (
            {46}event initiatorCompletesProtocol(m,m_3)
        ) | (
            {47}out(chSymK(k_1), free_k_from_initiator)
        )
) | (
    {48}!
    {49}let c_2: channel = c in
    {54}in(c_2, e_1: bitstring);
    {52}let i_2: bitstring = i in
    {51}let skr_1: SecretKey = skr in
    {55}if (e_1 = i_2) then
    (
        {57}in(c_2, m_4: bitstring);
        {58}let gx_2: G = unbitG(m_4) in
        {59}new y: exponent;
        {61}let k_2: SymmetricKey = GtoSymK(exp(gx_2,y)) in
        {60}let gy_2: G = g(y) in
        {62}let m_5: bitstring = (bitG(gy_2),enc(sign((gy_2,gx_2),skr_1),k_2)) in
        {63}event responderSendsLastMessageToInitiator(m_4,m_5);
        {64}out(c_2, m_5);
        {56}let talksOnlyToHonest_2: bool = true in
        {65}if talksOnlyToHonest_2 then
        {66}out(c_2, check_reach_responder);
        (
            {67}event responderCompletesProtocol(m_4)
        ) | (
            {68}out(chSymK(k_2), free_k_from_responder)
        )
    )
    else
        {69}in(c_2, pke_1: PublicKey);
        {71}in(c_2, m_6: bitstring);
        {72}let gx_3: G = unbitG(m_6) in
        {73}new y_1: exponent;
        {75}let k_3: SymmetricKey = GtoSymK(exp(gx_3,y_1)) in
        {74}let gy_3: G = g(y_1) in
        {76}let m_7: bitstring = (bitG(gy_3),enc(sign((gy_3,gx_3),skr_1),k_3)) in
        {77}event responderSendsLastMessageToInitiator(m_6,m_7);
        {78}out(c_2, m_7);
        {70}let talksOnlyToHonest_3: bool = false in
        {79}if talksOnlyToHonest_3 then
        {80}out(c_2, check_reach_responder);
        (
            {81}event responderCompletesProtocol(m_6)
        ) | (
            {82}out(chSymK(k_3), free_k_from_responder)
        )
)

-- Query not attacker(check_reach_initiator[]) in process 1.
Translating the process into Horn clauses...
select attacker(bitG(gx_4))/-5000
Completing...
Termination warning: attacker(bitG(elem)) -> attacker(elem)
Selecting 0
200 rules inserted. Base: 134 rules (63 with conclusion selected). Queue: 23 rules.
Starting query not attacker(check_reach_initiator[])
goal reachable: attacker(check_reach_initiator[])

Derivation:
Abbreviations:
x_2 = x[e = r[],!1 = @sid]
y_2 = y_1[m_6 = bitG(g(x_2)),pke_1 = pke_2,e_1 = e_2,!1 = @sid_1]

1. The message r[] may be sent to the attacker at output {4}.
attacker(r[]).

2. The attacker has some term e_2.
attacker(e_2).

3. The attacker has some term pke_2.
attacker(pke_2).

4. The message r[] that the attacker may have by 1 may be received at input {15}.
So the message bitG(g(x_2)) may be sent to the attacker at output {22}.
attacker(bitG(g(x_2))).

5. The message e_2 that the attacker may have by 2 may be received at input {54}.
The message pke_2 that the attacker may have by 3 may be received at input {69}.
The message bitG(g(x_2)) that the attacker may have by 4 may be received at input {71}.
We have e_2 Ôëá i[].
So the message (bitG(g(y_2)),enc(sign((g(y_2),g(x_2)),skr[]),GtoSymK(exp(g(x_2),y_2)))) may be sent to the attacker at output {78}.
attacker((bitG(g(y_2)),enc(sign((g(y_2),g(x_2)),skr[]),GtoSymK(exp(g(x_2),y_2))))).

6. By 5, the attacker may know (bitG(g(y_2)),enc(sign((g(y_2),g(x_2)),skr[]),GtoSymK(exp(g(x_2),y_2)))).
Using the function 2-proj-2-tuple the attacker may obtain enc(sign((g(y_2),g(x_2)),skr[]),GtoSymK(exp(g(x_2),y_2))).
attacker(enc(sign((g(y_2),g(x_2)),skr[]),GtoSymK(exp(g(x_2),y_2)))).

7. By 5, the attacker may know (bitG(g(y_2)),enc(sign((g(y_2),g(x_2)),skr[]),GtoSymK(exp(g(x_2),y_2)))).
Using the function 1-proj-2-tuple the attacker may obtain bitG(g(y_2)).
attacker(bitG(g(y_2))).

8. By 7, the attacker may know bitG(g(y_2)).
By 6, the attacker may know enc(sign((g(y_2),g(x_2)),skr[]),GtoSymK(exp(g(x_2),y_2))).
Using the function 2-tuple the attacker may obtain (bitG(g(y_2)),enc(sign((g(y_2),g(x_2)),skr[]),GtoSymK(exp(g(x_2),y_2)))).
attacker((bitG(g(y_2)),enc(sign((g(y_2),g(x_2)),skr[]),GtoSymK(exp(g(x_2),y_2))))).

9. The message r[] that the attacker may have by 1 may be received at input {15}.
The message (bitG(g(y_2)),enc(sign((g(y_2),g(x_2)),skr[]),GtoSymK(exp(g(x_2),y_2)))) that the attacker may have by 8 may be received at input {23}.
So the message check_reach_initiator[] may be sent to the attacker at output {29}.
attacker(check_reach_initiator[]).

10. By 9, attacker(check_reach_initiator[]).
The goal is reached, represented in the following fact:
attacker(check_reach_initiator[]).


A more detailed output of the traces is available with
  set traceDisplay = long.

new i: bitstring creating i_3 at {1}

new r: bitstring creating r_3 at {2}

out(c, ~M) with ~M = i_3 at {3}

out(c, ~M_1) with ~M_1 = r_3 at {4}

new ski: SecretKey creating ski_2 at {5}

new skr: SecretKey creating skr_2 at {6}

out(c, ~M_2) with ~M_2 = pk(ski_2) at {7}

out(c, ~M_3) with ~M_3 = pk(skr_2) at {8}

in(c, ~M_1) with ~M_1 = r_3 at {15} in copy a

new x: exponent creating x_2 at {18} in copy a

event initiatorSendsLastMessageToResponder(bitG(g(x_2))) at {21} in copy a

out(c, ~M_4) with ~M_4 = bitG(g(x_2)) at {22} in copy a

in(c, a_1) at {54} in copy a_2

in(c, a_3) at {69} in copy a_2

in(c, ~M_4) with ~M_4 = bitG(g(x_2)) at {71} in copy a_2

new y_1: exponent creating y_2 at {73} in copy a_2

event responderSendsLastMessageToInitiator(bitG(g(x_2)),(bitG(g(y_2)),enc(sign((g(y_2),g(x_2)),skr_2),GtoSymK(exp(g(x_2),y_2))))) at {77} in copy a_2

out(c, (~M_5,~M_6)) with ~M_5 = bitG(g(y_2)), ~M_6 = enc(sign((g(y_2),g(x_2)),skr_2),GtoSymK(exp(g(x_2),y_2))) at {78} in copy a_2

in(c, (~M_5,~M_6)) with ~M_5 = bitG(g(y_2)), ~M_6 = enc(sign((g(y_2),g(x_2)),skr_2),GtoSymK(exp(g(x_2),y_2))) at {23} in copy a

out(c, ~M_7) with ~M_7 = check_reach_initiator at {29} in copy a

event initiatorCompletesProtocol(bitG(g(x_2)),(bitG(g(y_2)),enc(sign((g(y_2),g(x_2)),skr_2),GtoSymK(exp(g(x_2),y_2))))) at {30} in copy a

The attacker has the message ~M_7 = check_reach_initiator.
A trace has been found.
RESULT not attacker(check_reach_initiator[]) is false.
-- Query not attacker(check_reach_responder[]) in process 1.
Translating the process into Horn clauses...
select attacker(bitG(gx_4))/-5000
Completing...
Termination warning: attacker(bitG(elem)) -> attacker(elem)
Selecting 0
200 rules inserted. Base: 134 rules (63 with conclusion selected). Queue: 23 rules.
Starting query not attacker(check_reach_responder[])
goal reachable: attacker(bitG(gx_4)) -> attacker(check_reach_responder[])

Derivation:

1. The message i[] may be sent to the attacker at output {3}.
attacker(i[]).

2. We assume as hypothesis that
attacker(bitG(gx_4)).

3. The message i[] that the attacker may have by 1 may be received at input {54}.
The message bitG(gx_4) that the attacker may have by 2 may be received at input {57}.
So the message check_reach_responder[] may be sent to the attacker at output {66}.
attacker(check_reach_responder[]).

4. By 3, attacker(check_reach_responder[]).
The goal is reached, represented in the following fact:
attacker(check_reach_responder[]).


A more detailed output of the traces is available with
  set traceDisplay = long.

new i: bitstring creating i_3 at {1}

new r: bitstring creating r_3 at {2}

out(c, ~M) with ~M = i_3 at {3}

out(c, ~M_1) with ~M_1 = r_3 at {4}

new ski: SecretKey creating ski_2 at {5}

new skr: SecretKey creating skr_2 at {6}

out(c, ~M_2) with ~M_2 = pk(ski_2) at {7}

out(c, ~M_3) with ~M_3 = pk(skr_2) at {8}

in(c, ~M) with ~M = i_3 at {54} in copy a

in(c, bitG(a_1)) at {57} in copy a

new y: exponent creating y_2 at {59} in copy a

event responderSendsLastMessageToInitiator(bitG(a_1),(bitG(g(y_2)),enc(sign((g(y_2),a_1),skr_2),GtoSymK(exp(a_1,y_2))))) at {63} in copy a

out(c, (~M_4,~M_5)) with ~M_4 = bitG(g(y_2)), ~M_5 = enc(sign((g(y_2),a_1),skr_2),GtoSymK(exp(a_1,y_2))) at {64} in copy a

out(c, ~M_6) with ~M_6 = check_reach_responder at {66} in copy a

event responderCompletesProtocol(bitG(a_1)) at {67} in copy a

The attacker has the message ~M_6 = check_reach_responder.
A trace has been found.
RESULT not attacker(check_reach_responder[]) is false.
-- Query not attacker(free_k_from_initiator[]) in process 1.
Translating the process into Horn clauses...
select attacker(bitG(gx_4))/-5000
Completing...
Termination warning: attacker(bitG(elem)) -> attacker(elem)
Selecting 0
200 rules inserted. Base: 134 rules (63 with conclusion selected). Queue: 23 rules.
Starting query not attacker(free_k_from_initiator[])
RESULT not attacker(free_k_from_initiator[]) is true.
-- Query not attacker(free_k_from_responder[]) in process 1.
Translating the process into Horn clauses...
select attacker(bitG(gx_4))/-5000
Completing...
Termination warning: attacker(bitG(elem)) -> attacker(elem)
Selecting 0
200 rules inserted. Base: 134 rules (63 with conclusion selected). Queue: 23 rules.
Starting query not attacker(free_k_from_responder[])
goal reachable: attacker(free_k_from_responder[])

Derivation:
Abbreviations:
y_2 = y[m_4 = bitG(g(y_3)),e_1 = i[],!1 = @sid]

1. The attacker has some term y_3.
attacker(y_3).

2. The message i[] may be sent to the attacker at output {3}.
attacker(i[]).

3. By 1, the attacker may know y_3.
Using the function g the attacker may obtain g(y_3).
attacker(g(y_3)).

4. By 3, the attacker may know g(y_3).
Using the function bitG the attacker may obtain bitG(g(y_3)).
attacker(bitG(g(y_3))).

5. The message i[] that the attacker may have by 2 may be received at input {54}.
The message bitG(g(y_3)) that the attacker may have by 4 may be received at input {57}.
So the message (bitG(g(y_2)),enc(sign((g(y_2),g(y_3)),skr[]),GtoSymK(exp(g(y_3),y_2)))) may be sent to the attacker at output {64}.
attacker((bitG(g(y_2)),enc(sign((g(y_2),g(y_3)),skr[]),GtoSymK(exp(g(y_3),y_2))))).

6. By 5, the attacker may know (bitG(g(y_2)),enc(sign((g(y_2),g(y_3)),skr[]),GtoSymK(exp(g(y_3),y_2)))).
Using the function 1-proj-2-tuple the attacker may obtain bitG(g(y_2)).
attacker(bitG(g(y_2))).

7. By 6, the attacker may know bitG(g(y_2)).
Using the function unbitG the attacker may obtain g(y_2).
attacker(g(y_2)).

8. By 7, the attacker may know g(y_2).
By 1, the attacker may know y_3.
Using the function exp the attacker may obtain exp(g(y_3),y_2).
attacker(exp(g(y_3),y_2)).

9. By 8, the attacker may know exp(g(y_3),y_2).
Using the function GtoSymK the attacker may obtain GtoSymK(exp(g(y_3),y_2)).
attacker(GtoSymK(exp(g(y_3),y_2))).

10. By 9, the attacker may know GtoSymK(exp(g(y_3),y_2)).
Using the function chSymK the attacker may obtain chSymK(GtoSymK(exp(g(y_3),y_2))).
attacker(chSymK(GtoSymK(exp(g(y_3),y_2)))).

11. The message i[] that the attacker may have by 2 may be received at input {54}.
The message bitG(g(y_3)) that the attacker may have by 4 may be received at input {57}.
So the message free_k_from_responder[] may be sent on channel chSymK(GtoSymK(exp(g(y_3),y_2))) at output {68}.
mess(chSymK(GtoSymK(exp(g(y_3),y_2))),free_k_from_responder[]).

12. By 10, the attacker may have the channel chSymK(GtoSymK(exp(g(y_3),y_2))).
By 11, the message free_k_from_responder[] may be sent on this channel.
So the attacker may obtain the message free_k_from_responder[] by listening on this channel.
attacker(free_k_from_responder[]).

13. By 12, attacker(free_k_from_responder[]).
The goal is reached, represented in the following fact:
attacker(free_k_from_responder[]).


A more detailed output of the traces is available with
  set traceDisplay = long.

new i: bitstring creating i_3 at {1}

new r: bitstring creating r_3 at {2}

out(c, ~M) with ~M = i_3 at {3}

out(c, ~M_1) with ~M_1 = r_3 at {4}

new ski: SecretKey creating ski_2 at {5}

new skr: SecretKey creating skr_2 at {6}

out(c, ~M_2) with ~M_2 = pk(ski_2) at {7}

out(c, ~M_3) with ~M_3 = pk(skr_2) at {8}

in(c, ~M) with ~M = i_3 at {54} in copy a

in(c, bitG(g(a_1))) at {57} in copy a

new y: exponent creating y_2 at {59} in copy a

event responderSendsLastMessageToInitiator(bitG(g(a_1)),(bitG(g(y_2)),enc(sign((g(y_2),g(a_1)),skr_2),GtoSymK(exp(g(a_1),y_2))))) at {63} in copy a

out(c, (~M_4,~M_5)) with ~M_4 = bitG(g(y_2)), ~M_5 = enc(sign((g(y_2),g(a_1)),skr_2),GtoSymK(exp(g(a_1),y_2))) at {64} in copy a

out(c, ~M_6) with ~M_6 = check_reach_responder at {66} in copy a

out(chSymK(GtoSymK(exp(g(a_1),y_2))), ~M_7) with ~M_7 = free_k_from_responder at {68} in copy a

event responderCompletesProtocol(bitG(g(a_1))) at {67} in copy a

The attacker has the message ~M_7 = free_k_from_responder.
A trace has been found.
RESULT not attacker(free_k_from_responder[]) is false.
-- Query inj-event(initiatorCompletesProtocol(m_8,m_9)) ==> inj-event(responderSendsLastMessageToInitiator(m_8,m_9)) in process 1.
Translating the process into Horn clauses...
select attacker(bitG(g(x_2)))/-5000
select attacker(bitG(gx_4))/-5000
Completing...
Termination warning: attacker(bitG(elem)) -> attacker(elem)
Selecting 0
200 rules inserted. Base: 127 rules (63 with conclusion selected). Queue: 48 rules.
Starting query inj-event(initiatorCompletesProtocol(m_8,m_9)) ==> inj-event(responderSendsLastMessageToInitiator(m_8,m_9))
goal reachable: e_2 Ôëá i[] && begin(responderSendsLastMessageToInitiator(bitG(g(x_2)),(bitG(g(y_2)),enc(sign((g(y_2),g(x_2)),skr[]),GtoSymK(exp(g(x_2),y_2))))),@occ77_1) && attacker(pke_2) && attacker(e_2) -> end(@occ30_1,initiatorCompletesProtocol(bitG(g(x_2)),(bitG(g(y_2)),enc(sign((g(y_2),g(x_2)),skr[]),GtoSymK(exp(g(x_2),y_2))))))
The 1st hypothesis occurs strictly before the conclusion.
The 2nd, 3rd hypotheses occur before the conclusion.
Abbreviations:
x_2 = x[e = r[],!1 = @sid]
y_2 = y_1[m_6 = bitG(g(x_2)),pke_1 = pke_2,e_1 = e_2,!1 = @sid_1]
@occ30_1 = @occ30[m_2 = (bitG(g(y_2)),enc(sign((g(y_2),g(x_2)),skr[]),GtoSymK(exp(g(x_2),y_2)))),e = r[],!1 = @sid]
@occ77_1 = @occ77[m_6 = bitG(g(x_2)),pke_1 = pke_2,e_1 = e_2,!1 = @sid_1]
goal reachable: begin(responderSendsLastMessageToInitiator(bitG(g(x_2)),(bitG(g(y_2)),enc(sign((g(y_2),g(x_2)),skr[]),GtoSymK(exp(g(x_2),y_2))))),@occ63_1) -> end(@occ30_1,initiatorCompletesProtocol(bitG(g(x_2)),(bitG(g(y_2)),enc(sign((g(y_2),g(x_2)),skr[]),GtoSymK(exp(g(x_2),y_2))))))
The hypothesis occurs strictly before the conclusion.
Abbreviations:
x_2 = x[e = r[],!1 = @sid]
y_2 = y[m_4 = bitG(g(x_2)),e_1 = i[],!1 = @sid_1]
@occ30_1 = @occ30[m_2 = (bitG(g(y_2)),enc(sign((g(y_2),g(x_2)),skr[]),GtoSymK(exp(g(x_2),y_2)))),e = r[],!1 = @sid]
@occ63_1 = @occ63[m_4 = bitG(g(x_2)),e_1 = i[],!1 = @sid_1]
RESULT inj-event(initiatorCompletesProtocol(m_8,m_9)) ==> inj-event(responderSendsLastMessageToInitiator(m_8,m_9)) is true.
-- Query inj-event(responderCompletesProtocol(m_8)) ==> inj-event(initiatorSendsLastMessageToResponder(m_8)) in process 1.
Translating the process into Horn clauses...
select attacker(bitG(gx_4))/-5000
Completing...
Termination warning: attacker(bitG(elem)) -> attacker(elem)
Selecting 0
200 rules inserted. Base: 132 rules (62 with conclusion selected). Queue: 39 rules.
Starting query inj-event(responderCompletesProtocol(m_8)) ==> inj-event(initiatorSendsLastMessageToResponder(m_8))
goal reachable: attacker(bitG(gx_4)) -> end(@occ67_1,responderCompletesProtocol(bitG(gx_4)))
Abbreviations:
@occ67_1 = @occ67[m_4 = bitG(gx_4),e_1 = i[],!1 = @sid]

Derivation:
Abbreviations:
@occ67_1 = @occ67[m_4 = bitG(gx_4),e_1 = i[],!1 = @sid]

1. The message i[] may be sent to the attacker at output {3}.
attacker(i[]).

2. We assume as hypothesis that
attacker(bitG(gx_4)).

3. The message i[] that the attacker may have by 1 may be received at input {54}.
The message bitG(gx_4) that the attacker may have by 2 may be received at input {57}.
So event responderCompletesProtocol(bitG(gx_4)) may be executed at {67} in session @sid.
end(@occ67_1,responderCompletesProtocol(bitG(gx_4))).

4. By 3, end(@occ67_1,responderCompletesProtocol(bitG(gx_4))).
The goal is reached, represented in the following fact:
end(@occ67_1,responderCompletesProtocol(bitG(gx_4))).


A more detailed output of the traces is available with
  set traceDisplay = long.

new i: bitstring creating i_3 at {1}

new r: bitstring creating r_3 at {2}

out(c, ~M) with ~M = i_3 at {3}

out(c, ~M_1) with ~M_1 = r_3 at {4}

new ski: SecretKey creating ski_2 at {5}

new skr: SecretKey creating skr_2 at {6}

out(c, ~M_2) with ~M_2 = pk(ski_2) at {7}

out(c, ~M_3) with ~M_3 = pk(skr_2) at {8}

in(c, ~M) with ~M = i_3 at {54} in copy a

in(c, bitG(a_1)) at {57} in copy a

new y: exponent creating y_2 at {59} in copy a

event responderSendsLastMessageToInitiator(bitG(a_1),(bitG(g(y_2)),enc(sign((g(y_2),a_1),skr_2),GtoSymK(exp(a_1,y_2))))) at {63} in copy a

out(c, (~M_4,~M_5)) with ~M_4 = bitG(g(y_2)), ~M_5 = enc(sign((g(y_2),a_1),skr_2),GtoSymK(exp(a_1,y_2))) at {64} in copy a

out(c, ~M_6) with ~M_6 = check_reach_responder at {66} in copy a

event responderCompletesProtocol(bitG(a_1)) at {67} in copy a (goal)

The event responderCompletesProtocol(bitG(a_1)) is executed at {67} in copy a.
A trace has been found.
RESULT inj-event(responderCompletesProtocol(m_8)) ==> inj-event(initiatorSendsLastMessageToResponder(m_8)) is false.
RESULT (even event(responderCompletesProtocol(m_8)) ==> event(initiatorSendsLastMessageToResponder(m_8)) is false.)

--------------------------------------------------------------
Verification summary:

Query not attacker(check_reach_initiator[]) is false.

Query not attacker(check_reach_responder[]) is false.

Query not attacker(free_k_from_initiator[]) is true.

Query not attacker(free_k_from_responder[]) is false.

Query inj-event(initiatorCompletesProtocol(m_8,m_9)) ==> inj-event(responderSendsLastMessageToInitiator(m_8,m_9)) is true.

Query inj-event(responderCompletesProtocol(m_8)) ==> inj-event(initiatorSendsLastMessageToResponder(m_8)) is false.

--------------------------------------------------------------

